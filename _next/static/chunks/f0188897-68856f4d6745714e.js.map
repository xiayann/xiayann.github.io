{"version":3,"file":"static/chunks/f0188897-68856f4d6745714e.js","mappings":"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","sources":["webpack://_N_E/xterm/webpack/universalModuleDefinition","webpack://_N_E/xterm/./src/browser/AccessibilityManager.ts","webpack://_N_E/xterm/./src/browser/Clipboard.ts","webpack://_N_E/xterm/./src/browser/ColorContrastCache.ts","webpack://_N_E/xterm/./src/browser/ColorManager.ts","webpack://_N_E/xterm/./src/browser/Dom.ts","webpack://_N_E/xterm/./src/browser/Lifecycle.ts","webpack://_N_E/xterm/./src/browser/Linkifier2.ts","webpack://_N_E/xterm/./src/browser/LocalizableStrings.ts","webpack://_N_E/xterm/./src/browser/OscLinkProvider.ts","webpack://_N_E/xterm/./src/browser/RenderDebouncer.ts","webpack://_N_E/xterm/./src/browser/ScreenDprMonitor.ts","webpack://_N_E/xterm/./src/browser/Terminal.ts","webpack://_N_E/xterm/./src/browser/TimeBasedDebouncer.ts","webpack://_N_E/xterm/./src/browser/Viewport.ts","webpack://_N_E/xterm/./src/browser/decorations/BufferDecorationRenderer.ts","webpack://_N_E/xterm/./src/browser/decorations/ColorZoneStore.ts","webpack://_N_E/xterm/./src/browser/decorations/OverviewRulerRenderer.ts","webpack://_N_E/xterm/./src/browser/input/CompositionHelper.ts","webpack://_N_E/xterm/./src/browser/input/Mouse.ts","webpack://_N_E/xterm/./src/browser/input/MoveToCell.ts","webpack://_N_E/xterm/./src/browser/renderer/Constants.ts","webpack://_N_E/xterm/./src/browser/renderer/RendererUtils.ts","webpack://_N_E/xterm/./src/browser/renderer/dom/DomRenderer.ts","webpack://_N_E/xterm/./src/browser/renderer/dom/DomRendererRowFactory.ts","webpack://_N_E/xterm/./src/browser/selection/SelectionModel.ts","webpack://_N_E/xterm/./src/browser/services/CharSizeService.ts","webpack://_N_E/xterm/./src/browser/services/CharacterJoinerService.ts","webpack://_N_E/xterm/./src/browser/services/CoreBrowserService.ts","webpack://_N_E/xterm/./src/browser/services/MouseService.ts","webpack://_N_E/xterm/./src/browser/services/RenderService.ts","webpack://_N_E/xterm/./src/browser/services/SelectionService.ts","webpack://_N_E/xterm/./src/browser/services/Services.ts","webpack://_N_E/xterm/./src/common/CircularList.ts","webpack://_N_E/xterm/./src/common/Clone.ts","webpack://_N_E/xterm/./src/common/Color.ts","webpack://_N_E/xterm/./src/common/CoreTerminal.ts","webpack://_N_E/xterm/./src/common/EventEmitter.ts","webpack://_N_E/xterm/./src/common/InputHandler.ts","webpack://_N_E/xterm/./src/common/Lifecycle.ts","webpack://_N_E/xterm/./src/common/MultiKeyMap.ts","webpack://_N_E/xterm/./src/common/Platform.ts","webpack://_N_E/xterm/./src/common/SortedList.ts","webpack://_N_E/xterm/./src/common/TypedArrayUtils.ts","webpack://_N_E/xterm/./src/common/WindowsMode.ts","webpack://_N_E/xterm/./src/common/buffer/AttributeData.ts","webpack://_N_E/xterm/./src/common/buffer/Buffer.ts","webpack://_N_E/xterm/./src/common/buffer/BufferLine.ts","webpack://_N_E/xterm/./src/common/buffer/BufferRange.ts","webpack://_N_E/xterm/./src/common/buffer/BufferReflow.ts","webpack://_N_E/xterm/./src/common/buffer/BufferSet.ts","webpack://_N_E/xterm/./src/common/buffer/CellData.ts","webpack://_N_E/xterm/./src/common/buffer/Constants.ts","webpack://_N_E/xterm/./src/common/buffer/Marker.ts","webpack://_N_E/xterm/./src/common/data/Charsets.ts","webpack://_N_E/xterm/./src/common/data/EscapeSequences.ts","webpack://_N_E/xterm/./src/common/input/Keyboard.ts","webpack://_N_E/xterm/./src/common/input/TextDecoder.ts","webpack://_N_E/xterm/./src/common/input/UnicodeV6.ts","webpack://_N_E/xterm/./src/common/input/WriteBuffer.ts","webpack://_N_E/xterm/./src/common/input/XParseColor.ts","webpack://_N_E/xterm/./src/common/parser/Constants.ts","webpack://_N_E/xterm/./src/common/parser/DcsParser.ts","webpack://_N_E/xterm/./src/common/parser/EscapeSequenceParser.ts","webpack://_N_E/xterm/./src/common/parser/OscParser.ts","webpack://_N_E/xterm/./src/common/parser/Params.ts","webpack://_N_E/xterm/./src/common/public/AddonManager.ts","webpack://_N_E/xterm/./src/common/public/BufferApiView.ts","webpack://_N_E/xterm/./src/common/public/BufferLineApiView.ts","webpack://_N_E/xterm/./src/common/public/BufferNamespaceApi.ts","webpack://_N_E/xterm/./src/common/public/ParserApi.ts","webpack://_N_E/xterm/./src/common/public/UnicodeApi.ts","webpack://_N_E/xterm/./src/common/services/BufferService.ts","webpack://_N_E/xterm/./src/common/services/CharsetService.ts","webpack://_N_E/xterm/./src/common/services/CoreMouseService.ts","webpack://_N_E/xterm/./src/common/services/CoreService.ts","webpack://_N_E/xterm/./src/common/services/DecorationService.ts","webpack://_N_E/xterm/./src/common/services/DirtyRowService.ts","webpack://_N_E/xterm/./src/common/services/InstantiationService.ts","webpack://_N_E/xterm/./src/common/services/LogService.ts","webpack://_N_E/xterm/./src/common/services/OptionsService.ts","webpack://_N_E/xterm/./src/common/services/OscLinkService.ts","webpack://_N_E/xterm/./src/common/services/ServiceRegistry.ts","webpack://_N_E/xterm/./src/common/services/Services.ts","webpack://_N_E/xterm/./src/common/services/UnicodeService.ts","webpack://_N_E/xterm/webpack/bootstrap","webpack://_N_E/xterm/./src/browser/public/Terminal.ts","webpack://_N_E/<anon>"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityTreeRoot: HTMLElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n\n  private _renderRowsDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityTreeRoot = document.createElement('div');\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n    this._accessibilityTreeRoot.tabIndex = 0;\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\n\n    this._renderRowsDebouncer = new TimeBasedDebouncer(this._renderRows.bind(this));\n    this._refreshRows();\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\n\n    this.register(this._renderRowsDebouncer);\n    this.register(this._terminal.onResize(e => this._onResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._onChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._onChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._onTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._onKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor(window);\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n  }\n\n  public dispose(): void {\n    super.dispose();\n    removeElementFromParent(this._accessibilityTreeRoot);\n    this._rowElements.length = 0;\n  }\n\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _onResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n\n  private _onTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._onChar(' ');\n    }\n  }\n\n  private _onChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      removeElementFromParent(this._liveRegion);\n    }\n  }\n\n  private _onKey(keyChar: string): void {\n    this._clearLiveRegion();\n    this._charsToConsume.push(keyChar);\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.actualCellHeight) {\n      return;\n    }\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._onResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.actualCellHeight}px`;\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param ev The original paste event to be handled\n * @param term The terminal on which to apply the handled paste event\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n * @param selectionService The terminal's selection manager.\n * @param shouldSelectWord If true and there is no selection the current word will be selected\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorManager, IColorSet, IColorContrastCache } from 'browser/Types';\nimport { ITheme } from 'common/services/Services';\nimport { channels, color, css } from 'common/Color';\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { ColorIndex, IColor } from 'common/Types';\n\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n  private _ctx: CanvasRenderingContext2D;\n  private _litmusColor: CanvasGradient;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  constructor(document: Document, public allowTransparency: boolean) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get rendering context');\n    }\n    this._ctx = ctx;\n    this._ctx.globalCompositeOperation = 'copy';\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n    this._contrastCache = new ColorContrastCache();\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n  }\n\n  public onOptionsChange(key: string, value: any): void {\n    switch (key) {\n      case 'minimumContrastRatio':\n        this._contrastCache.clear();\n        break;\n      case 'allowTransparency':\n        this.allowTransparency = value;\n        break;\n    }\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme = {}): void {\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n    this.colors.selectionBackgroundTransparent = this._parseColor(theme.selectionBackground, DEFAULT_SELECTION, true);\n    this.colors.selectionBackgroundOpaque = color.blend(this.colors.background, this.colors.selectionBackgroundTransparent);\n    this.colors.selectionInactiveBackgroundTransparent = this._parseColor(theme.selectionInactiveBackground, this.colors.selectionBackgroundTransparent, true);\n    this.colors.selectionInactiveBackgroundOpaque = color.blend(this.colors.background, this.colors.selectionInactiveBackgroundTransparent);\n    const nullColor: IColor = {\n      css: '',\n      rgba: 0\n    };\n    this.colors.selectionForeground = theme.selectionForeground ? this._parseColor(theme.selectionForeground, nullColor) : undefined;\n    if (this.colors.selectionForeground === nullColor) {\n      this.colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(this.colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionBackgroundTransparent = color.opacity(this.colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(this.colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionInactiveBackgroundTransparent = color.opacity(this.colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    this.colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(this.colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        this.colors.ansi[i + 16] = this._parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this.colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this.colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this.colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this.colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this.colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this.colors.foreground,\n      background: this.colors.background,\n      cursor: this.colors.cursor,\n      ansi: this.colors.ansi.slice()\n    };\n  }\n\n  private _parseColor(\n    css: string | undefined,\n    fallback: IColor,\n    allowTransparency: boolean = this.allowTransparency\n  ): IColor {\n    if (css === undefined) {\n      return fallback;\n    }\n\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\n    // retain its previous value.\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    this._ctx.fillStyle = this._litmusColor;\n    this._ctx.fillStyle = css;\n    if (typeof this._ctx.fillStyle !== 'string') {\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\n      return fallback;\n    }\n\n    this._ctx.fillRect(0, 0, 1, 1);\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\n\n    // Check if the printed color was transparent\n    if (data[3] !== 0xFF) {\n      if (!allowTransparency) {\n        // Ideally we'd just ignore the alpha channel, but...\n        //\n        // Browsers may not give back exactly the same RGB values we put in, because most/all\n        // convert the color to a pre-multiplied representation. getImageData converts that back to\n        // a un-premultipled representation, but the precision loss may make the RGB channels unuable\n        // on their own.\n        //\n        // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\n        // into 0x00000000.\n        //\n        // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\n        // pixels that have just been set using putImageData() might be returned to an equivalent\n        // getImageData() as different values.\"\n        // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\n        //\n        // So let's just use the fallback color in this case instead.\n        console.warn(\n          `Color: ${css} is using transparency, but allowTransparency is false. ` +\n          `Using fallback ${fallback.css}.`\n        );\n        return fallback;\n      }\n\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // the color value has alpha less than 1.0, and the string is the color value in the CSS rgba()\n      const [r, g, b, a] = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(',').map(component => Number(component));\n      const alpha = Math.round(a * 255);\n      const rgba: number = channels.toRgba(r, g, b, alpha);\n      return {\n        rgba,\n        css\n      };\n    }\n\n    return {\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // if it has alpha equal to 1.0, then the string is a lowercase six-digit hex value, prefixed with a \"#\" character\n      css: this._ctx.fillStyle,\n      rgba: channels.toRgba(data[0], data[1], data[2], data[3])\n    };\n  }\n}\n","/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkProvider, IBufferCellPosition, ILink, ILinkifierEvent, ILinkDecorations, ILinkWithState } from 'browser/Types';\nimport { IDisposable } from 'common/Types';\nimport { IMouseService, IRenderService } from './services/Services';\nimport { IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, disposeArray } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this._lastMouseEvent = undefined;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._onMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _onMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._onHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _onHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Add listener for rerendering\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          this._clearCurrentLink(start, e.end + 1 + this._bufferService.buffer.ydisp);\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const sameLine = link.range.start.y === link.range.end.y;\n    const wrappedFromLeft = link.range.start.y < position.y;\n    const wrappedToRight = link.range.end.y > position.y;\n\n    // If the start and end have the same y, then the position must be between start and end x\n    // If not, then handle each case seperately, depending on which way it wraps\n    return ((sameLine && link.range.start.x <= position.x && link.range.end.x >= position.x) ||\n      (wrappedFromLeft && link.range.end.x >= position.x) ||\n      (wrappedToRight && link.range.start.x <= position.x) ||\n      (wrappedFromLeft && wrappedToRight)) &&\n      link.range.start.y <= position.y &&\n      link.range.end.y >= position.y;\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// This file contains strings that get exported in the API so they can be localized\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILink, ILinkProvider } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService, IOscLinkService } from 'common/services/Services';\n\nexport class OscLinkProvider implements ILinkProvider {\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IOscLinkService private readonly _oscLinkService: IOscLinkService\n  ) {\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const line = this._bufferService.buffer.lines.get(y - 1);\n    if (!line) {\n      callback(undefined);\n      return;\n    }\n\n    const result: ILink[] = [];\n    const linkHandler = this._optionsService.rawOptions.linkHandler;\n    const cell = new CellData();\n    const lineLength = line.getTrimmedLength();\n    let currentLinkId = -1;\n    let currentStart = -1;\n    let finishLink = false;\n    for (let x = 0; x < lineLength; x++) {\n      // Minor optimization, only check for content if there isn't a link in case the link ends with\n      // a null cell\n      if (currentStart === -1 && !line.hasContent(x)) {\n        continue;\n      }\n\n      line.loadCell(x, cell);\n      if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n        if (currentStart === -1) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n          continue;\n        } else {\n          finishLink = cell.extended.urlId !== currentLinkId;\n        }\n      } else {\n        if (currentStart !== -1) {\n          finishLink = true;\n        }\n      }\n\n      if (finishLink || (currentStart !== -1 && x === lineLength - 1)) {\n        const text = this._oscLinkService.getLinkData(currentLinkId)?.uri;\n        if (text) {\n          // These ranges are 1-based\n          const range: IBufferRange = {\n            start: {\n              x: currentStart + 1,\n              y\n            },\n            end: {\n              // Offset end x if it's a link that ends on the last cell in the line\n              x: x + (!finishLink && x === lineLength - 1 ? 1 : 0),\n              y\n            }\n          };\n          // OSC links always use underline and pointer decorations\n          result.push({\n            text,\n            range,\n            activate: (e, text) => (linkHandler ? linkHandler.activate(e, text, range) : defaultActivate(e, text)),\n            hover: (e, text) => linkHandler?.hover?.(e, text, range),\n            leave: (e, text) => linkHandler?.leave?.(e, text, range)\n          });\n        }\n        finishLink = false;\n\n        // Clear link or start a new link if one starts immediately\n        if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n        } else {\n          currentStart = -1;\n          currentLinkId = -1;\n        }\n      }\n    }\n\n    // TODO: Handle fetching and returning other link ranges to underline other links with the same id\n    callback(result);\n  }\n}\n\nfunction defaultActivate(e: MouseEvent, uri: string): void {\n  const answer = confirm(`Do you want to navigate to ${uri}?`);\n  if (answer) {\n    const newWindow = window.open();\n    if (newWindow) {\n      try {\n        newWindow.opener = null;\n      } catch {\n        // no-op, Electron can throw\n      }\n      newWindow.location.href = uri;\n    } else {\n      console.warn('Opening link blocked as opener could not be cleared');\n    }\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _parentWindow: Window,\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      this._parentWindow.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  constructor(private _parentWindow: Window) {\n    super();\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n  }\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearListener();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { ICompositionHelper, ITerminal, IBrowser, CustomKeyEventHandler, IViewport, ILinkifier2, CharacterJoinerHandler, IBufferRange } from 'browser/Types';\nimport { IRenderer } from 'browser/renderer/Types';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { Viewport } from 'browser/Viewport';\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, handlePasteEvent, copyHandler, paste } from 'browser/Clipboard';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport * as Browser from 'common/Platform';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { ITheme, IMarker, IDisposable, ILinkProvider, IDecorationOptions, IDecoration } from 'xterm';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { KeyboardResultType, CoreMouseEventType, CoreMouseButton, CoreMouseAction, ITerminalOptions, ScrollSource, IColorEvent, ColorIndex, ColorRequestType } from 'common/Types';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { ColorManager } from 'browser/ColorManager';\nimport { RenderService } from 'browser/services/RenderService';\nimport { ICharSizeService, IRenderService, IMouseService, ISelectionService, ICoreBrowserService, ICharacterJoinerService } from 'browser/services/Services';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { IBuffer } from 'common/buffer/Types';\nimport { MouseService } from 'browser/services/MouseService';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { color, rgba } from 'common/Color';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\nimport { OscLinkProvider } from 'browser/OscLinkProvider';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  // private _visualBellTimer: number;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _coreBrowserService: ICoreBrowserService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _accessibilityManager: AccessibilityManager | undefined;\n  private _colorManager: ColorManager | undefined;\n  private _theme: ITheme | undefined;\n\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onKey = new EventEmitter<{ key: string, domEvent: KeyboardEvent }>();\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._onKey.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onSelectionChange = new EventEmitter<void>();\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onBell = new EventEmitter<void>();\n  public get onBell(): IEvent<void> { return this._onBell.event; }\n\n  private _onFocus = new EventEmitter<void>();\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = new EventEmitter<void>();\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(OscLinkProvider));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this._onBell.fire()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._colorManager) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi' | undefined = undefined;\n      let ident = '';\n      switch (req.index) {\n        case ColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case ColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case ColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      switch (req.type) {\n        case ColorRequestType.REPORT:\n          const channels = color.toColorRGB(acc === 'ansi'\n            ? this._colorManager.colors.ansi[req.index]\n            : this._colorManager.colors[acc]);\n          this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n          break;\n        case ColorRequestType.SET:\n          if (acc === 'ansi') this._colorManager.colors.ansi[req.index] = rgba.toColor(...req.color);\n          else this._colorManager.colors[acc] = rgba.toColor(...req.color);\n          break;\n        case ColorRequestType.RESTORE:\n          this._colorManager.restoreColor(req.index);\n          break;\n      }\n    }\n    this._renderService?.setColors(this._colorManager.colors);\n    this.viewport?.onThemeChange(this._colorManager.colors);\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._renderService?.dispose();\n    this._customKeyEventHandler = undefined;\n    this.write = () => { };\n    this.element?.parentNode?.removeChild(this.element);\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  protected _updateOptions(key: string): void {\n    super._updateOptions(key);\n\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'fontFamily':\n      case 'fontSize':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        this._renderService?.clear();\n        this._charSizeService?.measure();\n        break;\n      case 'cursorBlink':\n      case 'cursorStyle':\n        // The DOM renderer needs a row refresh to update the cursor styles\n        this.refresh(this.buffer.y, this.buffer.y);\n        break;\n      case 'customGlyphs':\n      case 'drawBoldTextInBrightColors':\n      case 'letterSpacing':\n      case 'lineHeight':\n      case 'fontWeight':\n      case 'fontWeightBold':\n      case 'minimumContrastRatio':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        if (this._renderService) {\n          this._renderService.clear();\n          this._renderService.onResize(this.cols, this.rows);\n          this.refresh(0, this.rows - 1);\n        }\n        break;\n      case 'scrollback':\n        this.viewport?.syncScrollArea();\n        break;\n      case 'screenReaderMode':\n        if (this.optionsService.rawOptions.screenReaderMode) {\n          if (!this._accessibilityManager && this._renderService) {\n            this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n          }\n        } else {\n          this._accessibilityManager?.dispose();\n          this._accessibilityManager = undefined;\n        }\n        break;\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\n      case 'theme':\n        this._setTheme(this.optionsService.rawOptions.theme);\n        break;\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _onTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _onTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.actualCellHeight;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.actualCellWidth * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.actualCellHeight;\n    const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.setAttribute('tabindex', '0');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    this.textarea.setAttribute('aria-multiline', 'false');\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._onTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._onTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n    this._coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea, this._document.defaultView ?? window);\n    this._instantiationService.setService(ICoreBrowserService, this._coreBrowserService);\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._theme = this.options.theme || this._theme;\n    this._colorManager = new ColorManager(document, this.options.allowTransparency);\n    this.register(this.optionsService.onOptionChange(e => this._colorManager!.onOptionsChange(e, this.optionsService.rawOptions[e])));\n    this._colorManager.setTheme(this._theme);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    const renderer = this._createRenderer();\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, renderer, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport,\n      (amount: number) => this.scrollLines(amount, true, ScrollSource.VIEWPORT),\n      this._viewportElement,\n      this._viewportScrollArea,\n      this.element\n    );\n    this.viewport.onThemeChange(this._colorManager.colors);\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.onCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.onResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.onBlur()));\n    this.register(this.onFocus(() => this._renderService!.onFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.onSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.onMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n    }\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n    }\n    this.optionsService.onOptionChange(() => {\n      if (!this._overviewRulerRenderer && this.options.overviewRulerWidth && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    return this._instantiationService.createInstance(DomRenderer, this._colorManager!.colors, this.element!, this.screenElement!, this._viewportElement!, this.linkifier2);\n  }\n\n  /**\n   * Sets the theme on the renderer. The renderer must have been initialized.\n   * @param theme The theme to set.\n   */\n  private _setTheme(theme: ITheme): void {\n    this._theme = theme;\n    this._colorManager?.setTheme(theme);\n    this._renderService?.setColors(this._colorManager!.colors);\n    this.viewport?.onThemeChange(this._colorManager!.colors);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getMouseReportCoords(ev, self.screenElement!);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.col,\n        row: pos.row,\n        x: pos.x,\n        y: pos.y,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.onWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.onTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.onTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    super.scrollLines(disp, suppressScrollEvent, source);\n    this.refresh(0, this.rows - 1);\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): IBufferRange | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      start: {\n        x: this._selectionService.selectionStart![0],\n        y: this._selectionService.selectionStart![1]\n      },\n      end: {\n        x: this._selectionService.selectionEnd![0],\n        y: this._selectionService.selectionEnd![1]\n      }\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown event\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keydown event to be handled.\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.buffer.ybase !== this.buffer.ydisp) {\n        this._bufferService.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, this could cause issues if the event\n    // is handled at a higher level, this is a compromise in order to echo keys to the screen\n    // reader.\n    if (!this.optionsService.rawOptions.screenReaderMode) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this.refresh(0, this.rows - 1);\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n    this.viewport?.syncScrollArea();\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.canvasWidth.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.canvasHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.actualCellWidth.toFixed(0);\n        const cellHeight = this._renderService.dimensions.actualCellHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IViewport } from 'browser/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\ninterface ISmoothScrollState {\n  startTime: number;\n  origin: number;\n  target: number;\n}\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentScaledCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n  private _smoothScrollState: ISmoothScrollState = {\n    startTime: 0,\n    origin: -1,\n    target: -1\n  };\n\n  constructor(\n    private readonly _scrollLines: (amount: number) => void,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    private readonly _element: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._onScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  public onThemeChange(colors: IColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / this._coreBrowserService.dpr;\n      this._currentScaledCellHeight = this._renderService.dimensions.scaledCellHeight;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.canvasHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.scaledCellHeight !== this._currentScaledCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _onScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._scrollLines(0);\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._scrollLines(diff);\n  }\n\n  private _smoothScroll(): void {\n    // Check valid state\n    if (this._isDisposed || this._smoothScrollState.origin === -1 || this._smoothScrollState.target === -1) {\n      return;\n    }\n\n    // Calculate position complete\n    const percent = this._smoothScrollPercent();\n    this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(percent * (this._smoothScrollState.target - this._smoothScrollState.origin));\n\n    // Continue or finish smooth scroll\n    if (percent < 1) {\n      this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll());\n    } else {\n      this._clearSmoothScrollState();\n    }\n  }\n\n  private _smoothScrollPercent(): number {\n    if (!this._optionsService.rawOptions.smoothScrollDuration || !this._smoothScrollState.startTime) {\n      return 1;\n    }\n    return Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0);\n  }\n\n  private _clearSmoothScrollState(): void {\n    this._smoothScrollState.startTime = 0;\n    this._smoothScrollState.origin = -1;\n    this._smoothScrollState.target = -1;\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._viewportElement.scrollTop += amount;\n    } else {\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        if (this._smoothScrollState.target === -1) {\n          this._smoothScrollState.target = this._viewportElement.scrollTop + amount;\n        } else {\n          this._smoothScrollState.target += amount;\n        }\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n    return this._bubbleScroll(ev, amount);\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public onTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public onTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n  }\n\n  public override dispose(): void {\n    this._container.remove();\n    this._decorationElements.clear();\n    super.dispose();\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this.refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  public refreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.actualCellWidth)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.actualCellHeight}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        decoration.onDispose(() => this._removeDecoration(decoration));\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n      }\n      element.style.top = `${line * this._renderService.dimensions.actualCellHeight}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowseService: ICoreBrowserService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onOptionChange(o => {\n      if (o === 'overviewRulerWidth') {\n        this._queueRefresh(true);\n      }\n    }));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(this._coreBrowseService.window, 'resize', () => {\n      this._queueRefresh(true);\n    }));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  public override dispose(): void {\n    this._canvas?.remove();\n    super.dispose();\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * this._coreBrowseService.dpr);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * this._coreBrowseService.dpr);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    // TODO: Is _decorationElements needed?\n\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\nimport { C0 } from 'common/data/EscapeSequences';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n\n        const diff = newValue.replace(oldValue, '');\n\n        this._dataAlreadySent = diff;\n\n        if (newValue.length > oldValue.length) {\n          this._coreService.triggerDataEvent(diff, true);\n        } else if (newValue.length < oldValue.length) {\n          this._coreService.triggerDataEvent(`${C0.DEL}`, true);\n        } else if ((newValue.length === oldValue.length) && (newValue !== oldValue)) {\n          this._coreService.triggerDataEvent(newValue, true);\n        }\n\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.actualCellHeight;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.actualCellHeight;\n      const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, actualCellWidth: number, actualCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? actualCellWidth / 2 : 0)) / actualCellWidth);\n  coords[1] = Math.ceil(coords[1] / actualCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(bufferService, startY), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(bufferService: IBufferService, currentRow: number): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param string The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BOLD_CLASS, ITALIC_CLASS, CURSOR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_BLINK_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifierEvent, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService, ICoreBrowserService } from 'browser/services/Services';\nimport { IOptionsService, IBufferService, IInstantiationService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { color } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n\n  public dimensions: IRenderDimensions;\n\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return new EventEmitter<IRequestRedrawEvent>().event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._updateDimensions();\n    this._injectCss();\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document, this._colors);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._onLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._onLinkLeave(e)));\n  }\n\n  public dispose(): void {\n    this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n    // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n    // https://github.com/xtermjs/xterm.js/issues/2960\n    removeElementFromParent(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);\n\n    super.dispose();\n  }\n\n  private _updateDimensions(): void {\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.scaledCharWidth = this._charSizeService.width * dpr;\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.scaledCharLeft = 0;\n    this.dimensions.scaledCharTop = 0;\n    this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols;\n    this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows;\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / dpr);\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / dpr);\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.canvasWidth}px`;\n      element.style.height = `${this.dimensions.actualCellHeight}px`;\n      element.style.lineHeight = `${this.dimensions.actualCellHeight}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      ` width: ${this.dimensions.actualCellWidth}px` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    this._injectCss();\n  }\n\n  private _injectCss(): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${this._colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${this._colors.cursor.css};` +\n      `  color: ${this._colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: ${this._colors.cursorAccent.css};` +\n      `  color: ${this._colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` outline: 1px solid ${this._colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}:not(.${CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${this._colors.cursor.css};` +\n      ` color: ${this._colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector}.focus .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${this._colors.selectionBackgroundOpaque.css};` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${this._colors.selectionInactiveBackgroundOpaque.css};` +\n      `}`;\n    // Colors\n    this._colors.ansi.forEach((c, i) => {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    });\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(this._colors.background).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  public onDevicePixelRatioChange(): void {\n    this._updateDimensions();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public onCharSizeChanged(): void {\n    this._updateDimensions();\n  }\n\n  public onBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public onFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    while (this._selectionContainer.children.length) {\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n    }\n\n    this._rowFactory.onSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.actualCellHeight}px`;\n    element.style.top = `${row * this.dimensions.actualCellHeight}px`;\n    element.style.left = `${colStart * this.dimensions.actualCellWidth}px`;\n    element.style.width = `${this.dimensions.actualCellWidth * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public onCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  public onOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    this._injectCss();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      e.innerText = '';\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const cursorAbsoluteY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n\n    for (let y = start; y <= end; y++) {\n      const rowElement = this._rowElements[y];\n      rowElement.innerText = '';\n      const row = y + this._bufferService.buffer.ydisp;\n      const lineData = this._bufferService.buffer.lines.get(row);\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      rowElement.appendChild(this._rowFactory.createRow(lineData!, row, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.actualCellWidth, this._bufferService.cols));\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    while (x !== x2 || y !== y2) {\n      const row = this._rowElements[y];\n      if (!row) {\n        return;\n      }\n      const span = row.children[x] as HTMLElement;\n      if (span) {\n        span.style.textDecoration = enabled ? 'underline' : 'none';\n      }\n      if (++x >= cols) {\n        x = 0;\n        y++;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/Constants';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { IColorSet } from 'browser/Types';\nimport { ICharacterJoinerService, ICoreBrowserService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/RendererUtils';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\nexport const BOLD_CLASS = 'xterm-bold';\nexport const DIM_CLASS = 'xterm-dim';\nexport const ITALIC_CLASS = 'xterm-italic';\nexport const UNDERLINE_CLASS = 'xterm-underline';\nexport const STRIKETHROUGH_CLASS = 'xterm-strikethrough';\nexport const CURSOR_CLASS = 'xterm-cursor';\nexport const CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  constructor(\n    private readonly _document: Document,\n    private _colors: IColorSet,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService\n  ) {\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(lineData: IBufferLine, row: number, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cursorBlink: boolean, cellWidth: number, cols: number): DocumentFragment {\n    const fragment = this._document.createDocumentFragment();\n\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    // Find the line length first, this prevents the need to output a bunch of\n    // empty cells at the end. This cannot easily be integrated into the main\n    // loop below because of the colCount feature (which can be removed after we\n    // properly support reflow and disallow data to go beyond the right-side of\n    // the viewport).\n    let lineLength = 0;\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n      if (lineData.loadCell(x, this._workCell).getCode() !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n        lineLength = x + 1;\n        break;\n      }\n    }\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const charElement = this._document.createElement('span');\n      if (width > 1) {\n        charElement.style.width = `${cellWidth * width}px`;\n      }\n\n      if (isJoined) {\n        // Ligatures in the DOM renderer must use display inline, as they may not show with\n        // inline-block if they are outside the bounds of the element\n        charElement.style.display = 'inline';\n\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorRow && x === cursorX) {\n        charElement.classList.add(CURSOR_CLASS);\n\n        if (cursorBlink) {\n          charElement.classList.add(CURSOR_BLINK_CLASS);\n        }\n\n        switch (cursorStyle) {\n          case 'bar':\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\n            break;\n          case 'underline':\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\n            break;\n          default:\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\n            break;\n        }\n      }\n\n      if (cell.isBold()) {\n        charElement.classList.add(BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        charElement.classList.add(ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        charElement.classList.add(DIM_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        charElement.textContent = WHITESPACE_CELL_CHAR;\n      } else {\n        charElement.textContent = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isUnderline()) {\n        charElement.classList.add(`${UNDERLINE_CLASS}-${cell.extended.underlineStyle}`);\n        if (charElement.textContent === ' ') {\n          charElement.innerHTML = '&nbsp;';\n        }\n        if (!cell.isUnderlineColorDefault()) {\n          if (cell.isUnderlineColorRGB()) {\n            charElement.style.textDecorationColor = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n          } else {\n            let fg = cell.getUnderlineColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            charElement.style.textDecorationColor = this._colors.ansi[fg].css;\n          }\n        }\n      }\n\n      if (cell.isStrikethrough()) {\n        charElement.classList.add(STRIKETHROUGH_CLASS);\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      // Apply selection foreground if applicable\n      const isInSelection = this._isCellInSelection(x, row);\n      if (!isTop) {\n        if (this._colors.selectionForeground && isInSelection) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = this._colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = this._colors.selectionForeground;\n        }\n      }\n\n      // If in the selection, force the element to be above the selection to improve contrast and\n      // support opaque selections\n      if (isInSelection) {\n        bgOverride = this._coreBrowserService.isFocused ? this._colors.selectionBackgroundOpaque : this._colors.selectionInactiveBackgroundOpaque;\n        isTop = true;\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        charElement.classList.add(`xterm-decoration-top`);\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = this._colors.ansi[bg];\n          charElement.classList.add(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = this._colors.foreground;\n            charElement.classList.add(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = this._colors.background;\n          }\n      }\n\n      // If there is no background override by now it's the original color, so apply dim if needed\n      if (!bgOverride) {\n        if (cell.isDim()) {\n          bgOverride = color.multiplyOpacity(resolvedBg, 0.5);\n        }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.ansi[fg], cell, bgOverride, undefined)) {\n            charElement.classList.add(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              charElement.classList.add(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      fragment.appendChild(charElement);\n\n      x = lastCharX;\n    }\n    return fragment;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = this._colors.contrastCache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, this._optionsService.rawOptions.minimumContrastRatio);\n      this._colors.contrastCache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @return Whether a refresh is necessary.\n   */\n  public onTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\n\nexport class CharSizeService implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private _onCharSizeChange = new EventEmitter<void>();\n  public get onCharSizeChange(): IEvent<void> { return this._onCharSizeChange.event; }\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = this._measureElement.getBoundingClientRect();\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement,\n    public readonly window: Window & typeof globalThis\n  ) {\n  }\n\n  public get dpr(): number {\n    return this.window.devicePixelRatio;\n  }\n\n  public get isFocused(): boolean {\n    const docOrShadowRoot = this._textarea.getRootNode ? this._textarea.getRootNode() as Document | ShadowRoot : this._textarea.ownerDocument;\n    return docOrShadowRoot.activeElement === this._textarea && this._textarea.ownerDocument.hasFocus();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getCoordsRelativeToElement } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.actualCellWidth,\n      this._renderService.dimensions.actualCellHeight,\n      isSelection\n    );\n  }\n\n  public getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined {\n    const coords = getCoordsRelativeToElement(window, event, element);\n\n    // due to rounding issues in zoom states pixel values might be negative or overflow actual canvas\n    // ignore those events effectively narrowing mouse area a tiny bit at the edges\n    if (!this._charSizeService.hasValidSize\n      || coords[0] < 0\n      || coords[1] < 0\n      || coords[0] >= this._renderService.dimensions.canvasWidth\n      || coords[1] >= this._renderService.dimensions.canvasHeight) {\n      return undefined;\n    }\n\n    return {\n      col: Math.floor(coords[0] / this._renderService.dimensions.actualCellWidth),\n      row: Math.floor(coords[1] / this._renderService.dimensions.actualCellHeight),\n      x: Math.floor(coords[0]),\n      y: Math.floor(coords[1])\n    };\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions } from 'browser/renderer/Types';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharSizeService, ICoreBrowserService, IRenderService } from 'browser/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private _onDimensionsChange = new EventEmitter<IRenderDimensions>();\n  public get onDimensionsChange(): IEvent<IRenderDimensions> { return this._onDimensionsChange.event; }\n  private _onRenderedViewportChange = new EventEmitter<{ start: number, end: number }>();\n  public get onRenderedViewportChange(): IEvent<{ start: number, end: number }> { return this._onRenderedViewportChange.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onRefreshRequest = new EventEmitter<{ start: number, end: number }>();\n  public get onRefreshRequest(): IEvent<{ start: number, end: number }> { return this._onRefreshRequest.event; }\n\n  public get dimensions(): IRenderDimensions { return this._renderer.dimensions; }\n\n  constructor(\n    private _renderer: IRenderer,\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService,\n    @ICoreBrowserService coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    this.register({ dispose: () => this._renderer.dispose() });\n\n    this._renderDebouncer = new RenderDebouncer(coreBrowserService.window, (start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor(coreBrowserService.window);\n    this._screenDprMonitor.setListener(() => this.onDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.onCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // No need to register this as renderer is explicitly disposed in RenderService.dispose\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(coreBrowserService.window, 'resize', () => this.onDevicePixelRatioChange()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in coreBrowserService.window) {\n      const observer = new coreBrowserService.window.IntersectionObserver(e => this._onIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _onIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    this._renderer.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.onSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    this._renderer.onOptionsChanged();\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.dimensions);\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    // TODO: RenderService should be the only one to dispose the renderer\n    this._renderer.dispose();\n    this._renderer = renderer;\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._renderer.setColors(colors);\n    this._fullRefresh();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    this._renderer.onDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._renderer.onResize(cols, rows);\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public onCharSizeChanged(): void {\n    this._renderer.onCharSizeChanged();\n  }\n\n  public onBlur(): void {\n    this._renderer.onBlur();\n  }\n\n  public onFocus(): void {\n    this._renderer.onFocus();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.onSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public onCursorMove(): void {\n    this._renderer.onCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.clear();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport * as Browser from 'common/Platform';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { CellData } from 'common/buffer/CellData';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IMouseService, ISelectionService, IRenderService, ICoreBrowserService } from 'browser/services/Services';\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { Disposable } from 'common/Lifecycle';\nimport { getRangeLength } from 'common/buffer/BufferRange';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public get onLinuxMouseSelection(): IEvent<string> { return this._onLinuxMouseSelection.event; }\n  private _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public get onRequestRedraw(): IEvent<ISelectionRedrawRequestEvent> { return this._onRedrawRequest.event; }\n  private _onSelectionChange = this.register(new EventEmitter<void>());\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public get onRequestScrollLines(): IEvent<ISelectionRequestScrollLinesEvent> { return this._onRequestScrollLines.event; }\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._onMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._onMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._onTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._onBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n  }\n\n  public dispose(): void {\n    this._removeMouseDownListeners();\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _onTrim(amount: number): void {\n    const needsRefresh = this._model.onTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(this._coreBrowserService.window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.canvasHeight;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public onMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._onIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._onSingleClick(event);\n      } else if (event.detail === 2) {\n        this._onDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._onTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _onIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _onSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _onDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _onTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _onMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._onTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column to the character index on the buffer line, the\n   * latter takes into account wide characters.\n   * @param coords The coordinates to find the 2 index for.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, coords: [number, number]): number {\n    let charIndex = coords[0];\n    for (let i = 0; coords[0] >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && coords[0] !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param char The character to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/Types';\nimport { IColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDisposable } from 'common/Types';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n  /**\n   * Parent window that the terminal is rendered into. DOM and rendering APIs\n   * (e.g. requestAnimationFrame) should be invoked in the context of this\n   * window.\n   */\n  readonly window: Window & typeof globalThis;\n  /**\n   * Helper for getting the devicePixelRatio of the parent window.\n   */\n  readonly dpr: number;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  setRenderer(renderer: IRenderer): void;\n  setColors(colors: IColorSet): void;\n  onDevicePixelRatioChange(): void;\n  onResize(cols: number, rows: number): void;\n  // TODO: Is this useful when we have onResize?\n  onCharSizeChanged(): void;\n  onBlur(): void;\n  onFocus(): void;\n  onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  onCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  onMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public onDeleteEmitter = new EventEmitter<IDeleteEvent>();\n  public get onDelete(): IEvent<IDeleteEvent> { return this.onDeleteEmitter.event; }\n  public onInsertEmitter = new EventEmitter<IInsertEvent>();\n  public get onInsert(): IEvent<IInsertEvent> { return this.onInsertEmitter.event; }\n  public onTrimEmitter = new EventEmitter<number>();\n  public get onTrim(): IEvent<number> { return this.onTrimEmitter.event; }\n\n  constructor(\n    private _maxLength: number\n  ) {\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    const a = color.rgba & 0xFF;\n    return opacity(color, (a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, IDirtyRowService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { DirtyRowService } from 'common/services/DirtyRowService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _dirtyRowService: IDirtyRowService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private _onBinary = new EventEmitter<string>();\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n  private _onData = new EventEmitter<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  protected _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  protected _onScroll = new EventEmitter<IScrollEvent, void>();\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  protected _onWriteParsed = new EventEmitter<void>();\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = new EventEmitter<number, void>();\n      this.register(this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      }));\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = new OptionsService(options);\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this._instantiationService.createInstance(LogService);\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService, () => this.scrollToBottom()));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this._instantiationService.createInstance(CoreMouseService);\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this._dirtyRowService = this._instantiationService.createInstance(DirtyRowService);\n    this._instantiationService.setService(IDirtyRowService, this._dirtyRowService);\n    this.unicodeService = this._instantiationService.createInstance(UnicodeService);\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = new InputHandler(this._bufferService, this._charsetService, this.coreService, this._dirtyRowService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService);\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.optionsService.onOptionChange(key => this._updateOptions(key)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._windowsMode?.dispose();\n    this._windowsMode = undefined;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  protected _updateOptions(key: string): void {\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'scrollback':\n        this.buffers.resize(this.cols, this.rows);\n        break;\n      case 'windowsMode':\n        if (this.optionsService.rawOptions.windowsMode) {\n          this._enableWindowsMode();\n        } else {\n          this._windowsMode?.dispose();\n          this._windowsMode = undefined;\n        }\n        break;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via xterm-addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _currentLinkId?: number;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private _onRequestBell = new EventEmitter<void>();\n  public get onRequestBell(): IEvent<void> { return this._onRequestBell.event; }\n  private _onRequestRefreshRows = new EventEmitter<number, number>();\n  public get onRequestRefreshRows(): IEvent<number, number> { return this._onRequestRefreshRows.event; }\n  private _onRequestReset = new EventEmitter<void>();\n  public get onRequestReset(): IEvent<void> { return this._onRequestReset.event; }\n  private _onRequestSendFocus = new EventEmitter<void>();\n  public get onRequestSendFocus(): IEvent<void> { return this._onRequestSendFocus.event; }\n  private _onRequestSyncScrollBar = new EventEmitter<void>();\n  public get onRequestSyncScrollBar(): IEvent<void> { return this._onRequestSyncScrollBar.event; }\n  private _onRequestWindowsOptionsReport = new EventEmitter<WindowsOptionsReportType>();\n  public get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType> { return this._onRequestWindowsOptionsReport.event; }\n\n  private _onA11yChar = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yChar.event; }\n  private _onA11yTab = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTab.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onColor = new EventEmitter<IColorEvent>();\n  public get onColor(): IEvent<IColorEvent> { return this._onColor.event; }\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _dirtyRowService: IDirtyRowService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowService.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._currentLinkId !== undefined) {\n        this._oscLinkService.addLineToLink(this._currentLinkId, this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y row index\n   * @param start first cell index to be erased\n   * @param end   end - 1 is last erased cell\n   * @param cleanWrap clear the isWrapped flag\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData(),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n    this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowService.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowService.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_SET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_RESET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._curAttrData.fg = DEFAULT_ATTR_DATA.fg;\n      this._curAttrData.bg = DEFAULT_ATTR_DATA.bg;\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        attr.fg = DEFAULT_ATTR_DATA.fg;\n        attr.bg = DEFAULT_ATTR_DATA.bg;\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character. Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover feedback.\n   * Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._currentLinkId !== undefined) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._currentLinkId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.extended.urlId = this._currentLinkId;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    this._currentLinkId = undefined;\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowService.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n   * `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// Work variables to avoid garbage collection.\nlet i = 0;\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    i = this._search(this._getKey(value), 0, this._array.length - 1);\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    if (key === undefined) {\n      return false;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i === -1) {\n      return false;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public forEachByKey(key: number, callback: (value: T) => void): void {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      callback(this._array[i]);\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    return this._array.values();\n  }\n\n  private _search(key: number, min: number, max: number): number {\n    if (max < min) {\n      return min;\n    }\n    let mid = Math.floor((min + max) / 2);\n    const midKey = this._getKey(this._array[mid]);\n    if (midKey > key) {\n      return this._search(key, min, mid - 1);\n    }\n    if (midKey < key) {\n      return this._search(key, mid + 1, max);\n    }\n    // Value found! Since keys can be duplicates, move the result index back to the lowest index\n    // that matches the key.\n    while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n      mid--;\n    }\n    return mid;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  // TODO: Type me\n  public tabs: any;\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param startCol column offset the string was retrieved from\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor(\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n/** Work variables to avoid garbage collection. */\nconst w: { startIndex: number } = {\n  startIndex: 0\n};\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   * */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    w.startIndex = index * CELL_SIZE;\n    cell.content = this._data[w.startIndex + Cell.CONTENT];\n    cell.fg = this._data[w.startIndex + Cell.FG];\n    cell.bg = this._data[w.startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  public resize(cols: number, fillCellData: ICellData): void {\n    if (cols === this.length) {\n      return;\n    }\n    if (cols > this.length) {\n      const data = new Uint32Array(cols * CELL_SIZE);\n      if (this.length) {\n        if (cols * CELL_SIZE < this._data.length) {\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\n        } else {\n          data.set(this._data);\n        }\n      }\n      this._data = data;\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      if (cols) {\n        const data = new Uint32Array(cols * CELL_SIZE);\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\n        this._data = data;\n        // Remove any cut off combined data, FIXME: repeat this for extended attrs\n        const keys = Object.keys(this._combined);\n        for (let i = 0; i < keys.length; i++) {\n          const key = parseInt(keys[i], 10);\n          if (key >= cols) {\n            delete this._combined[key];\n          }\n        }\n      } else {\n        this._data = new Uint32Array(0);\n        this._combined = {};\n      }\n    }\n    this.length = cols;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param newCols The columns after resize.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public get onBufferActivate(): IEvent<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}> { return this._onBufferActivate.event; }\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param _terminal - The terminal the BufferSet will belong to\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IMarker } from 'common/Types';\n\nexport class Marker extends Disposable implements IMarker {\n  private static _nextId = 1;\n\n  private _id: number = Marker._nextId++;\n  public isDisposed: boolean = false;\n\n  public get id(): number { return this._id; }\n\n  private _onDispose = new EventEmitter<void>();\n  public get onDispose(): IEvent<void> { return this._onDispose.event; }\n\n  constructor(\n    public line: number\n  ) {\n    super();\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\nimport { fill } from 'common/TypedArrayUtils';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      fill(table, 1);\n      table[0] = 0;\n      // control chars\n      fill(table, 0, 1, 32);\n      fill(table, 0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      fill(table, 2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      fill(table, 2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      fill(table, 2, 0xac00, 0xd7a4);\n      fill(table, 2, 0xf900, 0xfb00);\n      fill(table, 2, 0xfe10, 0xfe1a);\n      fill(table, 2, 0xfe30, 0xfe70);\n      fill(table, 2, 0xff00, 0xff61);\n      fill(table, 2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        fill(table, 0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n","\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\n// queueMicrotask polyfill for nodejs < v11\nconst qmt: (cb: () => void) => void = (typeof queueMicrotask === 'undefined')\n  ? (cb: () => void) => { Promise.resolve().then(cb); }\n  : queueMicrotask;\n\n\nexport class WriteBuffer {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  private _onWriteParsed = new EventEmitter<void>();\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) { }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          qmt(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n* Internal actions of EscapeSequenceParser.\n*/\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    fill(this.table, action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected _oscParser: IOscParser;\n  protected _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser = new OscParser();\n    this._dcsParser = new DcsParser();\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public dispose(): void {\n    this._csiHandlers = Object.create(null);\n    this._executeHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser.dispose();\n    this._dcsParser.dispose();\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n  private _onBufferChange = new EventEmitter<IBufferApi>();\n  public get onBufferChange(): IEvent<IBufferApi> { return this._onBufferChange.event; }\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = new BufferSet(optionsService, this);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.buffers.dispose();\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    this.buffers.setupTabStops(this.cols);\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _onProtocolChange = new EventEmitter<CoreMouseEventType>();\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  public get onProtocolChange(): IEvent<CoreMouseEventType> {\n    return this._onProtocolChange.event;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  // Circular dependency, this must be unset or memory will leak after Terminal.dispose\n  private _scrollToBottom: (() => void) | undefined;\n\n  private _onData = this.register(new EventEmitter<string>());\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onUserInput = this.register(new EventEmitter<void>());\n  public get onUserInput(): IEvent<void> { return this._onUserInput.event; }\n  private _onBinary = this.register(new EventEmitter<string>());\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n\n  constructor(\n    // TODO: Move this into a service\n    scrollToBottom: () => void,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._scrollToBottom = scrollToBottom;\n    this.register({ dispose: () => this._scrollToBottom = undefined });\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (buffer.ybase !== buffer.ydisp) {\n      this._scrollToBottom!();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecorationOptions, IDecoration, IMarker, IEvent } from 'xterm';\n\n/** Work variables to avoid garbage collection. */\nconst w = {\n  xmin: 0,\n  xmax: 0\n};\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e?.marker.line);\n\n  private _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRegistered(): IEvent<IInternalDecoration> { return this._onDecorationRegistered.event; }\n  private _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRemoved(): IEvent<IInternalDecoration> { return this._onDecorationRemoved.event; }\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void {\n    this._decorations.forEachByKey(line, d => {\n      w.xmin = d.options.x ?? 0;\n      w.xmax = w.xmin + (d.options.width ?? 1);\n      if (x >= w.xmin && x < w.xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        callback(d);\n      }\n    });\n  }\n\n  public dispose(): void {\n    for (const d of this._decorations.values()) {\n      this._onDecorationRemoved.fire(d);\n    }\n    this.reset();\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public isDisposed: boolean = false;\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IDirtyRowService } from 'common/services/Services';\n\nexport class DirtyRowService implements IDirtyRowService {\n  public serviceBrand: any;\n\n  private _start!: number;\n  private _end!: number;\n\n  public get start(): number { return this._start; }\n  public get end(): number { return this._end; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this._start = this._bufferService.buffer.y;\n    this._end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this._start) {\n      this._start = y;\n    } else if (y > this._end) {\n      this._end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      const temp = y1;\n      y1 = y2;\n      y2 = temp;\n    }\n    if (y1 < this._start) {\n      this._start = y1;\n    }\n    if (y2 > this._end) {\n      this._end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    this._entries.forEach((value, key) => callback(key, value));\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._updateLogLevel();\n    this._optionsService.onOptionChange(key => {\n      if (key === 'logLevel') {\n        this._updateLogLevel();\n      }\n    });\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle } from 'common/Types';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private _onOptionChange = new EventEmitter<string>();\n  public get onOptionChange(): IEvent<string> { return this._onOptionChange.event; }\n\n  constructor(options: Partial<ITerminalOptions>) {\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n  readonly options: Required<ITerminalOptions>;\n\n  readonly onOptionChange: IEvent<string>;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n  private _onChange = new EventEmitter<string>();\n  public get onChange(): IEvent<string> { return this._onChange.event; }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal as ITerminalApi, IMarker, IDisposable, ILocalizableStrings, ITerminalAddon, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, IModes, IDecorationOptions, IDecoration } from 'xterm';\nimport { IBufferRange, ITerminal } from 'browser/Types';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { IEvent } from 'common/EventEmitter';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._checkProposedApi();\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker | undefined {\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): IBufferRange | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    return this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[470],{\n\n/***/ 8425:\n/***/ (function(module) {\n\n!function(e,t){if(true)module.exports=t();else { var s, i; }}(self,(function(){return(()=>{\"use strict\";var e={4567:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.AccessibilityManager=void 0;const s=i(9042),r=i(6114),n=i(9924),o=i(3656),a=i(844),h=i(5596),c=i(9631);class l extends a.Disposable{constructor(e,t){super(),this._terminal=e,this._renderService=t,this._liveRegionLineCount=0,this._charsToConsume=[],this._charsToAnnounce=\"\",this._accessibilityTreeRoot=document.createElement(\"div\"),this._accessibilityTreeRoot.classList.add(\"xterm-accessibility\"),this._accessibilityTreeRoot.tabIndex=0,this._rowContainer=document.createElement(\"div\"),this._rowContainer.setAttribute(\"role\",\"list\"),this._rowContainer.classList.add(\"xterm-accessibility-tree\"),this._rowElements=[];for(let e=0;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);if(this._topBoundaryFocusListener=e=>this._onBoundaryFocus(e,0),this._bottomBoundaryFocusListener=e=>this._onBoundaryFocus(e,1),this._rowElements[0].addEventListener(\"focus\",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener(\"focus\",this._bottomBoundaryFocusListener),this._refreshRowsDimensions(),this._accessibilityTreeRoot.appendChild(this._rowContainer),this._renderRowsDebouncer=new n.TimeBasedDebouncer(this._renderRows.bind(this)),this._refreshRows(),this._liveRegion=document.createElement(\"div\"),this._liveRegion.classList.add(\"live-region\"),this._liveRegion.setAttribute(\"aria-live\",\"assertive\"),this._accessibilityTreeRoot.appendChild(this._liveRegion),!this._terminal.element)throw new Error(\"Cannot enable accessibility before Terminal.open\");this._terminal.element.insertAdjacentElement(\"afterbegin\",this._accessibilityTreeRoot),this.register(this._renderRowsDebouncer),this.register(this._terminal.onResize((e=>this._onResize(e.rows)))),this.register(this._terminal.onRender((e=>this._refreshRows(e.start,e.end)))),this.register(this._terminal.onScroll((()=>this._refreshRows()))),this.register(this._terminal.onA11yChar((e=>this._onChar(e)))),this.register(this._terminal.onLineFeed((()=>this._onChar(\"\\n\")))),this.register(this._terminal.onA11yTab((e=>this._onTab(e)))),this.register(this._terminal.onKey((e=>this._onKey(e.key)))),this.register(this._terminal.onBlur((()=>this._clearLiveRegion()))),this.register(this._renderService.onDimensionsChange((()=>this._refreshRowsDimensions()))),this._screenDprMonitor=new h.ScreenDprMonitor(window),this.register(this._screenDprMonitor),this._screenDprMonitor.setListener((()=>this._refreshRowsDimensions())),this.register((0,o.addDisposableDomListener)(window,\"resize\",(()=>this._refreshRowsDimensions())))}dispose(){super.dispose(),(0,c.removeElementFromParent)(this._accessibilityTreeRoot),this._rowElements.length=0}_onBoundaryFocus(e,t){const i=e.target,s=this._rowElements[0===t?1:this._rowElements.length-2];if(i.getAttribute(\"aria-posinset\")===(0===t?\"1\":`${this._terminal.buffer.lines.length}`))return;if(e.relatedTarget!==s)return;let r,n;if(0===t?(r=i,n=this._rowElements.pop(),this._rowContainer.removeChild(n)):(r=this._rowElements.shift(),n=i,this._rowContainer.removeChild(r)),r.removeEventListener(\"focus\",this._topBoundaryFocusListener),n.removeEventListener(\"focus\",this._bottomBoundaryFocusListener),0===t){const e=this._createAccessibilityTreeNode();this._rowElements.unshift(e),this._rowContainer.insertAdjacentElement(\"afterbegin\",e)}else{const e=this._createAccessibilityTreeNode();this._rowElements.push(e),this._rowContainer.appendChild(e)}this._rowElements[0].addEventListener(\"focus\",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener(\"focus\",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation()}_onResize(e){this._rowElements[this._rowElements.length-1].removeEventListener(\"focus\",this._bottomBoundaryFocusListener);for(let e=this._rowContainer.children.length;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener(\"focus\",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()}_createAccessibilityTreeNode(){const e=document.createElement(\"div\");return e.setAttribute(\"role\",\"listitem\"),e.tabIndex=-1,this._refreshRowDimensions(e),e}_onTab(e){for(let t=0;t<e;t++)this._onChar(\" \")}_onChar(e){this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,\"\\n\"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=s.tooMuchOutput)),r.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((()=>{this._accessibilityTreeRoot.appendChild(this._liveRegion)}),0))}_clearLiveRegion(){this._liveRegion.textContent=\"\",this._liveRegionLineCount=0,r.isMac&&(0,c.removeElementFromParent)(this._liveRegion)}_onKey(e){this._clearLiveRegion(),this._charsToConsume.push(e)}_refreshRows(e,t){this._renderRowsDebouncer.refresh(e,t,this._terminal.rows)}_renderRows(e,t){const i=this._terminal.buffer,s=i.lines.length.toString();for(let r=e;r<=t;r++){const e=i.translateBufferLineToString(i.ydisp+r,!0),t=(i.ydisp+r+1).toString(),n=this._rowElements[r];n&&(0===e.length?n.innerText=\" \":n.textContent=e,n.setAttribute(\"aria-posinset\",t),n.setAttribute(\"aria-setsize\",s))}this._announceCharacters()}_refreshRowsDimensions(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(let e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e])}}_refreshRowDimensions(e){e.style.height=`${this._renderService.dimensions.actualCellHeight}px`}_announceCharacters(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce=\"\")}}t.AccessibilityManager=l},3614:(e,t)=>{function i(e){return e.replace(/\\r?\\n/g,\"\\r\")}function s(e,t){return t?\"\u001b[200~\"+e+\"\u001b[201~\":e}function r(e,t,r){e=s(e=i(e),r.decPrivateModes.bracketedPasteMode),r.triggerDataEvent(e,!0),t.value=\"\"}function n(e,t,i){const s=i.getBoundingClientRect(),r=e.clientX-s.left-10,n=e.clientY-s.top-10;t.style.width=\"20px\",t.style.height=\"20px\",t.style.left=`${r}px`,t.style.top=`${n}px`,t.style.zIndex=\"1000\",t.focus()}Object.defineProperty(t,\"__esModule\",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=i,t.bracketTextForPaste=s,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData(\"text/plain\",t.selectionText),e.preventDefault()},t.handlePasteEvent=function(e,t,i){e.stopPropagation(),e.clipboardData&&r(e.clipboardData.getData(\"text/plain\"),t,i)},t.paste=r,t.moveTextAreaUnderMouseCursor=n,t.rightClickHandler=function(e,t,i,s,r){n(e,t,i),r&&s.rightClickSelect(e),t.value=s.selectionText,t.select()}},7239:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ColorContrastCache=void 0;const s=i(1505);t.ColorContrastCache=class{constructor(){this._color=new s.TwoKeyMap,this._css=new s.TwoKeyMap}setCss(e,t,i){this._css.set(e,t,i)}getCss(e,t){return this._css.get(e,t)}setColor(e,t,i){this._color.set(e,t,i)}getColor(e,t){return this._color.get(e,t)}clear(){this._color.clear(),this._css.clear()}}},5680:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ColorManager=t.DEFAULT_ANSI_COLORS=void 0;const s=i(8055),r=i(7239),n=s.css.toColor(\"#ffffff\"),o=s.css.toColor(\"#000000\"),a=s.css.toColor(\"#ffffff\"),h=s.css.toColor(\"#000000\"),c={css:\"rgba(255, 255, 255, 0.3)\",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze((()=>{const e=[s.css.toColor(\"#2e3436\"),s.css.toColor(\"#cc0000\"),s.css.toColor(\"#4e9a06\"),s.css.toColor(\"#c4a000\"),s.css.toColor(\"#3465a4\"),s.css.toColor(\"#75507b\"),s.css.toColor(\"#06989a\"),s.css.toColor(\"#d3d7cf\"),s.css.toColor(\"#555753\"),s.css.toColor(\"#ef2929\"),s.css.toColor(\"#8ae234\"),s.css.toColor(\"#fce94f\"),s.css.toColor(\"#729fcf\"),s.css.toColor(\"#ad7fa8\"),s.css.toColor(\"#34e2e2\"),s.css.toColor(\"#eeeeec\")],t=[0,95,135,175,215,255];for(let i=0;i<216;i++){const r=t[i/36%6|0],n=t[i/6%6|0],o=t[i%6];e.push({css:s.channels.toCss(r,n,o),rgba:s.channels.toRgba(r,n,o)})}for(let t=0;t<24;t++){const i=8+10*t;e.push({css:s.channels.toCss(i,i,i),rgba:s.channels.toRgba(i,i,i)})}return e})()),t.ColorManager=class{constructor(e,i){this.allowTransparency=i;const l=e.createElement(\"canvas\");l.width=1,l.height=1;const d=l.getContext(\"2d\");if(!d)throw new Error(\"Could not get rendering context\");this._ctx=d,this._ctx.globalCompositeOperation=\"copy\",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new r.ColorContrastCache,this.colors={foreground:n,background:o,cursor:a,cursorAccent:h,selectionForeground:void 0,selectionBackgroundTransparent:c,selectionBackgroundOpaque:s.color.blend(o,c),selectionInactiveBackgroundTransparent:c,selectionInactiveBackgroundOpaque:s.color.blend(o,c),ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors()}onOptionsChange(e,t){switch(e){case\"minimumContrastRatio\":this._contrastCache.clear();break;case\"allowTransparency\":this.allowTransparency=t}}setTheme(e={}){this.colors.foreground=this._parseColor(e.foreground,n),this.colors.background=this._parseColor(e.background,o),this.colors.cursor=this._parseColor(e.cursor,a,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,h,!0),this.colors.selectionBackgroundTransparent=this._parseColor(e.selectionBackground,c,!0),this.colors.selectionBackgroundOpaque=s.color.blend(this.colors.background,this.colors.selectionBackgroundTransparent),this.colors.selectionInactiveBackgroundTransparent=this._parseColor(e.selectionInactiveBackground,this.colors.selectionBackgroundTransparent,!0),this.colors.selectionInactiveBackgroundOpaque=s.color.blend(this.colors.background,this.colors.selectionInactiveBackgroundTransparent);const i={css:\"\",rgba:0};if(this.colors.selectionForeground=e.selectionForeground?this._parseColor(e.selectionForeground,i):void 0,this.colors.selectionForeground===i&&(this.colors.selectionForeground=void 0),s.color.isOpaque(this.colors.selectionBackgroundTransparent)){const e=.3;this.colors.selectionBackgroundTransparent=s.color.opacity(this.colors.selectionBackgroundTransparent,e)}if(s.color.isOpaque(this.colors.selectionInactiveBackgroundTransparent)){const e=.3;this.colors.selectionInactiveBackgroundTransparent=s.color.opacity(this.colors.selectionInactiveBackgroundTransparent,e)}if(this.colors.ansi=t.DEFAULT_ANSI_COLORS.slice(),this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),e.extendedAnsi){const i=Math.min(this.colors.ansi.length-16,e.extendedAnsi.length);for(let s=0;s<i;s++)this.colors.ansi[s+16]=this._parseColor(e.extendedAnsi[s],t.DEFAULT_ANSI_COLORS[s+16])}this._contrastCache.clear(),this._updateRestoreColors()}restoreColor(e){if(void 0!==e)switch(e){case 256:this.colors.foreground=this._restoreColors.foreground;break;case 257:this.colors.background=this._restoreColors.background;break;case 258:this.colors.cursor=this._restoreColors.cursor;break;default:this.colors.ansi[e]=this._restoreColors.ansi[e]}else for(let e=0;e<this._restoreColors.ansi.length;++e)this.colors.ansi[e]=this._restoreColors.ansi[e]}_updateRestoreColors(){this._restoreColors={foreground:this.colors.foreground,background:this.colors.background,cursor:this.colors.cursor,ansi:this.colors.ansi.slice()}}_parseColor(e,t,i=this.allowTransparency){if(void 0===e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,\"string\"!=typeof this._ctx.fillStyle)return console.warn(`Color: ${e} is invalid using fallback ${t.css}`),t;this._ctx.fillRect(0,0,1,1);const r=this._ctx.getImageData(0,0,1,1).data;if(255!==r[3]){if(!i)return console.warn(`Color: ${e} is using transparency, but allowTransparency is false. Using fallback ${t.css}.`),t;const[r,n,o,a]=this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(\",\").map((e=>Number(e))),h=Math.round(255*a);return{rgba:s.channels.toRgba(r,n,o,h),css:e}}return{css:this._ctx.fillStyle,rgba:s.channels.toRgba(r[0],r[1],r[2],r[3])}}}},9631:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.removeElementFromParent=void 0,t.removeElementFromParent=function(...e){var t;for(const i of e)null===(t=null==i?void 0:i.parentElement)||void 0===t||t.removeChild(i)}},3656:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,i,s){e.addEventListener(t,i,s);let r=!1;return{dispose:()=>{r||(r=!0,e.removeEventListener(t,i,s))}}}},6465:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.Linkifier2=void 0;const n=i(2585),o=i(8460),a=i(844),h=i(3656);let c=class extends a.Disposable{constructor(e){super(),this._bufferService=e,this._linkProviders=[],this._linkCacheDisposables=[],this._isMouseOut=!0,this._activeLine=-1,this._onShowLinkUnderline=this.register(new o.EventEmitter),this._onHideLinkUnderline=this.register(new o.EventEmitter),this.register((0,a.getDisposeArrayDisposable)(this._linkCacheDisposables))}get currentLink(){return this._currentLink}get onShowLinkUnderline(){return this._onShowLinkUnderline.event}get onHideLinkUnderline(){return this._onHideLinkUnderline.event}dispose(){super.dispose(),this._lastMouseEvent=void 0}registerLinkProvider(e){return this._linkProviders.push(e),{dispose:()=>{const t=this._linkProviders.indexOf(e);-1!==t&&this._linkProviders.splice(t,1)}}}attachToDom(e,t,i){this._element=e,this._mouseService=t,this._renderService=i,this.register((0,h.addDisposableDomListener)(this._element,\"mouseleave\",(()=>{this._isMouseOut=!0,this._clearCurrentLink()}))),this.register((0,h.addDisposableDomListener)(this._element,\"mousemove\",this._onMouseMove.bind(this))),this.register((0,h.addDisposableDomListener)(this._element,\"mousedown\",this._handleMouseDown.bind(this))),this.register((0,h.addDisposableDomListener)(this._element,\"mouseup\",this._handleMouseUp.bind(this)))}_onMouseMove(e){if(this._lastMouseEvent=e,!this._element||!this._mouseService)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(!t)return;this._isMouseOut=!1;const i=e.composedPath();for(let e=0;e<i.length;e++){const t=i[e];if(t.classList.contains(\"xterm\"))break;if(t.classList.contains(\"xterm-hover\"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._onHover(t),this._lastBufferCell=t)}_onHover(e){if(this._activeLine!==e.y)return this._clearCurrentLink(),void this._askForLink(e,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0))}_askForLink(e,t){var i,s;this._activeProviderReplies&&t||(null===(i=this._activeProviderReplies)||void 0===i||i.forEach((e=>{null==e||e.forEach((e=>{e.link.dispose&&e.link.dispose()}))})),this._activeProviderReplies=new Map,this._activeLine=e.y);let r=!1;for(const[i,n]of this._linkProviders.entries())t?(null===(s=this._activeProviderReplies)||void 0===s?void 0:s.get(i))&&(r=this._checkLinkProviderResult(i,e,r)):n.provideLinks(e.y,(t=>{var s,n;if(this._isMouseOut)return;const o=null==t?void 0:t.map((e=>({link:e})));null===(s=this._activeProviderReplies)||void 0===s||s.set(i,o),r=this._checkLinkProviderResult(i,e,r),(null===(n=this._activeProviderReplies)||void 0===n?void 0:n.size)===this._linkProviders.length&&this._removeIntersectingLinks(e.y,this._activeProviderReplies)}))}_removeIntersectingLinks(e,t){const i=new Set;for(let s=0;s<t.size;s++){const r=t.get(s);if(r)for(let t=0;t<r.length;t++){const s=r[t],n=s.link.range.start.y<e?0:s.link.range.start.x,o=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x;for(let e=n;e<=o;e++){if(i.has(e)){r.splice(t--,1);break}i.add(e)}}}}_checkLinkProviderResult(e,t,i){var s;if(!this._activeProviderReplies)return i;const r=this._activeProviderReplies.get(e);let n=!1;for(let t=0;t<e;t++)this._activeProviderReplies.has(t)&&!this._activeProviderReplies.get(t)||(n=!0);if(!n&&r){const e=r.find((e=>this._linkAtPosition(e.link,t)));e&&(i=!0,this._handleNewLink(e))}if(this._activeProviderReplies.size===this._linkProviders.length&&!i)for(let e=0;e<this._activeProviderReplies.size;e++){const r=null===(s=this._activeProviderReplies.get(e))||void 0===s?void 0:s.find((e=>this._linkAtPosition(e.link,t)));if(r){i=!0,this._handleNewLink(r);break}}return i}_handleMouseDown(){this._mouseDownLink=this._currentLink}_handleMouseUp(e){if(!this._element||!this._mouseService||!this._currentLink)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text)}_clearCurrentLink(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0,a.disposeArray)(this._linkCacheDisposables))}_handleNewLink(e){if(!this._element||!this._lastMouseEvent||!this._mouseService)return;const t=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);t&&this._linkAtPosition(e.link,t)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.pointerCursor},set:e=>{var t,i;(null===(t=this._currentLink)||void 0===t?void 0:t.state)&&this._currentLink.state.decorations.pointerCursor!==e&&(this._currentLink.state.decorations.pointerCursor=e,this._currentLink.state.isHovered&&(null===(i=this._element)||void 0===i||i.classList.toggle(\"xterm-cursor-pointer\",e)))}},underline:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.underline},set:t=>{var i,s,r;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(null===(r=null===(s=this._currentLink)||void 0===s?void 0:s.state)||void 0===r?void 0:r.decorations.underline)!==t&&(this._currentLink.state.decorations.underline=t,this._currentLink.state.isHovered&&this._fireUnderlineEvent(e.link,t))}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e=>{const t=0===e.start?0:e.start+1+this._bufferService.buffer.ydisp;this._clearCurrentLink(t,e.end+1+this._bufferService.buffer.ydisp)}))))}_linkHover(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add(\"xterm-cursor-pointer\")),t.hover&&t.hover(i,t.text)}_fireUnderlineEvent(e,t){const i=e.range,s=this._bufferService.buffer.ydisp,r=this._createLinkUnderlineEvent(i.start.x-1,i.start.y-s-1,i.end.x,i.end.y-s-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(r)}_linkLeave(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove(\"xterm-cursor-pointer\")),t.leave&&t.leave(i,t.text)}_linkAtPosition(e,t){const i=e.range.start.y===e.range.end.y,s=e.range.start.y<t.y,r=e.range.end.y>t.y;return(i&&e.range.start.x<=t.x&&e.range.end.x>=t.x||s&&e.range.end.x>=t.x||r&&e.range.start.x<=t.x||s&&r)&&e.range.start.y<=t.y&&e.range.end.y>=t.y}_positionFromMouseEvent(e,t,i){const s=i.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(s)return{x:s[0],y:s[1]+this._bufferService.buffer.ydisp}}_createLinkUnderlineEvent(e,t,i,s,r){return{x1:e,y1:t,x2:i,y2:s,cols:this._bufferService.cols,fg:r}}};c=s([r(0,n.IBufferService)],c),t.Linkifier2=c},9042:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel=\"Terminal input\",t.tooMuchOutput=\"Too much output to announce, navigate to rows manually to read\"},2962:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.OscLinkProvider=void 0;const n=i(511),o=i(2585);let a=class{constructor(e,t,i){this._bufferService=e,this._optionsService=t,this._oscLinkService=i}provideLinks(e,t){var i;const s=this._bufferService.buffer.lines.get(e-1);if(!s)return void t(void 0);const r=[],o=this._optionsService.rawOptions.linkHandler,a=new n.CellData,c=s.getTrimmedLength();let l=-1,d=-1,_=!1;for(let t=0;t<c;t++)if(-1!==d||s.hasContent(t)){if(s.loadCell(t,a),a.hasExtendedAttrs()&&a.extended.urlId){if(-1===d){d=t,l=a.extended.urlId;continue}_=a.extended.urlId!==l}else-1!==d&&(_=!0);if(_||-1!==d&&t===c-1){const s=null===(i=this._oscLinkService.getLinkData(l))||void 0===i?void 0:i.uri;if(s){const i={start:{x:d+1,y:e},end:{x:t+(_||t!==c-1?0:1),y:e}};r.push({text:s,range:i,activate:(e,t)=>o?o.activate(e,t,i):h(0,t),hover:(e,t)=>{var s;return null===(s=null==o?void 0:o.hover)||void 0===s?void 0:s.call(o,e,t,i)},leave:(e,t)=>{var s;return null===(s=null==o?void 0:o.leave)||void 0===s?void 0:s.call(o,e,t,i)}})}_=!1,a.hasExtendedAttrs()&&a.extended.urlId?(d=t,l=a.extended.urlId):(d=-1,l=-1)}}t(r)}};function h(e,t){if(confirm(`Do you want to navigate to ${t}?`)){const e=window.open();if(e){try{e.opener=null}catch(e){}e.location.href=t}else console.warn(\"Opening link blocked as opener could not be cleared\")}}a=s([r(0,o.IBufferService),r(1,o.IOptionsService),r(2,o.IOscLinkService)],a),t.OscLinkProvider=a},6193:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.RenderDebouncer=void 0,t.RenderDebouncer=class{constructor(e,t){this._parentWindow=e,this._renderCallback=t,this._refreshCallbacks=[]}dispose(){this._animationFrame&&(this._parentWindow.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)}addRefreshCallback(e){return this._refreshCallbacks.push(e),this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh()))),this._animationFrame}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh())))}_innerRefresh(){if(this._animationFrame=void 0,void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return void this._runRefreshCallbacks();const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t),this._runRefreshCallbacks()}_runRefreshCallbacks(){for(const e of this._refreshCallbacks)e(0);this._refreshCallbacks=[]}}},5596:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ScreenDprMonitor=void 0;const s=i(844);class r extends s.Disposable{constructor(e){super(),this._parentWindow=e,this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio}setListener(e){this._listener&&this.clearListener(),this._listener=e,this._outerListener=()=>{this._listener&&(this._listener(this._parentWindow.devicePixelRatio,this._currentDevicePixelRatio),this._updateDpr())},this._updateDpr()}dispose(){super.dispose(),this.clearListener()}_updateDpr(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this._resolutionMediaMatchList=this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`),this._resolutionMediaMatchList.addListener(this._outerListener))}clearListener(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0)}}t.ScreenDprMonitor=r},3236:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.Terminal=void 0;const s=i(2950),r=i(1680),n=i(3614),o=i(2584),a=i(5435),h=i(9312),c=i(6114),l=i(3656),d=i(9042),_=i(4567),u=i(1296),f=i(7399),v=i(8460),g=i(8437),p=i(5680),S=i(3230),m=i(4725),C=i(428),b=i(8934),y=i(6465),w=i(5114),E=i(8969),L=i(8055),R=i(4269),k=i(5941),D=i(3107),A=i(5744),x=i(9074),B=i(2585),T=i(2962),M=\"undefined\"!=typeof window?window.document:null;class O extends E.CoreTerminal{constructor(e={}){super(e),this.browser=c,this._keyDownHandled=!1,this._keyDownSeen=!1,this._keyPressHandled=!1,this._unprocessedDeadKey=!1,this._onCursorMove=new v.EventEmitter,this._onKey=new v.EventEmitter,this._onRender=new v.EventEmitter,this._onSelectionChange=new v.EventEmitter,this._onTitleChange=new v.EventEmitter,this._onBell=new v.EventEmitter,this._onFocus=new v.EventEmitter,this._onBlur=new v.EventEmitter,this._onA11yCharEmitter=new v.EventEmitter,this._onA11yTabEmitter=new v.EventEmitter,this._setup(),this.linkifier2=this.register(this._instantiationService.createInstance(y.Linkifier2)),this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(T.OscLinkProvider)),this._decorationService=this._instantiationService.createInstance(x.DecorationService),this._instantiationService.setService(B.IDecorationService,this._decorationService),this.register(this._inputHandler.onRequestBell((()=>this._onBell.fire()))),this.register(this._inputHandler.onRequestRefreshRows(((e,t)=>this.refresh(e,t)))),this.register(this._inputHandler.onRequestSendFocus((()=>this._reportFocus()))),this.register(this._inputHandler.onRequestReset((()=>this.reset()))),this.register(this._inputHandler.onRequestWindowsOptionsReport((e=>this._reportWindowsOptions(e)))),this.register(this._inputHandler.onColor((e=>this._handleColorEvent(e)))),this.register((0,v.forwardEvent)(this._inputHandler.onCursorMove,this._onCursorMove)),this.register((0,v.forwardEvent)(this._inputHandler.onTitleChange,this._onTitleChange)),this.register((0,v.forwardEvent)(this._inputHandler.onA11yChar,this._onA11yCharEmitter)),this.register((0,v.forwardEvent)(this._inputHandler.onA11yTab,this._onA11yTabEmitter)),this.register(this._bufferService.onResize((e=>this._afterResize(e.cols,e.rows))))}get onCursorMove(){return this._onCursorMove.event}get onKey(){return this._onKey.event}get onRender(){return this._onRender.event}get onSelectionChange(){return this._onSelectionChange.event}get onTitleChange(){return this._onTitleChange.event}get onBell(){return this._onBell.event}get onFocus(){return this._onFocus.event}get onBlur(){return this._onBlur.event}get onA11yChar(){return this._onA11yCharEmitter.event}get onA11yTab(){return this._onA11yTabEmitter.event}_handleColorEvent(e){var t,i;if(this._colorManager){for(const t of e){let e,i=\"\";switch(t.index){case 256:e=\"foreground\",i=\"10\";break;case 257:e=\"background\",i=\"11\";break;case 258:e=\"cursor\",i=\"12\";break;default:e=\"ansi\",i=\"4;\"+t.index}switch(t.type){case 0:const s=L.color.toColorRGB(\"ansi\"===e?this._colorManager.colors.ansi[t.index]:this._colorManager.colors[e]);this.coreService.triggerDataEvent(`${o.C0.ESC}]${i};${(0,k.toRgbString)(s)}${o.C1_ESCAPED.ST}`);break;case 1:\"ansi\"===e?this._colorManager.colors.ansi[t.index]=L.rgba.toColor(...t.color):this._colorManager.colors[e]=L.rgba.toColor(...t.color);break;case 2:this._colorManager.restoreColor(t.index)}}null===(t=this._renderService)||void 0===t||t.setColors(this._colorManager.colors),null===(i=this.viewport)||void 0===i||i.onThemeChange(this._colorManager.colors)}}dispose(){var e,t,i;this._isDisposed||(super.dispose(),null===(e=this._renderService)||void 0===e||e.dispose(),this._customKeyEventHandler=void 0,this.write=()=>{},null===(i=null===(t=this.element)||void 0===t?void 0:t.parentNode)||void 0===i||i.removeChild(this.element))}_setup(){super._setup(),this._customKeyEventHandler=void 0}get buffer(){return this.buffers.active}focus(){this.textarea&&this.textarea.focus({preventScroll:!0})}_updateOptions(e){var t,i,s,r;switch(super._updateOptions(e),e){case\"fontFamily\":case\"fontSize\":null===(t=this._renderService)||void 0===t||t.clear(),null===(i=this._charSizeService)||void 0===i||i.measure();break;case\"cursorBlink\":case\"cursorStyle\":this.refresh(this.buffer.y,this.buffer.y);break;case\"customGlyphs\":case\"drawBoldTextInBrightColors\":case\"letterSpacing\":case\"lineHeight\":case\"fontWeight\":case\"fontWeightBold\":case\"minimumContrastRatio\":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case\"scrollback\":null===(s=this.viewport)||void 0===s||s.syncScrollArea();break;case\"screenReaderMode\":this.optionsService.rawOptions.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new _.AccessibilityManager(this,this._renderService)):(null===(r=this._accessibilityManager)||void 0===r||r.dispose(),this._accessibilityManager=void 0);break;case\"tabStopWidth\":this.buffers.setupTabStops();break;case\"theme\":this._setTheme(this.optionsService.rawOptions.theme)}}_onTextAreaFocus(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(o.C0.ESC+\"[I\"),this.updateCursorStyle(e),this.element.classList.add(\"focus\"),this._showCursor(),this._onFocus.fire()}blur(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()}_onTextAreaBlur(){this.textarea.value=\"\",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(o.C0.ESC+\"[O\"),this.element.classList.remove(\"focus\"),this._onBlur.fire()}_syncTextArea(){if(!this.textarea||!this.buffer.isCursorInViewport||this._compositionHelper.isComposing||!this._renderService)return;const e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(!t)return;const i=Math.min(this.buffer.x,this.cols-1),s=this._renderService.dimensions.actualCellHeight,r=t.getWidth(i),n=this._renderService.dimensions.actualCellWidth*r,o=this.buffer.y*this._renderService.dimensions.actualCellHeight,a=i*this._renderService.dimensions.actualCellWidth;this.textarea.style.left=a+\"px\",this.textarea.style.top=o+\"px\",this.textarea.style.width=n+\"px\",this.textarea.style.height=s+\"px\",this.textarea.style.lineHeight=s+\"px\",this.textarea.style.zIndex=\"-5\"}_initGlobal(){this._bindKeys(),this.register((0,l.addDisposableDomListener)(this.element,\"copy\",(e=>{this.hasSelection()&&(0,n.copyHandler)(e,this._selectionService)})));const e=e=>(0,n.handlePasteEvent)(e,this.textarea,this.coreService);this.register((0,l.addDisposableDomListener)(this.textarea,\"paste\",e)),this.register((0,l.addDisposableDomListener)(this.element,\"paste\",e)),c.isFirefox?this.register((0,l.addDisposableDomListener)(this.element,\"mousedown\",(e=>{2===e.button&&(0,n.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord)}))):this.register((0,l.addDisposableDomListener)(this.element,\"contextmenu\",(e=>{(0,n.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord)}))),c.isLinux&&this.register((0,l.addDisposableDomListener)(this.element,\"auxclick\",(e=>{1===e.button&&(0,n.moveTextAreaUnderMouseCursor)(e,this.textarea,this.screenElement)})))}_bindKeys(){this.register((0,l.addDisposableDomListener)(this.textarea,\"keyup\",(e=>this._keyUp(e)),!0)),this.register((0,l.addDisposableDomListener)(this.textarea,\"keydown\",(e=>this._keyDown(e)),!0)),this.register((0,l.addDisposableDomListener)(this.textarea,\"keypress\",(e=>this._keyPress(e)),!0)),this.register((0,l.addDisposableDomListener)(this.textarea,\"compositionstart\",(()=>this._compositionHelper.compositionstart()))),this.register((0,l.addDisposableDomListener)(this.textarea,\"compositionupdate\",(e=>this._compositionHelper.compositionupdate(e)))),this.register((0,l.addDisposableDomListener)(this.textarea,\"compositionend\",(()=>this._compositionHelper.compositionend()))),this.register((0,l.addDisposableDomListener)(this.textarea,\"input\",(e=>this._inputEvent(e)),!0)),this.register(this.onRender((()=>this._compositionHelper.updateCompositionElements())))}open(e){var t;if(!e)throw new Error(\"Terminal requires a parent element.\");e.isConnected||this._logService.debug(\"Terminal.open was called on an element that was not attached to the DOM\"),this._document=e.ownerDocument,this.element=this._document.createElement(\"div\"),this.element.dir=\"ltr\",this.element.classList.add(\"terminal\"),this.element.classList.add(\"xterm\"),this.element.setAttribute(\"tabindex\",\"0\"),e.appendChild(this.element);const i=M.createDocumentFragment();this._viewportElement=M.createElement(\"div\"),this._viewportElement.classList.add(\"xterm-viewport\"),i.appendChild(this._viewportElement),this._viewportScrollArea=M.createElement(\"div\"),this._viewportScrollArea.classList.add(\"xterm-scroll-area\"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=M.createElement(\"div\"),this.screenElement.classList.add(\"xterm-screen\"),this._helperContainer=M.createElement(\"div\"),this._helperContainer.classList.add(\"xterm-helpers\"),this.screenElement.appendChild(this._helperContainer),i.appendChild(this.screenElement),this.textarea=M.createElement(\"textarea\"),this.textarea.classList.add(\"xterm-helper-textarea\"),this.textarea.setAttribute(\"aria-label\",d.promptLabel),this.textarea.setAttribute(\"aria-multiline\",\"false\"),this.textarea.setAttribute(\"autocorrect\",\"off\"),this.textarea.setAttribute(\"autocapitalize\",\"off\"),this.textarea.setAttribute(\"spellcheck\",\"false\"),this.textarea.tabIndex=0,this.register((0,l.addDisposableDomListener)(this.textarea,\"focus\",(e=>this._onTextAreaFocus(e)))),this.register((0,l.addDisposableDomListener)(this.textarea,\"blur\",(()=>this._onTextAreaBlur()))),this._helperContainer.appendChild(this.textarea),this._coreBrowserService=this._instantiationService.createInstance(w.CoreBrowserService,this.textarea,null!==(t=this._document.defaultView)&&void 0!==t?t:window),this._instantiationService.setService(m.ICoreBrowserService,this._coreBrowserService),this._charSizeService=this._instantiationService.createInstance(C.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(m.ICharSizeService,this._charSizeService),this._theme=this.options.theme||this._theme,this._colorManager=new p.ColorManager(M,this.options.allowTransparency),this.register(this.optionsService.onOptionChange((e=>this._colorManager.onOptionsChange(e,this.optionsService.rawOptions[e])))),this._colorManager.setTheme(this._theme),this._characterJoinerService=this._instantiationService.createInstance(R.CharacterJoinerService),this._instantiationService.setService(m.ICharacterJoinerService,this._characterJoinerService);const n=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(S.RenderService,n,this.rows,this.screenElement)),this._instantiationService.setService(m.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange((e=>this._onRender.fire(e)))),this.onResize((e=>this._renderService.resize(e.cols,e.rows))),this._compositionView=M.createElement(\"div\"),this._compositionView.classList.add(\"composition-view\"),this._compositionHelper=this._instantiationService.createInstance(s.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(i),this._mouseService=this._instantiationService.createInstance(b.MouseService),this._instantiationService.setService(m.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(r.Viewport,(e=>this.scrollLines(e,!0,1)),this._viewportElement,this._viewportScrollArea,this.element),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar((()=>this.viewport.syncScrollArea()))),this.register(this.viewport),this.register(this.onCursorMove((()=>{this._renderService.onCursorMove(),this._syncTextArea()}))),this.register(this.onResize((()=>this._renderService.onResize(this.cols,this.rows)))),this.register(this.onBlur((()=>this._renderService.onBlur()))),this.register(this.onFocus((()=>this._renderService.onFocus()))),this.register(this._renderService.onDimensionsChange((()=>this.viewport.syncScrollArea()))),this._selectionService=this.register(this._instantiationService.createInstance(h.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(m.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((e=>this.scrollLines(e.amount,e.suppressScrollEvent)))),this.register(this._selectionService.onSelectionChange((()=>this._onSelectionChange.fire()))),this.register(this._selectionService.onRequestRedraw((e=>this._renderService.onSelectionChanged(e.start,e.end,e.columnSelectMode)))),this.register(this._selectionService.onLinuxMouseSelection((e=>{this.textarea.value=e,this.textarea.focus(),this.textarea.select()}))),this.register(this._onScroll.event((e=>{this.viewport.syncScrollArea(),this._selectionService.refresh()}))),this.register((0,l.addDisposableDomListener)(this._viewportElement,\"scroll\",(()=>this._selectionService.refresh()))),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(D.BufferDecorationRenderer,this.screenElement)),this.register((0,l.addDisposableDomListener)(this.element,\"mousedown\",(e=>this._selectionService.onMouseDown(e)))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add(\"enable-mouse-events\")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new _.AccessibilityManager(this,this._renderService)),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(A.OverviewRulerRenderer,this._viewportElement,this.screenElement))),this.optionsService.onOptionChange((()=>{!this._overviewRulerRenderer&&this.options.overviewRulerWidth&&this._viewportElement&&this.screenElement&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(A.OverviewRulerRenderer,this._viewportElement,this.screenElement)))})),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()}_createRenderer(){return this._instantiationService.createInstance(u.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier2)}_setTheme(e){var t,i,s;this._theme=e,null===(t=this._colorManager)||void 0===t||t.setTheme(e),null===(i=this._renderService)||void 0===i||i.setColors(this._colorManager.colors),null===(s=this.viewport)||void 0===s||s.onThemeChange(this._colorManager.colors)}bindMouse(){const e=this,t=this.element;function i(t){const i=e._mouseService.getMouseReportCoords(t,e.screenElement);if(!i)return!1;let s,r;switch(t.overrideType||t.type){case\"mousemove\":r=32,void 0===t.buttons?(s=3,void 0!==t.button&&(s=t.button<3?t.button:3)):s=1&t.buttons?0:4&t.buttons?1:2&t.buttons?2:3;break;case\"mouseup\":r=0,s=t.button<3?t.button:3;break;case\"mousedown\":r=1,s=t.button<3?t.button:3;break;case\"wheel\":if(0===e.viewport.getLinesScrolled(t))return!1;r=t.deltaY<0?0:1,s=4;break;default:return!1}return!(void 0===r||void 0===s||s>4)&&e.coreMouseService.triggerMouseEvent({col:i.col,row:i.row,x:i.x,y:i.y,button:s,action:r,ctrl:t.ctrlKey,alt:t.altKey,shift:t.shiftKey})}const s={mouseup:null,wheel:null,mousedrag:null,mousemove:null},r={mouseup:e=>(i(e),e.buttons||(this._document.removeEventListener(\"mouseup\",s.mouseup),s.mousedrag&&this._document.removeEventListener(\"mousemove\",s.mousedrag)),this.cancel(e)),wheel:e=>(i(e),this.cancel(e,!0)),mousedrag:e=>{e.buttons&&i(e)},mousemove:e=>{e.buttons||i(e)}};this.register(this.coreMouseService.onProtocolChange((e=>{e?(\"debug\"===this.optionsService.rawOptions.logLevel&&this._logService.debug(\"Binding to mouse events:\",this.coreMouseService.explainEvents(e)),this.element.classList.add(\"enable-mouse-events\"),this._selectionService.disable()):(this._logService.debug(\"Unbinding from mouse events.\"),this.element.classList.remove(\"enable-mouse-events\"),this._selectionService.enable()),8&e?s.mousemove||(t.addEventListener(\"mousemove\",r.mousemove),s.mousemove=r.mousemove):(t.removeEventListener(\"mousemove\",s.mousemove),s.mousemove=null),16&e?s.wheel||(t.addEventListener(\"wheel\",r.wheel,{passive:!1}),s.wheel=r.wheel):(t.removeEventListener(\"wheel\",s.wheel),s.wheel=null),2&e?s.mouseup||(s.mouseup=r.mouseup):(this._document.removeEventListener(\"mouseup\",s.mouseup),s.mouseup=null),4&e?s.mousedrag||(s.mousedrag=r.mousedrag):(this._document.removeEventListener(\"mousemove\",s.mousedrag),s.mousedrag=null)}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0,l.addDisposableDomListener)(t,\"mousedown\",(e=>{if(e.preventDefault(),this.focus(),this.coreMouseService.areMouseEventsActive&&!this._selectionService.shouldForceSelection(e))return i(e),s.mouseup&&this._document.addEventListener(\"mouseup\",s.mouseup),s.mousedrag&&this._document.addEventListener(\"mousemove\",s.mousedrag),this.cancel(e)}))),this.register((0,l.addDisposableDomListener)(t,\"wheel\",(e=>{if(!s.wheel){if(!this.buffer.hasScrollback){const t=this.viewport.getLinesScrolled(e);if(0===t)return;const i=o.C0.ESC+(this.coreService.decPrivateModes.applicationCursorKeys?\"O\":\"[\")+(e.deltaY<0?\"A\":\"B\");let s=\"\";for(let e=0;e<Math.abs(t);e++)s+=i;return this.coreService.triggerDataEvent(s,!0),this.cancel(e,!0)}return this.viewport.onWheel(e)?this.cancel(e):void 0}}),{passive:!1})),this.register((0,l.addDisposableDomListener)(t,\"touchstart\",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.onTouchStart(e),this.cancel(e)}),{passive:!0})),this.register((0,l.addDisposableDomListener)(t,\"touchmove\",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.onTouchMove(e)?void 0:this.cancel(e)}),{passive:!1}))}refresh(e,t){var i;null===(i=this._renderService)||void 0===i||i.refreshRows(e,t)}updateCursorStyle(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add(\"column-select\"):this.element.classList.remove(\"column-select\")}_showCursor(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y))}scrollLines(e,t,i=0){super.scrollLines(e,t,i),this.refresh(0,this.rows-1)}paste(e){(0,n.paste)(e,this.textarea,this.coreService)}attachCustomKeyEventHandler(e){this._customKeyEventHandler=e}registerLinkProvider(e){return this.linkifier2.registerLinkProvider(e)}registerCharacterJoiner(e){if(!this._characterJoinerService)throw new Error(\"Terminal must be opened first\");const t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t}deregisterCharacterJoiner(e){if(!this._characterJoinerService)throw new Error(\"Terminal must be opened first\");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1)}get markers(){return this.buffer.markers}addMarker(e){return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)}registerDecoration(e){return this._decorationService.registerDecoration(e)}hasSelection(){return!!this._selectionService&&this._selectionService.hasSelection}select(e,t,i){this._selectionService.setSelection(e,t,i)}getSelection(){return this._selectionService?this._selectionService.selectionText:\"\"}getSelectionPosition(){if(this._selectionService&&this._selectionService.hasSelection)return{start:{x:this._selectionService.selectionStart[0],y:this._selectionService.selectionStart[1]},end:{x:this._selectionService.selectionEnd[0],y:this._selectionService.selectionEnd[1]}}}clearSelection(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection()}selectAll(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll()}selectLines(e,t){var i;null===(i=this._selectionService)||void 0===i||i.selectLines(e,t)}_keyDown(e){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;const t=this.browser.isMac&&this.options.macOptionIsMeta&&e.altKey;if(!t&&!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;t||\"Dead\"!==e.key&&\"AltGraph\"!==e.key||(this._unprocessedDeadKey=!0);const i=(0,f.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===i.type||2===i.type){const t=this.rows-1;return this.scrollLines(2===i.type?-t:t),this.cancel(e,!0)}return 1===i.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(i.cancel&&this.cancel(e,!0),!i.key||!!(e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&1===e.key.length&&e.key.charCodeAt(0)>=65&&e.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(i.key!==o.C0.ETX&&i.key!==o.C0.CR||(this.textarea.value=\"\"),this._onKey.fire({key:i.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(i.key,!0),this.optionsService.rawOptions.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(e,!0))))}_isThirdLevelShift(e,t){const i=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState(\"AltGraph\");return\"keypress\"===t.type?i:i&&(!t.keyCode||t.keyCode>47)}_keyUp(e){this._keyDownSeen=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1)}_keyPress(e){let t;if(this._keyPressHandled=!1,this._keyDownHandled)return!1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else{if(0===e.which||0===e.charCode)return!1;t=e.which}return!(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))}_inputEvent(e){if(e.data&&\"insertText\"===e.inputType&&(!e.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return!1;this._unprocessedDeadKey=!1;const t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return!1}resize(e,t){e!==this.cols||t!==this.rows?super.resize(e,t):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure()}_afterResize(e,t){var i,s;null===(i=this._charSizeService)||void 0===i||i.measure(),null===(s=this.viewport)||void 0===s||s.syncScrollArea(!0)}clear(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(let e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(g.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0})}}reset(){var e,t;this.options.rows=this.rows,this.options.cols=this.cols;const i=this._customKeyEventHandler;this._setup(),super.reset(),null===(e=this._selectionService)||void 0===e||e.reset(),this._decorationService.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(t=this.viewport)||void 0===t||t.syncScrollArea()}clearTextureAtlas(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas()}_reportFocus(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains(\"focus\"))?this.coreService.triggerDataEvent(o.C0.ESC+\"[I\"):this.coreService.triggerDataEvent(o.C0.ESC+\"[O\")}_reportWindowsOptions(e){if(this._renderService)switch(e){case a.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:const e=this._renderService.dimensions.canvasWidth.toFixed(0),t=this._renderService.dimensions.canvasHeight.toFixed(0);this.coreService.triggerDataEvent(`${o.C0.ESC}[4;${t};${e}t`);break;case a.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:const i=this._renderService.dimensions.actualCellWidth.toFixed(0),s=this._renderService.dimensions.actualCellHeight.toFixed(0);this.coreService.triggerDataEvent(`${o.C0.ESC}[6;${s};${i}t`)}}cancel(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1}}t.Terminal=O},9924:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.TimeBasedDebouncer=void 0,t.TimeBasedDebouncer=class{constructor(e,t=1e3){this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1}dispose(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID)}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;const s=Date.now();if(s-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=s,this._innerRefresh();else if(!this._additionalRefreshRequested){const e=s-this._lastRefreshMs,t=this._debounceThresholdMS-e;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((()=>{this._lastRefreshMs=Date.now(),this._innerRefresh(),this._additionalRefreshRequested=!1,this._refreshTimeoutID=void 0}),t)}}_innerRefresh(){if(void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return;const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t)}}},1680:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.Viewport=void 0;const n=i(844),o=i(3656),a=i(4725),h=i(2585);let c=class extends n.Disposable{constructor(e,t,i,s,r,n,a,h,c){super(),this._scrollLines=e,this._viewportElement=t,this._scrollArea=i,this._element=s,this._bufferService=r,this._optionsService=n,this._charSizeService=a,this._renderService=h,this._coreBrowserService=c,this.scrollBarWidth=0,this._currentRowHeight=0,this._currentScaledCellHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._lastTouchY=0,this._lastScrollTop=0,this._wheelPartialScroll=0,this._refreshAnimationFrame=null,this._ignoreNextScrollEvent=!1,this._smoothScrollState={startTime:0,origin:-1,target:-1},this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||15,this.register((0,o.addDisposableDomListener)(this._viewportElement,\"scroll\",this._onScroll.bind(this))),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._renderDimensions=this._renderService.dimensions,this.register(this._renderService.onDimensionsChange((e=>this._renderDimensions=e))),setTimeout((()=>this.syncScrollArea()),0)}onThemeChange(e){this._viewportElement.style.backgroundColor=e.background.css}_refresh(e){if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._innerRefresh())))}_innerRefresh(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/this._coreBrowserService.dpr,this._currentScaledCellHeight=this._renderService.dimensions.scaledCellHeight,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;const e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+\"px\")}const e=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==e&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=e),this._refreshAnimationFrame=null}syncScrollArea(e=!1){if(this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.scaledCellHeight===this._currentScaledCellHeight||this._refresh(e)}_onScroll(e){if(this._lastScrollTop=this._viewportElement.scrollTop,!this._viewportElement.offsetParent)return;if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);const t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t)}_smoothScroll(){if(this._isDisposed||-1===this._smoothScrollState.origin||-1===this._smoothScrollState.target)return;const e=this._smoothScrollPercent();this._viewportElement.scrollTop=this._smoothScrollState.origin+Math.round(e*(this._smoothScrollState.target-this._smoothScrollState.origin)),e<1?this._coreBrowserService.window.requestAnimationFrame((()=>this._smoothScroll())):this._clearSmoothScrollState()}_smoothScrollPercent(){return this._optionsService.rawOptions.smoothScrollDuration&&this._smoothScrollState.startTime?Math.max(Math.min((Date.now()-this._smoothScrollState.startTime)/this._optionsService.rawOptions.smoothScrollDuration,1),0):1}_clearSmoothScrollState(){this._smoothScrollState.startTime=0,this._smoothScrollState.origin=-1,this._smoothScrollState.target=-1}_bubbleScroll(e,t){const i=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return!(t<0&&0!==this._viewportElement.scrollTop||t>0&&i<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)}onWheel(e){const t=this._getPixelsScrolled(e);return 0!==t&&(this._optionsService.rawOptions.smoothScrollDuration?(this._smoothScrollState.startTime=Date.now(),this._smoothScrollPercent()<1?(this._smoothScrollState.origin=this._viewportElement.scrollTop,-1===this._smoothScrollState.target?this._smoothScrollState.target=this._viewportElement.scrollTop+t:this._smoothScrollState.target+=t,this._smoothScrollState.target=Math.max(Math.min(this._smoothScrollState.target,this._viewportElement.scrollHeight),0),this._smoothScroll()):this._clearSmoothScrollState()):this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}_getPixelsScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t}getLinesScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t}_applyScrollModifier(e,t){const i=this._optionsService.rawOptions.fastScrollModifier;return\"alt\"===i&&t.altKey||\"ctrl\"===i&&t.ctrlKey||\"shift\"===i&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity}onTouchStart(e){this._lastTouchY=e.touches[0].pageY}onTouchMove(e){const t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}};c=s([r(4,h.IBufferService),r(5,h.IOptionsService),r(6,a.ICharSizeService),r(7,a.IRenderService),r(8,a.ICoreBrowserService)],c),t.Viewport=c},3107:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferDecorationRenderer=void 0;const n=i(3656),o=i(4725),a=i(844),h=i(2585);let c=class extends a.Disposable{constructor(e,t,i,s){super(),this._screenElement=e,this._bufferService=t,this._decorationService=i,this._renderService=s,this._decorationElements=new Map,this._altBufferIsActive=!1,this._dimensionsChanged=!1,this._container=document.createElement(\"div\"),this._container.classList.add(\"xterm-decoration-container\"),this._screenElement.appendChild(this._container),this.register(this._renderService.onRenderedViewportChange((()=>this._queueRefresh()))),this.register(this._renderService.onDimensionsChange((()=>{this._dimensionsChanged=!0,this._queueRefresh()}))),this.register((0,n.addDisposableDomListener)(window,\"resize\",(()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._altBufferIsActive=this._bufferService.buffer===this._bufferService.buffers.alt}))),this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh()))),this.register(this._decorationService.onDecorationRemoved((e=>this._removeDecoration(e))))}dispose(){this._container.remove(),this._decorationElements.clear(),super.dispose()}_queueRefresh(){void 0===this._animationFrame&&(this._animationFrame=this._renderService.addRefreshCallback((()=>{this.refreshDecorations(),this._animationFrame=void 0})))}refreshDecorations(){for(const e of this._decorationService.decorations)this._renderDecoration(e);this._dimensionsChanged=!1}_renderDecoration(e){this._refreshStyle(e),this._dimensionsChanged&&this._refreshXPosition(e)}_createElement(e){var t;const i=document.createElement(\"div\");i.classList.add(\"xterm-decoration\"),i.style.width=`${Math.round((e.options.width||1)*this._renderService.dimensions.actualCellWidth)}px`,i.style.height=(e.options.height||1)*this._renderService.dimensions.actualCellHeight+\"px\",i.style.top=(e.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.actualCellHeight+\"px\",i.style.lineHeight=`${this._renderService.dimensions.actualCellHeight}px`;const s=null!==(t=e.options.x)&&void 0!==t?t:0;return s&&s>this._bufferService.cols&&(i.style.display=\"none\"),this._refreshXPosition(e,i),i}_refreshStyle(e){const t=e.marker.line-this._bufferService.buffers.active.ydisp;if(t<0||t>=this._bufferService.rows)e.element&&(e.element.style.display=\"none\",e.onRenderEmitter.fire(e.element));else{let i=this._decorationElements.get(e);i||(e.onDispose((()=>this._removeDecoration(e))),i=this._createElement(e),e.element=i,this._decorationElements.set(e,i),this._container.appendChild(i)),i.style.top=t*this._renderService.dimensions.actualCellHeight+\"px\",i.style.display=this._altBufferIsActive?\"none\":\"block\",e.onRenderEmitter.fire(i)}}_refreshXPosition(e,t=e.element){var i;if(!t)return;const s=null!==(i=e.options.x)&&void 0!==i?i:0;\"right\"===(e.options.anchor||\"left\")?t.style.right=s?s*this._renderService.dimensions.actualCellWidth+\"px\":\"\":t.style.left=s?s*this._renderService.dimensions.actualCellWidth+\"px\":\"\"}_removeDecoration(e){var t;null===(t=this._decorationElements.get(e))||void 0===t||t.remove(),this._decorationElements.delete(e)}};c=s([r(1,h.IBufferService),r(2,h.IDecorationService),r(3,o.IRenderService)],c),t.BufferDecorationRenderer=c},5871:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ColorZoneStore=void 0,t.ColorZoneStore=class{constructor(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0}}get zones(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones}clear(){this._zones.length=0,this._zonePoolIndex=0}addDecoration(e){if(e.options.overviewRulerOptions){for(const t of this._zones)if(t.color===e.options.overviewRulerOptions.color&&t.position===e.options.overviewRulerOptions.position){if(this._lineIntersectsZone(t,e.marker.line))return;if(this._lineAdjacentToZone(t,e.marker.line,e.options.overviewRulerOptions.position))return void this._addLineToZone(t,e.marker.line)}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=e.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=e.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=e.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=e.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:e.options.overviewRulerOptions.color,position:e.options.overviewRulerOptions.position,startBufferLine:e.marker.line,endBufferLine:e.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++}}setPadding(e){this._linePadding=e}_lineIntersectsZone(e,t){return t>=e.startBufferLine&&t<=e.endBufferLine}_lineAdjacentToZone(e,t,i){return t>=e.startBufferLine-this._linePadding[i||\"full\"]&&t<=e.endBufferLine+this._linePadding[i||\"full\"]}_addLineToZone(e,t){e.startBufferLine=Math.min(e.startBufferLine,t),e.endBufferLine=Math.max(e.endBufferLine,t)}}},5744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.OverviewRulerRenderer=void 0;const n=i(5871),o=i(3656),a=i(4725),h=i(844),c=i(2585),l={full:0,left:0,center:0,right:0},d={full:0,left:0,center:0,right:0},_={full:0,left:0,center:0,right:0};let u=class extends h.Disposable{constructor(e,t,i,s,r,o,a){var h;super(),this._viewportElement=e,this._screenElement=t,this._bufferService=i,this._decorationService=s,this._renderService=r,this._optionsService=o,this._coreBrowseService=a,this._colorZoneStore=new n.ColorZoneStore,this._shouldUpdateDimensions=!0,this._shouldUpdateAnchor=!0,this._lastKnownBufferLength=0,this._canvas=document.createElement(\"canvas\"),this._canvas.classList.add(\"xterm-decoration-overview-ruler\"),this._refreshCanvasDimensions(),null===(h=this._viewportElement.parentElement)||void 0===h||h.insertBefore(this._canvas,this._viewportElement);const c=this._canvas.getContext(\"2d\");if(!c)throw new Error(\"Ctx cannot be null\");this._ctx=c,this._registerDecorationListeners(),this._registerBufferChangeListeners(),this._registerDimensionChangeListeners()}get _width(){return this._optionsService.options.overviewRulerWidth||0}_registerDecorationListeners(){this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh(void 0,!0)))),this.register(this._decorationService.onDecorationRemoved((()=>this._queueRefresh(void 0,!0))))}_registerBufferChangeListeners(){this.register(this._renderService.onRenderedViewportChange((()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._canvas.style.display=this._bufferService.buffer===this._bufferService.buffers.alt?\"none\":\"block\"}))),this.register(this._bufferService.onScroll((()=>{this._lastKnownBufferLength!==this._bufferService.buffers.normal.lines.length&&(this._refreshDrawHeightConstants(),this._refreshColorZonePadding())})))}_registerDimensionChangeListeners(){this.register(this._renderService.onRender((()=>{this._containerHeight&&this._containerHeight===this._screenElement.clientHeight||(this._queueRefresh(!0),this._containerHeight=this._screenElement.clientHeight)}))),this.register(this._optionsService.onOptionChange((e=>{\"overviewRulerWidth\"===e&&this._queueRefresh(!0)}))),this.register((0,o.addDisposableDomListener)(this._coreBrowseService.window,\"resize\",(()=>{this._queueRefresh(!0)}))),this._queueRefresh(!0)}dispose(){var e;null===(e=this._canvas)||void 0===e||e.remove(),super.dispose()}_refreshDrawConstants(){const e=Math.floor(this._canvas.width/3),t=Math.ceil(this._canvas.width/3);d.full=this._canvas.width,d.left=e,d.center=t,d.right=e,this._refreshDrawHeightConstants(),_.full=0,_.left=0,_.center=d.left,_.right=d.left+d.center}_refreshDrawHeightConstants(){l.full=Math.round(2*this._coreBrowseService.dpr);const e=this._canvas.height/this._bufferService.buffer.lines.length,t=Math.round(Math.max(Math.min(e,12),6)*this._coreBrowseService.dpr);l.left=t,l.center=t,l.right=t}_refreshColorZonePadding(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length}_refreshCanvasDimensions(){this._canvas.style.width=`${this._width}px`,this._canvas.width=Math.round(this._width*this._coreBrowseService.dpr),this._canvas.style.height=`${this._screenElement.clientHeight}px`,this._canvas.height=Math.round(this._screenElement.clientHeight*this._coreBrowseService.dpr),this._refreshDrawConstants(),this._refreshColorZonePadding()}_refreshDecorations(){this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();for(const e of this._decorationService.decorations)this._colorZoneStore.addDecoration(e);this._ctx.lineWidth=1;const e=this._colorZoneStore.zones;for(const t of e)\"full\"!==t.position&&this._renderColorZone(t);for(const t of e)\"full\"===t.position&&this._renderColorZone(t);this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1}_renderColorZone(e){this._ctx.fillStyle=e.color,this._ctx.fillRect(_[e.position||\"full\"],Math.round((this._canvas.height-1)*(e.startBufferLine/this._bufferService.buffers.active.lines.length)-l[e.position||\"full\"]/2),d[e.position||\"full\"],Math.round((this._canvas.height-1)*((e.endBufferLine-e.startBufferLine)/this._bufferService.buffers.active.lines.length)+l[e.position||\"full\"]))}_queueRefresh(e,t){this._shouldUpdateDimensions=e||this._shouldUpdateDimensions,this._shouldUpdateAnchor=t||this._shouldUpdateAnchor,void 0===this._animationFrame&&(this._animationFrame=this._coreBrowseService.window.requestAnimationFrame((()=>{this._refreshDecorations(),this._animationFrame=void 0})))}};u=s([r(2,c.IBufferService),r(3,c.IDecorationService),r(4,a.IRenderService),r(5,c.IOptionsService),r(6,a.ICoreBrowserService)],u),t.OverviewRulerRenderer=u},2950:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.CompositionHelper=void 0;const n=i(4725),o=i(2585),a=i(2584);let h=class{constructor(e,t,i,s,r,n){this._textarea=e,this._compositionView=t,this._bufferService=i,this._optionsService=s,this._coreService=r,this._renderService=n,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent=\"\"}get isComposing(){return this._isComposing}compositionstart(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent=\"\",this._dataAlreadySent=\"\",this._compositionView.classList.add(\"active\")}compositionupdate(e){this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((()=>{this._compositionPosition.end=this._textarea.value.length}),0)}compositionend(){this._finalizeComposition(!0)}keydown(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return!1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return!1;this._finalizeComposition(!1)}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)}_finalizeComposition(e){if(this._compositionView.classList.remove(\"active\"),this._isComposing=!1,e){const e={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((()=>{if(this._isSendingComposition){let t;this._isSendingComposition=!1,e.start+=this._dataAlreadySent.length,t=this._isComposing?this._textarea.value.substring(e.start,e.end):this._textarea.value.substring(e.start),t.length>0&&this._coreService.triggerDataEvent(t,!0)}}),0)}else{this._isSendingComposition=!1;const e=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(e,!0)}}_handleAnyTextareaChanges(){const e=this._textarea.value;setTimeout((()=>{if(!this._isComposing){const t=this._textarea.value,i=t.replace(e,\"\");this._dataAlreadySent=i,t.length>e.length?this._coreService.triggerDataEvent(i,!0):t.length<e.length?this._coreService.triggerDataEvent(`${a.C0.DEL}`,!0):t.length===e.length&&t!==e&&this._coreService.triggerDataEvent(t,!0)}}),0)}updateCompositionElements(e){if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){const e=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),t=this._renderService.dimensions.actualCellHeight,i=this._bufferService.buffer.y*this._renderService.dimensions.actualCellHeight,s=e*this._renderService.dimensions.actualCellWidth;this._compositionView.style.left=s+\"px\",this._compositionView.style.top=i+\"px\",this._compositionView.style.height=t+\"px\",this._compositionView.style.lineHeight=t+\"px\",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+\"px\";const r=this._compositionView.getBoundingClientRect();this._textarea.style.left=s+\"px\",this._textarea.style.top=i+\"px\",this._textarea.style.width=Math.max(r.width,1)+\"px\",this._textarea.style.height=Math.max(r.height,1)+\"px\",this._textarea.style.lineHeight=r.height+\"px\"}e||setTimeout((()=>this.updateCompositionElements(!0)),0)}}};h=s([r(2,o.IBufferService),r(3,o.IOptionsService),r(4,o.ICoreService),r(5,n.IRenderService)],h),t.CompositionHelper=h},9806:(e,t)=>{function i(e,t,i){const s=i.getBoundingClientRect(),r=e.getComputedStyle(i),n=parseInt(r.getPropertyValue(\"padding-left\")),o=parseInt(r.getPropertyValue(\"padding-top\"));return[t.clientX-s.left-n,t.clientY-s.top-o]}Object.defineProperty(t,\"__esModule\",{value:!0}),t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=i,t.getCoords=function(e,t,s,r,n,o,a,h,c){if(!o)return;const l=i(e,t,s);return l?(l[0]=Math.ceil((l[0]+(c?a/2:0))/a),l[1]=Math.ceil(l[1]/h),l[0]=Math.min(Math.max(l[0],1),r+(c?1:0)),l[1]=Math.min(Math.max(l[1],1),n),l):void 0}},9504:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.moveToCellSequence=void 0;const s=i(2584);function r(e,t,i,s){const r=e-n(i,e),a=t-n(i,t),l=Math.abs(r-a)-function(e,t,i){let s=0;const r=e-n(i,e),a=t-n(i,t);for(let n=0;n<Math.abs(r-a);n++){const a=\"A\"===o(e,t)?-1:1,h=i.buffer.lines.get(r+a*n);(null==h?void 0:h.isWrapped)&&s++}return s}(e,t,i);return c(l,h(o(e,t),s))}function n(e,t){let i=0,s=e.buffer.lines.get(t),r=null==s?void 0:s.isWrapped;for(;r&&t>=0&&t<e.rows;)i++,s=e.buffer.lines.get(--t),r=null==s?void 0:s.isWrapped;return i}function o(e,t){return e>t?\"A\":\"B\"}function a(e,t,i,s,r,n){let o=e,a=t,h=\"\";for(;o!==i||a!==s;)o+=r?1:-1,r&&o>n.cols-1?(h+=n.buffer.translateBufferLineToString(a,!1,e,o),o=0,e=0,a++):!r&&o<0&&(h+=n.buffer.translateBufferLineToString(a,!1,0,e+1),o=n.cols-1,e=o,a--);return h+n.buffer.translateBufferLineToString(a,!1,e,o)}function h(e,t){const i=t?\"O\":\"[\";return s.C0.ESC+i+e}function c(e,t){e=Math.floor(e);let i=\"\";for(let s=0;s<e;s++)i+=t;return i}t.moveToCellSequence=function(e,t,i,s){const o=i.buffer.x,l=i.buffer.y;if(!i.buffer.hasScrollback)return function(e,t,i,s,o,l){return 0===r(t,s,o,l).length?\"\":c(a(e,t,e,t-n(o,t),!1,o).length,h(\"D\",l))}(o,l,0,t,i,s)+r(l,t,i,s)+function(e,t,i,s,o,l){let d;d=r(t,s,o,l).length>0?s-n(o,s):t;const _=s,u=function(e,t,i,s,o,a){let h;return h=r(i,s,o,a).length>0?s-n(o,s):t,e<i&&h<=s||e>=i&&h<s?\"C\":\"D\"}(e,t,i,s,o,l);return c(a(e,d,i,_,\"C\"===u,o).length,h(u,l))}(o,l,e,t,i,s);let d;if(l===t)return d=o>e?\"D\":\"C\",c(Math.abs(o-e),h(d,s));d=l>t?\"D\":\"C\";const _=Math.abs(l-t);return c(function(e,t){return t.cols-e}(l>t?e:o,i)+(_-1)*i.cols+1+((l>t?o:e)-1),h(d,s))}},8036:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;const s=i(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=s.isFirefox||s.isLegacyEdge?\"bottom\":\"ideographic\"},1752:(e,t)=>{function i(e){return 57508<=e&&e<=57558}Object.defineProperty(t,\"__esModule\",{value:!0}),t.excludeFromContrastRatioDemands=t.isRestrictedPowerlineGlyph=t.isPowerlineGlyph=t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error(\"value must not be falsy\");return e},t.isPowerlineGlyph=i,t.isRestrictedPowerlineGlyph=function(e){return 57520<=e&&e<=57527},t.excludeFromContrastRatioDemands=function(e){return i(e)||function(e){return 9472<=e&&e<=9631}(e)}},1296:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.DomRenderer=void 0;const n=i(3787),o=i(8036),a=i(844),h=i(4725),c=i(2585),l=i(8460),d=i(8055),_=i(9631),u=\"xterm-dom-renderer-owner-\",f=\"xterm-focus\";let v=1,g=class extends a.Disposable{constructor(e,t,i,s,r,o,a,h,c,l){super(),this._colors=e,this._element=t,this._screenElement=i,this._viewportElement=s,this._linkifier2=r,this._charSizeService=a,this._optionsService=h,this._bufferService=c,this._coreBrowserService=l,this._terminalClass=v++,this._rowElements=[],this._rowContainer=document.createElement(\"div\"),this._rowContainer.classList.add(\"xterm-rows\"),this._rowContainer.style.lineHeight=\"normal\",this._rowContainer.setAttribute(\"aria-hidden\",\"true\"),this._refreshRowElements(this._bufferService.cols,this._bufferService.rows),this._selectionContainer=document.createElement(\"div\"),this._selectionContainer.classList.add(\"xterm-selection\"),this._selectionContainer.setAttribute(\"aria-hidden\",\"true\"),this.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},this._updateDimensions(),this._injectCss(),this._rowFactory=o.createInstance(n.DomRendererRowFactory,document,this._colors),this._element.classList.add(u+this._terminalClass),this._screenElement.appendChild(this._rowContainer),this._screenElement.appendChild(this._selectionContainer),this.register(this._linkifier2.onShowLinkUnderline((e=>this._onLinkHover(e)))),this.register(this._linkifier2.onHideLinkUnderline((e=>this._onLinkLeave(e))))}get onRequestRedraw(){return(new l.EventEmitter).event}dispose(){this._element.classList.remove(u+this._terminalClass),(0,_.removeElementFromParent)(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),super.dispose()}_updateDimensions(){const e=this._coreBrowserService.dpr;this.dimensions.scaledCharWidth=this._charSizeService.width*e,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*e),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/e),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/e),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;for(const e of this._rowElements)e.style.width=`${this.dimensions.canvasWidth}px`,e.style.height=`${this.dimensions.actualCellHeight}px`,e.style.lineHeight=`${this.dimensions.actualCellHeight}px`,e.style.overflow=\"hidden\";this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement(\"style\"),this._screenElement.appendChild(this._dimensionsStyleElement));const t=`${this._terminalSelector} .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: ${this.dimensions.actualCellWidth}px}`;this._dimensionsStyleElement.textContent=t,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=`${this.dimensions.canvasWidth}px`,this._screenElement.style.height=`${this.dimensions.canvasHeight}px`}setColors(e){this._colors=e,this._injectCss()}_injectCss(){this._themeStyleElement||(this._themeStyleElement=document.createElement(\"style\"),this._screenElement.appendChild(this._themeStyleElement));let e=`${this._terminalSelector} .xterm-rows { color: ${this._colors.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px;}`;e+=`${this._terminalSelector} span:not(.${n.BOLD_CLASS}) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.${n.BOLD_CLASS} { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.${n.ITALIC_CLASS} { font-style: italic;}`,e+=\"@keyframes blink_box_shadow_\"+this._terminalClass+\" { 50% {  box-shadow: none; }}\",e+=\"@keyframes blink_block_\"+this._terminalClass+\" { 0% {\"+`  background-color: ${this._colors.cursor.css};`+`  color: ${this._colors.cursorAccent.css}; } 50% {`+`  background-color: ${this._colors.cursorAccent.css};`+`  color: ${this._colors.cursor.css}; }}`,e+=`${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} { outline: 1px solid ${this._colors.cursor.css}; outline-offset: -1px;}${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_BLINK_CLASS}:not(.${n.CURSOR_STYLE_BLOCK_CLASS}) { animation: blink_box_shadow_`+this._terminalClass+\" 1s step-end infinite;}\"+`${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_BLINK_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} { animation: blink_block_`+this._terminalClass+\" 1s step-end infinite;}\"+`${this._terminalSelector} .xterm-rows.xterm-focus .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BLOCK_CLASS} {`+` background-color: ${this._colors.cursor.css};`+` color: ${this._colors.cursorAccent.css};}`+`${this._terminalSelector} .xterm-rows .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_BAR_CLASS} {`+` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;}`+`${this._terminalSelector} .xterm-rows .${n.CURSOR_CLASS}.${n.CURSOR_STYLE_UNDERLINE_CLASS} {`+` box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;}`,e+=`${this._terminalSelector} .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .xterm-selection div { position: absolute; background-color: ${this._colors.selectionBackgroundOpaque.css};}${this._terminalSelector} .xterm-selection div { position: absolute; background-color: ${this._colors.selectionInactiveBackgroundOpaque.css};}`,this._colors.ansi.forEach(((t,i)=>{e+=`${this._terminalSelector} .xterm-fg-${i} { color: ${t.css}; }${this._terminalSelector} .xterm-bg-${i} { background-color: ${t.css}; }`})),e+=`${this._terminalSelector} .xterm-fg-${o.INVERTED_DEFAULT_COLOR} { color: ${d.color.opaque(this._colors.background).css}; }${this._terminalSelector} .xterm-bg-${o.INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`,this._themeStyleElement.textContent=e}onDevicePixelRatioChange(){this._updateDimensions()}_refreshRowElements(e,t){for(let e=this._rowElements.length;e<=t;e++){const e=document.createElement(\"div\");this._rowContainer.appendChild(e),this._rowElements.push(e)}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop())}onResize(e,t){this._refreshRowElements(e,t),this._updateDimensions()}onCharSizeChanged(){this._updateDimensions()}onBlur(){this._rowContainer.classList.remove(f)}onFocus(){this._rowContainer.classList.add(f)}onSelectionChanged(e,t,i){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(this._rowFactory.onSelectionChanged(e,t,i),this.renderRows(0,this._bufferService.rows-1),!e||!t)return;const s=e[1]-this._bufferService.buffer.ydisp,r=t[1]-this._bufferService.buffer.ydisp,n=Math.max(s,0),o=Math.min(r,this._bufferService.rows-1);if(n>=this._bufferService.rows||o<0)return;const a=document.createDocumentFragment();if(i){const i=e[0]>t[0];a.appendChild(this._createSelectionElement(n,i?t[0]:e[0],i?e[0]:t[0],o-n+1))}else{const i=s===n?e[0]:0,h=n===r?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(n,i,h));const c=o-n-1;if(a.appendChild(this._createSelectionElement(n+1,0,this._bufferService.cols,c)),n!==o){const e=r===o?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,0,e))}}this._selectionContainer.appendChild(a)}_createSelectionElement(e,t,i,s=1){const r=document.createElement(\"div\");return r.style.height=s*this.dimensions.actualCellHeight+\"px\",r.style.top=e*this.dimensions.actualCellHeight+\"px\",r.style.left=t*this.dimensions.actualCellWidth+\"px\",r.style.width=this.dimensions.actualCellWidth*(i-t)+\"px\",r}onCursorMove(){}onOptionsChanged(){this._updateDimensions(),this._injectCss()}clear(){for(const e of this._rowElements)e.innerText=\"\"}renderRows(e,t){const i=this._bufferService.buffer.ybase+this._bufferService.buffer.y,s=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),r=this._optionsService.rawOptions.cursorBlink;for(let n=e;n<=t;n++){const e=this._rowElements[n];e.innerText=\"\";const t=n+this._bufferService.buffer.ydisp,o=this._bufferService.buffer.lines.get(t),a=this._optionsService.rawOptions.cursorStyle;e.appendChild(this._rowFactory.createRow(o,t,t===i,a,s,r,this.dimensions.actualCellWidth,this._bufferService.cols))}}get _terminalSelector(){return`.${u}${this._terminalClass}`}_onLinkHover(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0)}_onLinkLeave(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1)}_setCellUnderline(e,t,i,s,r,n){for(;e!==t||i!==s;){const t=this._rowElements[i];if(!t)return;const s=t.children[e];s&&(s.style.textDecoration=n?\"underline\":\"none\"),++e>=r&&(e=0,i++)}}};g=s([r(5,c.IInstantiationService),r(6,h.ICharSizeService),r(7,c.IOptionsService),r(8,c.IBufferService),r(9,h.ICoreBrowserService)],g),t.DomRenderer=g},3787:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.STRIKETHROUGH_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;const n=i(8036),o=i(643),a=i(511),h=i(2585),c=i(8055),l=i(4725),d=i(4269),_=i(1752),u=i(3734);t.BOLD_CLASS=\"xterm-bold\",t.DIM_CLASS=\"xterm-dim\",t.ITALIC_CLASS=\"xterm-italic\",t.UNDERLINE_CLASS=\"xterm-underline\",t.STRIKETHROUGH_CLASS=\"xterm-strikethrough\",t.CURSOR_CLASS=\"xterm-cursor\",t.CURSOR_BLINK_CLASS=\"xterm-cursor-blink\",t.CURSOR_STYLE_BLOCK_CLASS=\"xterm-cursor-block\",t.CURSOR_STYLE_BAR_CLASS=\"xterm-cursor-bar\",t.CURSOR_STYLE_UNDERLINE_CLASS=\"xterm-cursor-underline\";let f=class{constructor(e,t,i,s,r,n,o){this._document=e,this._colors=t,this._characterJoinerService=i,this._optionsService=s,this._coreBrowserService=r,this._coreService=n,this._decorationService=o,this._workCell=new a.CellData,this._columnSelectMode=!1}setColors(e){this._colors=e}onSelectionChanged(e,t,i){this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=i}createRow(e,i,s,r,a,h,l,_){const f=this._document.createDocumentFragment(),g=this._characterJoinerService.getJoinedCharacters(i);let p=0;for(let t=Math.min(e.length,_)-1;t>=0;t--)if(e.loadCell(t,this._workCell).getCode()!==o.NULL_CELL_CODE||s&&t===a){p=t+1;break}for(let _=0;_<p;_++){e.loadCell(_,this._workCell);let p=this._workCell.getWidth();if(0===p)continue;let S=!1,m=_,C=this._workCell;if(g.length>0&&_===g[0][0]){S=!0;const t=g.shift();C=new d.JoinedCellData(this._workCell,e.translateToString(!0,t[0],t[1]),t[1]-t[0]),m=t[1]-1,p=C.getWidth()}const b=this._document.createElement(\"span\");if(p>1&&(b.style.width=l*p+\"px\"),S&&(b.style.display=\"inline\",a>=_&&a<=m&&(a=_)),!this._coreService.isCursorHidden&&s&&_===a)switch(b.classList.add(t.CURSOR_CLASS),h&&b.classList.add(t.CURSOR_BLINK_CLASS),r){case\"bar\":b.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case\"underline\":b.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:b.classList.add(t.CURSOR_STYLE_BLOCK_CLASS)}if(C.isBold()&&b.classList.add(t.BOLD_CLASS),C.isItalic()&&b.classList.add(t.ITALIC_CLASS),C.isDim()&&b.classList.add(t.DIM_CLASS),C.isInvisible()?b.textContent=o.WHITESPACE_CELL_CHAR:b.textContent=C.getChars()||o.WHITESPACE_CELL_CHAR,C.isUnderline()&&(b.classList.add(`${t.UNDERLINE_CLASS}-${C.extended.underlineStyle}`),\" \"===b.textContent&&(b.innerHTML=\"&nbsp;\"),!C.isUnderlineColorDefault()))if(C.isUnderlineColorRGB())b.style.textDecorationColor=`rgb(${u.AttributeData.toColorRGB(C.getUnderlineColor()).join(\",\")})`;else{let e=C.getUnderlineColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&C.isBold()&&e<8&&(e+=8),b.style.textDecorationColor=this._colors.ansi[e].css}C.isStrikethrough()&&b.classList.add(t.STRIKETHROUGH_CLASS);let y=C.getFgColor(),w=C.getFgColorMode(),E=C.getBgColor(),L=C.getBgColorMode();const R=!!C.isInverse();if(R){const e=y;y=E,E=e;const t=w;w=L,L=t}let k,D,A=!1;this._decorationService.forEachDecorationAtCell(_,i,void 0,(e=>{\"top\"!==e.options.layer&&A||(e.backgroundColorRGB&&(L=50331648,E=e.backgroundColorRGB.rgba>>8&16777215,k=e.backgroundColorRGB),e.foregroundColorRGB&&(w=50331648,y=e.foregroundColorRGB.rgba>>8&16777215,D=e.foregroundColorRGB),A=\"top\"===e.options.layer)}));const x=this._isCellInSelection(_,i);let B;switch(A||this._colors.selectionForeground&&x&&(w=50331648,y=this._colors.selectionForeground.rgba>>8&16777215,D=this._colors.selectionForeground),x&&(k=this._coreBrowserService.isFocused?this._colors.selectionBackgroundOpaque:this._colors.selectionInactiveBackgroundOpaque,A=!0),A&&b.classList.add(\"xterm-decoration-top\"),L){case 16777216:case 33554432:B=this._colors.ansi[E],b.classList.add(`xterm-bg-${E}`);break;case 50331648:B=c.rgba.toColor(E>>16,E>>8&255,255&E),this._addStyle(b,`background-color:#${v((E>>>0).toString(16),\"0\",6)}`);break;default:R?(B=this._colors.foreground,b.classList.add(`xterm-bg-${n.INVERTED_DEFAULT_COLOR}`)):B=this._colors.background}switch(k||C.isDim()&&(k=c.color.multiplyOpacity(B,.5)),w){case 16777216:case 33554432:C.isBold()&&y<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(y+=8),this._applyMinimumContrast(b,B,this._colors.ansi[y],C,k,void 0)||b.classList.add(`xterm-fg-${y}`);break;case 50331648:const e=c.rgba.toColor(y>>16&255,y>>8&255,255&y);this._applyMinimumContrast(b,B,e,C,k,D)||this._addStyle(b,`color:#${v(y.toString(16),\"0\",6)}`);break;default:this._applyMinimumContrast(b,B,this._colors.foreground,C,k,void 0)||R&&b.classList.add(`xterm-fg-${n.INVERTED_DEFAULT_COLOR}`)}f.appendChild(b),_=m}return f}_applyMinimumContrast(e,t,i,s,r,n){if(1===this._optionsService.rawOptions.minimumContrastRatio||(0,_.excludeFromContrastRatioDemands)(s.getCode()))return!1;let o;return r||n||(o=this._colors.contrastCache.getColor(t.rgba,i.rgba)),void 0===o&&(o=c.color.ensureContrastRatio(r||t,n||i,this._optionsService.rawOptions.minimumContrastRatio),this._colors.contrastCache.setColor((r||t).rgba,(n||i).rgba,null!=o?o:null)),!!o&&(this._addStyle(e,`color:${o.css}`),!0)}_addStyle(e,t){e.setAttribute(\"style\",`${e.getAttribute(\"style\")||\"\"}${t};`)}_isCellInSelection(e,t){const i=this._selectionStart,s=this._selectionEnd;return!(!i||!s)&&(this._columnSelectMode?i[0]<=s[0]?e>=i[0]&&t>=i[1]&&e<s[0]&&t<=s[1]:e<i[0]&&t>=i[1]&&e>=s[0]&&t<=s[1]:t>i[1]&&t<s[1]||i[1]===s[1]&&t===i[1]&&e>=i[0]&&e<s[0]||i[1]<s[1]&&t===s[1]&&e<s[0]||i[1]<s[1]&&t===i[1]&&e>=i[0])}};function v(e,t,i){for(;e.length<i;)e=t+e;return e}f=s([r(2,l.ICharacterJoinerService),r(3,h.IOptionsService),r(4,l.ICoreBrowserService),r(5,h.ICoreService),r(6,h.IDecorationService)],f),t.DomRendererRowFactory=f},456:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.SelectionModel=void 0,t.SelectionModel=class{constructor(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0}clearSelection(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0}get finalSelectionStart(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart}get finalSelectionEnd(){if(this.isSelectAllActive)return[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]}if(this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[Math.max(e,this.selectionEnd[0]),this.selectionEnd[1]]}return this.selectionEnd}}areSelectionValuesReversed(){const e=this.selectionStart,t=this.selectionEnd;return!(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])}onTrim(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)}}},428:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.CharSizeService=void 0;const n=i(2585),o=i(8460);let a=class{constructor(e,t,i){this._optionsService=i,this.width=0,this.height=0,this._onCharSizeChange=new o.EventEmitter,this._measureStrategy=new h(e,t,this._optionsService)}get hasValidSize(){return this.width>0&&this.height>0}get onCharSizeChange(){return this._onCharSizeChange.event}measure(){const e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire())}};a=s([r(2,n.IOptionsService)],a),t.CharSizeService=a;class h{constructor(e,t,i){this._document=e,this._parentElement=t,this._optionsService=i,this._result={width:0,height:0},this._measureElement=this._document.createElement(\"span\"),this._measureElement.classList.add(\"xterm-char-measure-element\"),this._measureElement.textContent=\"W\",this._measureElement.setAttribute(\"aria-hidden\",\"true\"),this._parentElement.appendChild(this._measureElement)}measure(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=`${this._optionsService.rawOptions.fontSize}px`;const e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result}}},4269:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;const n=i(3734),o=i(643),a=i(511),h=i(2585);class c extends n.AttributeData{constructor(e,t,i){super(),this.content=0,this.combinedData=\"\",this.fg=e.fg,this.bg=e.bg,this.combinedData=t,this._width=i}isCombined(){return 2097152}getWidth(){return this._width}getChars(){return this.combinedData}getCode(){return 2097151}setFromCharData(e){throw new Error(\"not implemented\")}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.JoinedCellData=c;let l=class e{constructor(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new a.CellData}register(e){const t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id}deregister(e){for(let t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return!1}getJoinedCharacters(e){if(0===this._characterJoiners.length)return[];const t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return[];const i=[],s=t.translateToString(!0);let r=0,n=0,a=0,h=t.getFg(0),c=t.getBg(0);for(let e=0;e<t.getTrimmedLength();e++)if(t.loadCell(e,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==h||this._workCell.bg!==c){if(e-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t])}r=e,a=n,h=this._workCell.fg,c=this._workCell.bg}n+=this._workCell.getChars().length||o.WHITESPACE_CELL_CHAR.length}if(this._bufferService.cols-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t])}return i}_getJoinedRanges(t,i,s,r,n){const o=t.substring(i,s);let a=[];try{a=this._characterJoiners[0].handler(o)}catch(e){console.error(e)}for(let t=1;t<this._characterJoiners.length;t++)try{const i=this._characterJoiners[t].handler(o);for(let t=0;t<i.length;t++)e._mergeRanges(a,i[t])}catch(e){console.error(e)}return this._stringRangesToCellRanges(a,r,n),a}_stringRangesToCellRanges(e,t,i){let s=0,r=!1,n=0,a=e[s];if(a){for(let h=i;h<this._bufferService.cols;h++){const i=t.getWidth(h),c=t.getString(h).length||o.WHITESPACE_CELL_CHAR.length;if(0!==i){if(!r&&a[0]<=n&&(a[0]=h,r=!0),a[1]<=n){if(a[1]=h,a=e[++s],!a)break;a[0]<=n?(a[0]=h,r=!0):r=!1}n+=c}}a&&(a[1]=this._bufferService.cols)}}static _mergeRanges(e,t){let i=!1;for(let s=0;s<e.length;s++){const r=e[s];if(i){if(t[1]<=r[0])return e[s-1][1]=t[1],e;if(t[1]<=r[1])return e[s-1][1]=Math.max(t[1],r[1]),e.splice(s,1),e;e.splice(s,1),s--}else{if(t[1]<=r[0])return e.splice(s,0,t),e;if(t[1]<=r[1])return r[0]=Math.min(t[0],r[0]),e;t[0]<r[1]&&(r[0]=Math.min(t[0],r[0]),i=!0)}}return i?e[e.length-1][1]=t[1]:e.push(t),e}};l=s([r(0,h.IBufferService)],l),t.CharacterJoinerService=l},5114:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.CoreBrowserService=void 0,t.CoreBrowserService=class{constructor(e,t){this._textarea=e,this.window=t}get dpr(){return this.window.devicePixelRatio}get isFocused(){return(this._textarea.getRootNode?this._textarea.getRootNode():this._textarea.ownerDocument).activeElement===this._textarea&&this._textarea.ownerDocument.hasFocus()}}},8934:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.MouseService=void 0;const n=i(4725),o=i(9806);let a=class{constructor(e,t){this._renderService=e,this._charSizeService=t}getCoords(e,t,i,s,r){return(0,o.getCoords)(window,e,t,i,s,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,r)}getMouseReportCoords(e,t){const i=(0,o.getCoordsRelativeToElement)(window,e,t);if(!(!this._charSizeService.hasValidSize||i[0]<0||i[1]<0||i[0]>=this._renderService.dimensions.canvasWidth||i[1]>=this._renderService.dimensions.canvasHeight))return{col:Math.floor(i[0]/this._renderService.dimensions.actualCellWidth),row:Math.floor(i[1]/this._renderService.dimensions.actualCellHeight),x:Math.floor(i[0]),y:Math.floor(i[1])}}};a=s([r(0,n.IRenderService),r(1,n.ICharSizeService)],a),t.MouseService=a},3230:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.RenderService=void 0;const n=i(6193),o=i(8460),a=i(844),h=i(5596),c=i(3656),l=i(2585),d=i(4725);let _=class extends a.Disposable{constructor(e,t,i,s,r,a,l,d){if(super(),this._renderer=e,this._rowCount=t,this._charSizeService=r,this._isPaused=!1,this._needsFullRefresh=!1,this._isNextRenderRedrawOnly=!0,this._needsSelectionRefresh=!1,this._canvasWidth=0,this._canvasHeight=0,this._selectionState={start:void 0,end:void 0,columnSelectMode:!1},this._onDimensionsChange=new o.EventEmitter,this._onRenderedViewportChange=new o.EventEmitter,this._onRender=new o.EventEmitter,this._onRefreshRequest=new o.EventEmitter,this.register({dispose:()=>this._renderer.dispose()}),this._renderDebouncer=new n.RenderDebouncer(d.window,((e,t)=>this._renderRows(e,t))),this.register(this._renderDebouncer),this._screenDprMonitor=new h.ScreenDprMonitor(d.window),this._screenDprMonitor.setListener((()=>this.onDevicePixelRatioChange())),this.register(this._screenDprMonitor),this.register(l.onResize((()=>this._fullRefresh()))),this.register(l.buffers.onBufferActivate((()=>{var e;return null===(e=this._renderer)||void 0===e?void 0:e.clear()}))),this.register(s.onOptionChange((()=>this._handleOptionsChanged()))),this.register(this._charSizeService.onCharSizeChange((()=>this.onCharSizeChanged()))),this.register(a.onDecorationRegistered((()=>this._fullRefresh()))),this.register(a.onDecorationRemoved((()=>this._fullRefresh()))),this._renderer.onRequestRedraw((e=>this.refreshRows(e.start,e.end,!0))),this.register((0,c.addDisposableDomListener)(d.window,\"resize\",(()=>this.onDevicePixelRatioChange()))),\"IntersectionObserver\"in d.window){const e=new d.window.IntersectionObserver((e=>this._onIntersectionChange(e[e.length-1])),{threshold:0});e.observe(i),this.register({dispose:()=>e.disconnect()})}}get onDimensionsChange(){return this._onDimensionsChange.event}get onRenderedViewportChange(){return this._onRenderedViewportChange.event}get onRender(){return this._onRender.event}get onRefreshRequest(){return this._onRefreshRequest.event}get dimensions(){return this._renderer.dimensions}_onIntersectionChange(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1)}refreshRows(e,t,i=!1){this._isPaused?this._needsFullRefresh=!0:(i||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount))}_renderRows(e,t){this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:e,end:t}),this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0}resize(e,t){this._rowCount=t,this._fireOnCanvasResize()}_handleOptionsChanged(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize()}_fireOnCanvasResize(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions)}dispose(){super.dispose()}setRenderer(e){this._renderer.dispose(),this._renderer=e,this._renderer.onRequestRedraw((e=>this.refreshRows(e.start,e.end,!0))),this._needsSelectionRefresh=!0,this._fullRefresh()}addRefreshCallback(e){return this._renderDebouncer.addRefreshCallback(e)}_fullRefresh(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1)}clearTextureAtlas(){var e,t;null===(t=null===(e=this._renderer)||void 0===e?void 0:e.clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh()}setColors(e){this._renderer.setColors(e),this._fullRefresh()}onDevicePixelRatioChange(){this._charSizeService.measure(),this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1)}onResize(e,t){this._renderer.onResize(e,t),this._fullRefresh()}onCharSizeChanged(){this._renderer.onCharSizeChanged()}onBlur(){this._renderer.onBlur()}onFocus(){this._renderer.onFocus()}onSelectionChanged(e,t,i){this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=i,this._renderer.onSelectionChanged(e,t,i)}onCursorMove(){this._renderer.onCursorMove()}clear(){this._renderer.clear()}};_=s([r(3,l.IOptionsService),r(4,d.ICharSizeService),r(5,l.IDecorationService),r(6,l.IBufferService),r(7,d.ICoreBrowserService)],_),t.RenderService=_},9312:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.SelectionService=void 0;const n=i(6114),o=i(456),a=i(511),h=i(8460),c=i(4725),l=i(2585),d=i(9806),_=i(9504),u=i(844),f=i(4841),v=String.fromCharCode(160),g=new RegExp(v,\"g\");let p=class extends u.Disposable{constructor(e,t,i,s,r,n,c,l,d){super(),this._element=e,this._screenElement=t,this._linkifier=i,this._bufferService=s,this._coreService=r,this._mouseService=n,this._optionsService=c,this._renderService=l,this._coreBrowserService=d,this._dragScrollAmount=0,this._enabled=!0,this._workCell=new a.CellData,this._mouseDownTimeStamp=0,this._oldHasSelection=!1,this._oldSelectionStart=void 0,this._oldSelectionEnd=void 0,this._onLinuxMouseSelection=this.register(new h.EventEmitter),this._onRedrawRequest=this.register(new h.EventEmitter),this._onSelectionChange=this.register(new h.EventEmitter),this._onRequestScrollLines=this.register(new h.EventEmitter),this._mouseMoveListener=e=>this._onMouseMove(e),this._mouseUpListener=e=>this._onMouseUp(e),this._coreService.onUserInput((()=>{this.hasSelection&&this.clearSelection()})),this._trimListener=this._bufferService.buffer.lines.onTrim((e=>this._onTrim(e))),this.register(this._bufferService.buffers.onBufferActivate((e=>this._onBufferActivate(e)))),this.enable(),this._model=new o.SelectionModel(this._bufferService),this._activeSelectionMode=0}get onLinuxMouseSelection(){return this._onLinuxMouseSelection.event}get onRequestRedraw(){return this._onRedrawRequest.event}get onSelectionChange(){return this._onSelectionChange.event}get onRequestScrollLines(){return this._onRequestScrollLines.event}dispose(){this._removeMouseDownListeners()}reset(){this.clearSelection()}disable(){this.clearSelection(),this._enabled=!1}enable(){this._enabled=!0}get selectionStart(){return this._model.finalSelectionStart}get selectionEnd(){return this._model.finalSelectionEnd}get hasSelection(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return!(!e||!t||e[0]===t[0]&&e[1]===t[1])}get selectionText(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return\"\";const i=this._bufferService.buffer,s=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return\"\";const r=e[0]<t[0]?e[0]:t[0],n=e[0]<t[0]?t[0]:e[0];for(let o=e[1];o<=t[1];o++){const e=i.translateBufferLineToString(o,!0,r,n);s.push(e)}}else{const r=e[1]===t[1]?t[0]:void 0;s.push(i.translateBufferLineToString(e[1],!0,e[0],r));for(let r=e[1]+1;r<=t[1]-1;r++){const e=i.lines.get(r),t=i.translateBufferLineToString(r,!0);(null==e?void 0:e.isWrapped)?s[s.length-1]+=t:s.push(t)}if(e[1]!==t[1]){const e=i.lines.get(t[1]),r=i.translateBufferLineToString(t[1],!0,0,t[0]);e&&e.isWrapped?s[s.length-1]+=r:s.push(r)}}return s.map((e=>e.replace(g,\" \"))).join(n.isWindows?\"\\r\\n\":\"\\n\")}clearSelection(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire()}refresh(e){this._refreshAnimationFrame||(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._refresh()))),n.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText)}_refresh(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})}_isClickInSelection(e){const t=this._getMouseBufferCoords(e),i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return!!(i&&s&&t)&&this._areCoordsInSelection(t,i,s)}isCellInSelection(e,t){const i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return!(!i||!s)&&this._areCoordsInSelection([e,t],i,s)}_areCoordsInSelection(e,t,i){return e[1]>t[1]&&e[1]<i[1]||t[1]===i[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<i[0]||t[1]<i[1]&&e[1]===i[1]&&e[0]<i[0]||t[1]<i[1]&&e[1]===t[1]&&e[0]>=t[0]}_selectWordAtCursor(e,t){var i,s;const r=null===(s=null===(i=this._linkifier.currentLink)||void 0===i?void 0:i.link)||void 0===s?void 0:s.range;if(r)return this._model.selectionStart=[r.start.x-1,r.start.y-1],this._model.selectionStartLength=(0,f.getRangeLength)(r,this._bufferService.cols),this._model.selectionEnd=void 0,!0;const n=this._getMouseBufferCoords(e);return!!n&&(this._selectWordAt(n,t),this._model.selectionEnd=void 0,!0)}selectAll(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire()}selectLines(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire()}_onTrim(e){this._model.onTrim(e)&&this.refresh()}_getMouseBufferCoords(e){const t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t}_getMouseEventScrollAmount(e){let t=(0,d.getCoordsRelativeToElement)(this._coreBrowserService.window,e,this._screenElement)[1];const i=this._renderService.dimensions.canvasHeight;return t>=0&&t<=i?0:(t>i&&(t-=i),t=Math.min(Math.max(t,-50),50),t/=50,t/Math.abs(t)+Math.round(14*t))}shouldForceSelection(e){return n.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey}onMouseDown(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation()}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0)}}_addMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener(\"mousemove\",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener(\"mouseup\",this._mouseUpListener)),this._dragScrollIntervalTimer=this._coreBrowserService.window.setInterval((()=>this._dragScroll()),50)}_removeMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener(\"mousemove\",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener(\"mouseup\",this._mouseUpListener)),this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0}_onIncrementalClick(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e))}_onSingleClick(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),!this._model.selectionStart)return;this._model.selectionEnd=void 0;const t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++}_onDoubleClick(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1)}_onTripleClick(e){const t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]))}shouldColumnSelect(e){return e.altKey&&!(n.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)}_onMouseMove(e){if(e.stopImmediatePropagation(),!this._model.selectionStart)return;const t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),!this._model.selectionEnd)return void this.refresh(!0);2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));const i=this._bufferService.buffer;if(this._model.selectionEnd[1]<i.lines.length){const e=i.lines.get(this._model.selectionEnd[1]);e&&0===e.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0)}_dragScroll(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});const e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh()}}_onMouseUp(e){const t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.rawOptions.altClickMovesCursor){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){const t=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(t&&void 0!==t[0]&&void 0!==t[1]){const e=(0,_.moveToCellSequence)(t[0]-1,t[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(e,!0)}}}else this._fireEventIfSelectionChanged()}_fireEventIfSelectionChanged(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,i=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);i?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,i)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,i)}_fireOnSelectionChange(e,t,i){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=i,this._onSelectionChange.fire()}_onBufferActivate(e){this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((e=>this._onTrim(e)))}_convertViewportColToCharacterIndex(e,t){let i=t[0];for(let s=0;t[0]>=s;s++){const r=e.loadCell(s,this._workCell).getChars().length;0===this._workCell.getWidth()?i--:r>1&&t[0]!==s&&(i+=r-1)}return i}setSelection(e,t,i){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=i,this.refresh(),this._fireEventIfSelectionChanged()}rightClickSelect(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged())}_getWordAt(e,t,i=!0,s=!0){if(e[0]>=this._bufferService.cols)return;const r=this._bufferService.buffer,n=r.lines.get(e[1]);if(!n)return;const o=r.translateBufferLineToString(e[1],!1);let a=this._convertViewportColToCharacterIndex(n,e),h=a;const c=e[0]-a;let l=0,d=0,_=0,u=0;if(\" \"===o.charAt(a)){for(;a>0&&\" \"===o.charAt(a-1);)a--;for(;h<o.length&&\" \"===o.charAt(h+1);)h++}else{let t=e[0],i=e[0];0===n.getWidth(t)&&(l++,t--),2===n.getWidth(i)&&(d++,i++);const s=n.getString(i).length;for(s>1&&(u+=s-1,h+=s-1);t>0&&a>0&&!this._isCharWordSeparator(n.loadCell(t-1,this._workCell));){n.loadCell(t-1,this._workCell);const e=this._workCell.getChars().length;0===this._workCell.getWidth()?(l++,t--):e>1&&(_+=e-1,a-=e-1),a--,t--}for(;i<n.length&&h+1<o.length&&!this._isCharWordSeparator(n.loadCell(i+1,this._workCell));){n.loadCell(i+1,this._workCell);const e=this._workCell.getChars().length;2===this._workCell.getWidth()?(d++,i++):e>1&&(u+=e-1,h+=e-1),h++,i++}}h++;let f=a+c-l+_,v=Math.min(this._bufferService.cols,h-a+l+d-_-u);if(t||\"\"!==o.slice(a,h).trim()){if(i&&0===f&&32!==n.getCodePoint(0)){const t=r.lines.get(e[1]-1);if(t&&n.isWrapped&&32!==t.getCodePoint(this._bufferService.cols-1)){const t=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(t){const e=this._bufferService.cols-t.start;f-=e,v+=e}}}if(s&&f+v===this._bufferService.cols&&32!==n.getCodePoint(this._bufferService.cols-1)){const t=r.lines.get(e[1]+1);if((null==t?void 0:t.isWrapped)&&32!==t.getCodePoint(0)){const t=this._getWordAt([0,e[1]+1],!1,!1,!0);t&&(v+=t.length)}}return{start:f,length:v}}}_selectWordAt(e,t){const i=this._getWordAt(e,t);if(i){for(;i.start<0;)i.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[i.start,e[1]],this._model.selectionStartLength=i.length}}_selectToWordAt(e){const t=this._getWordAt(e,!0);if(t){let i=e[1];for(;t.start<0;)t.start+=this._bufferService.cols,i--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,i++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,i]}}_isCharWordSeparator(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0}_selectLineAt(e){const t=this._bufferService.buffer.getWrappedRangeForLine(e),i={start:{x:0,y:t.first},end:{x:this._bufferService.cols-1,y:t.last}};this._model.selectionStart=[0,t.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0,f.getRangeLength)(i,this._bufferService.cols)}};p=s([r(3,l.IBufferService),r(4,l.ICoreService),r(5,c.IMouseService),r(6,l.IOptionsService),r(7,c.IRenderService),r(8,c.ICoreBrowserService)],p),t.SelectionService=p},4725:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ICharacterJoinerService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;const s=i(8343);t.ICharSizeService=(0,s.createDecorator)(\"CharSizeService\"),t.ICoreBrowserService=(0,s.createDecorator)(\"CoreBrowserService\"),t.IMouseService=(0,s.createDecorator)(\"MouseService\"),t.IRenderService=(0,s.createDecorator)(\"RenderService\"),t.ISelectionService=(0,s.createDecorator)(\"SelectionService\"),t.ICharacterJoinerService=(0,s.createDecorator)(\"CharacterJoinerService\")},6349:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.CircularList=void 0;const s=i(8460);t.CircularList=class{constructor(e){this._maxLength=e,this.onDeleteEmitter=new s.EventEmitter,this.onInsertEmitter=new s.EventEmitter,this.onTrimEmitter=new s.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0}get onDelete(){return this.onDeleteEmitter.event}get onInsert(){return this.onInsertEmitter.event}get onTrim(){return this.onTrimEmitter.event}get maxLength(){return this._maxLength}set maxLength(e){if(this._maxLength===e)return;const t=new Array(e);for(let i=0;i<Math.min(e,this.length);i++)t[i]=this._array[this._getCyclicIndex(i)];this._array=t,this._maxLength=e,this._startIndex=0}get length(){return this._length}set length(e){if(e>this._length)for(let t=this._length;t<e;t++)this._array[t]=void 0;this._length=e}get(e){return this._array[this._getCyclicIndex(e)]}set(e,t){this._array[this._getCyclicIndex(e)]=t}push(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++}recycle(){if(this._length!==this._maxLength)throw new Error(\"Can only recycle when the buffer is full\");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]}get isFull(){return this._length===this._maxLength}pop(){return this._array[this._getCyclicIndex(this._length---1)]}splice(e,t,...i){if(t){for(let i=e;i<this._length-t;i++)this._array[this._getCyclicIndex(i)]=this._array[this._getCyclicIndex(i+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t})}for(let t=this._length-1;t>=e;t--)this._array[this._getCyclicIndex(t+i.length)]=this._array[this._getCyclicIndex(t)];for(let t=0;t<i.length;t++)this._array[this._getCyclicIndex(e+t)]=i[t];if(i.length&&this.onInsertEmitter.fire({index:e,amount:i.length}),this._length+i.length>this._maxLength){const e=this._length+i.length-this._maxLength;this._startIndex+=e,this._length=this._maxLength,this.onTrimEmitter.fire(e)}else this._length+=i.length}trimStart(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e)}shiftElements(e,t,i){if(!(t<=0)){if(e<0||e>=this._length)throw new Error(\"start argument out of range\");if(e+i<0)throw new Error(\"Cannot shift elements in list beyond index 0\");if(i>0){for(let s=t-1;s>=0;s--)this.set(e+s+i,this.get(e+s));const s=e+t+i-this._length;if(s>0)for(this._length+=s;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1)}else for(let s=0;s<t;s++)this.set(e+s+i,this.get(e+s))}}_getCyclicIndex(e){return(this._startIndex+e)%this._maxLength}}},1439:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.clone=void 0,t.clone=function e(t,i=5){if(\"object\"!=typeof t)return t;const s=Array.isArray(t)?[]:{};for(const r in t)s[r]=i<=1?t[r]:t[r]&&e(t[r],i-1);return s}},8055:(e,t)=>{var i,s,r;function n(e){const t=e.toString(16);return t.length<2?\"0\"+t:t}function o(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=void 0,function(e){e.toCss=function(e,t,i,s){return void 0!==s?`#${n(e)}${n(t)}${n(i)}${n(s)}`:`#${n(e)}${n(t)}${n(i)}`},e.toRgba=function(e,t,i,s=255){return(e<<24|t<<16|i<<8|s)>>>0}}(i=t.channels||(t.channels={})),function(e){function t(e,t){const s=Math.round(255*t),[n,o,a]=r.toChannels(e.rgba);return{css:i.toCss(n,o,a,s),rgba:i.toRgba(n,o,a,s)}}e.blend=function(e,t){const s=(255&t.rgba)/255;if(1===s)return{css:t.css,rgba:t.rgba};const r=t.rgba>>24&255,n=t.rgba>>16&255,o=t.rgba>>8&255,a=e.rgba>>24&255,h=e.rgba>>16&255,c=e.rgba>>8&255,l=a+Math.round((r-a)*s),d=h+Math.round((n-h)*s),_=c+Math.round((o-c)*s);return{css:i.toCss(l,d,_),rgba:i.toRgba(l,d,_)}},e.isOpaque=function(e){return 255==(255&e.rgba)},e.ensureContrastRatio=function(e,t,i){const s=r.ensureContrastRatio(e.rgba,t.rgba,i);if(s)return r.toColor(s>>24&255,s>>16&255,s>>8&255)},e.opaque=function(e){const t=(255|e.rgba)>>>0,[s,n,o]=r.toChannels(t);return{css:i.toCss(s,n,o),rgba:t}},e.opacity=t,e.multiplyOpacity=function(e,i){return t(e,(255&e.rgba)*i/255)},e.toColorRGB=function(e){return[e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]}}(t.color||(t.color={})),(t.css||(t.css={})).toColor=function(e){if(e.match(/#[0-9a-f]{3,8}/i))switch(e.length){case 4:{const t=parseInt(e.slice(1,2).repeat(2),16),i=parseInt(e.slice(2,3).repeat(2),16),s=parseInt(e.slice(3,4).repeat(2),16);return r.toColor(t,i,s)}case 5:{const t=parseInt(e.slice(1,2).repeat(2),16),i=parseInt(e.slice(2,3).repeat(2),16),s=parseInt(e.slice(3,4).repeat(2),16),n=parseInt(e.slice(4,5).repeat(2),16);return r.toColor(t,i,s,n)}case 7:return{css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return{css:e,rgba:parseInt(e.slice(1),16)>>>0}}const t=e.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);if(t){const e=parseInt(t[1]),i=parseInt(t[2]),s=parseInt(t[3]),n=Math.round(255*(void 0===t[5]?1:parseFloat(t[5])));return r.toColor(e,i,s,n)}throw new Error(\"css.toColor: Unsupported css format\")},function(e){function t(e,t,i){const s=e/255,r=t/255,n=i/255;return.2126*(s<=.03928?s/12.92:Math.pow((s+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t}(s=t.rgb||(t.rgb={})),function(e){function t(e,t,i){const r=e>>24&255,n=e>>16&255,a=e>>8&255;let h=t>>24&255,c=t>>16&255,l=t>>8&255,d=o(s.relativeLuminance2(h,c,l),s.relativeLuminance2(r,n,a));for(;d<i&&(h>0||c>0||l>0);)h-=Math.max(0,Math.ceil(.1*h)),c-=Math.max(0,Math.ceil(.1*c)),l-=Math.max(0,Math.ceil(.1*l)),d=o(s.relativeLuminance2(h,c,l),s.relativeLuminance2(r,n,a));return(h<<24|c<<16|l<<8|255)>>>0}function r(e,t,i){const r=e>>24&255,n=e>>16&255,a=e>>8&255;let h=t>>24&255,c=t>>16&255,l=t>>8&255,d=o(s.relativeLuminance2(h,c,l),s.relativeLuminance2(r,n,a));for(;d<i&&(h<255||c<255||l<255);)h=Math.min(255,h+Math.ceil(.1*(255-h))),c=Math.min(255,c+Math.ceil(.1*(255-c))),l=Math.min(255,l+Math.ceil(.1*(255-l))),d=o(s.relativeLuminance2(h,c,l),s.relativeLuminance2(r,n,a));return(h<<24|c<<16|l<<8|255)>>>0}e.ensureContrastRatio=function(e,i,n){const a=s.relativeLuminance(e>>8),h=s.relativeLuminance(i>>8);if(o(a,h)<n){if(h<a){const h=t(e,i,n),c=o(a,s.relativeLuminance(h>>8));if(c<n){const t=r(e,i,n);return c>o(a,s.relativeLuminance(t>>8))?h:t}return h}const c=r(e,i,n),l=o(a,s.relativeLuminance(c>>8));if(l<n){const r=t(e,i,n);return l>o(a,s.relativeLuminance(r>>8))?c:r}return c}},e.reduceLuminance=t,e.increaseLuminance=r,e.toChannels=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,s,r){return{css:i.toCss(e,t,s,r),rgba:i.toRgba(e,t,s,r)}}}(r=t.rgba||(t.rgba={})),t.toPaddedHex=n,t.contrastRatio=o},8969:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.CoreTerminal=void 0;const s=i(844),r=i(2585),n=i(4348),o=i(7866),a=i(744),h=i(7302),c=i(6975),l=i(8460),d=i(1753),_=i(3730),u=i(1480),f=i(7994),v=i(9282),g=i(5435),p=i(5981),S=i(2660);let m=!1;class C extends s.Disposable{constructor(e){super(),this._onBinary=new l.EventEmitter,this._onData=new l.EventEmitter,this._onLineFeed=new l.EventEmitter,this._onResize=new l.EventEmitter,this._onScroll=new l.EventEmitter,this._onWriteParsed=new l.EventEmitter,this._instantiationService=new n.InstantiationService,this.optionsService=new h.OptionsService(e),this._instantiationService.setService(r.IOptionsService,this.optionsService),this._bufferService=this.register(this._instantiationService.createInstance(a.BufferService)),this._instantiationService.setService(r.IBufferService,this._bufferService),this._logService=this._instantiationService.createInstance(o.LogService),this._instantiationService.setService(r.ILogService,this._logService),this.coreService=this.register(this._instantiationService.createInstance(c.CoreService,(()=>this.scrollToBottom()))),this._instantiationService.setService(r.ICoreService,this.coreService),this.coreMouseService=this._instantiationService.createInstance(d.CoreMouseService),this._instantiationService.setService(r.ICoreMouseService,this.coreMouseService),this._dirtyRowService=this._instantiationService.createInstance(_.DirtyRowService),this._instantiationService.setService(r.IDirtyRowService,this._dirtyRowService),this.unicodeService=this._instantiationService.createInstance(u.UnicodeService),this._instantiationService.setService(r.IUnicodeService,this.unicodeService),this._charsetService=this._instantiationService.createInstance(f.CharsetService),this._instantiationService.setService(r.ICharsetService,this._charsetService),this._oscLinkService=this._instantiationService.createInstance(S.OscLinkService),this._instantiationService.setService(r.IOscLinkService,this._oscLinkService),this._inputHandler=new g.InputHandler(this._bufferService,this._charsetService,this.coreService,this._dirtyRowService,this._logService,this.optionsService,this._oscLinkService,this.coreMouseService,this.unicodeService),this.register((0,l.forwardEvent)(this._inputHandler.onLineFeed,this._onLineFeed)),this.register(this._inputHandler),this.register((0,l.forwardEvent)(this._bufferService.onResize,this._onResize)),this.register((0,l.forwardEvent)(this.coreService.onData,this._onData)),this.register((0,l.forwardEvent)(this.coreService.onBinary,this._onBinary)),this.register(this.optionsService.onOptionChange((e=>this._updateOptions(e)))),this.register(this._bufferService.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom)}))),this.register(this._inputHandler.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom)}))),this._writeBuffer=new p.WriteBuffer(((e,t)=>this._inputHandler.parse(e,t))),this.register((0,l.forwardEvent)(this._writeBuffer.onWriteParsed,this._onWriteParsed))}get onBinary(){return this._onBinary.event}get onData(){return this._onData.event}get onLineFeed(){return this._onLineFeed.event}get onResize(){return this._onResize.event}get onWriteParsed(){return this._onWriteParsed.event}get onScroll(){return this._onScrollApi||(this._onScrollApi=new l.EventEmitter,this.register(this._onScroll.event((e=>{var t;null===(t=this._onScrollApi)||void 0===t||t.fire(e.position)})))),this._onScrollApi.event}get cols(){return this._bufferService.cols}get rows(){return this._bufferService.rows}get buffers(){return this._bufferService.buffers}get options(){return this.optionsService.options}set options(e){for(const t in e)this.optionsService.options[t]=e[t]}dispose(){var e;this._isDisposed||(super.dispose(),null===(e=this._windowsMode)||void 0===e||e.dispose(),this._windowsMode=void 0)}write(e,t){this._writeBuffer.write(e,t)}writeSync(e,t){this._logService.logLevel<=r.LogLevelEnum.WARN&&!m&&(this._logService.warn(\"writeSync is unreliable and will be removed soon.\"),m=!0),this._writeBuffer.writeSync(e,t)}resize(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,a.MINIMUM_COLS),t=Math.max(t,a.MINIMUM_ROWS),this._bufferService.resize(e,t))}scroll(e,t=!1){this._bufferService.scroll(e,t)}scrollLines(e,t,i){this._bufferService.scrollLines(e,t,i)}scrollPages(e){this._bufferService.scrollPages(e)}scrollToTop(){this._bufferService.scrollToTop()}scrollToBottom(){this._bufferService.scrollToBottom()}scrollToLine(e){this._bufferService.scrollToLine(e)}registerEscHandler(e,t){return this._inputHandler.registerEscHandler(e,t)}registerDcsHandler(e,t){return this._inputHandler.registerDcsHandler(e,t)}registerCsiHandler(e,t){return this._inputHandler.registerCsiHandler(e,t)}registerOscHandler(e,t){return this._inputHandler.registerOscHandler(e,t)}_setup(){this.optionsService.rawOptions.windowsMode&&this._enableWindowsMode()}reset(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset()}_updateOptions(e){var t;switch(e){case\"scrollback\":this.buffers.resize(this.cols,this.rows);break;case\"windowsMode\":this.optionsService.rawOptions.windowsMode?this._enableWindowsMode():(null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)}}_enableWindowsMode(){if(!this._windowsMode){const e=[];e.push(this.onLineFeed(v.updateWindowsModeWrappedState.bind(null,this._bufferService))),e.push(this.registerCsiHandler({final:\"H\"},(()=>((0,v.updateWindowsModeWrappedState)(this._bufferService),!1)))),this._windowsMode={dispose:()=>{for(const t of e)t.dispose()}}}}}t.CoreTerminal=C},8460:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.forwardEvent=t.EventEmitter=void 0,t.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1}get event(){return this._event||(this._event=e=>(this._listeners.push(e),{dispose:()=>{if(!this._disposed)for(let t=0;t<this._listeners.length;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)}})),this._event}fire(e,t){const i=[];for(let e=0;e<this._listeners.length;e++)i.push(this._listeners[e]);for(let s=0;s<i.length;s++)i[s].call(void 0,e,t)}dispose(){this._listeners&&(this._listeners.length=0),this._disposed=!0}},t.forwardEvent=function(e,t){return e((e=>t.fire(e)))}},5435:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;const s=i(2584),r=i(7116),n=i(2015),o=i(844),a=i(482),h=i(8437),c=i(8460),l=i(643),d=i(511),_=i(3734),u=i(2585),f=i(6242),v=i(6351),g=i(5941),p={\"(\":0,\")\":1,\"*\":2,\"+\":3,\"-\":1,\".\":2},S=131072;function m(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return!!t.restoreWin;case 2:return!!t.minimizeWin;case 3:return!!t.setWinPosition;case 4:return!!t.setWinSizePixels;case 5:return!!t.raiseWin;case 6:return!!t.lowerWin;case 7:return!!t.refreshWin;case 8:return!!t.setWinSizeChars;case 9:return!!t.maximizeWin;case 10:return!!t.fullscreenWin;case 11:return!!t.getWinState;case 13:return!!t.getWinPosition;case 14:return!!t.getWinSizePixels;case 15:return!!t.getScreenSizePixels;case 16:return!!t.getCellSizePixels;case 18:return!!t.getWinSizeChars;case 19:return!!t.getScreenSizeChars;case 20:return!!t.getIconTitle;case 21:return!!t.getWinTitle;case 22:return!!t.pushTitle;case 23:return!!t.popTitle;case 24:return!!t.setWinLines}return!1}var C;!function(e){e[e.GET_WIN_SIZE_PIXELS=0]=\"GET_WIN_SIZE_PIXELS\",e[e.GET_CELL_SIZE_PIXELS=1]=\"GET_CELL_SIZE_PIXELS\"}(C=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));class b extends o.Disposable{constructor(e,t,i,o,l,_,u,g,p,S=new n.EscapeSequenceParser){super(),this._bufferService=e,this._charsetService=t,this._coreService=i,this._dirtyRowService=o,this._logService=l,this._optionsService=_,this._oscLinkService=u,this._coreMouseService=g,this._unicodeService=p,this._parser=S,this._parseBuffer=new Uint32Array(4096),this._stringDecoder=new a.StringToUtf32,this._utf8Decoder=new a.Utf8ToUtf32,this._workCell=new d.CellData,this._windowTitle=\"\",this._iconName=\"\",this._windowTitleStack=[],this._iconNameStack=[],this._curAttrData=h.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=h.DEFAULT_ATTR_DATA.clone(),this._onRequestBell=new c.EventEmitter,this._onRequestRefreshRows=new c.EventEmitter,this._onRequestReset=new c.EventEmitter,this._onRequestSendFocus=new c.EventEmitter,this._onRequestSyncScrollBar=new c.EventEmitter,this._onRequestWindowsOptionsReport=new c.EventEmitter,this._onA11yChar=new c.EventEmitter,this._onA11yTab=new c.EventEmitter,this._onCursorMove=new c.EventEmitter,this._onLineFeed=new c.EventEmitter,this._onScroll=new c.EventEmitter,this._onTitleChange=new c.EventEmitter,this._onColor=new c.EventEmitter,this._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},this._specialColors=[256,257,258],this.register(this._parser),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._parser.setCsiHandlerFallback(((e,t)=>{this._logService.debug(\"Unknown CSI code: \",{identifier:this._parser.identToString(e),params:t.toArray()})})),this._parser.setEscHandlerFallback((e=>{this._logService.debug(\"Unknown ESC code: \",{identifier:this._parser.identToString(e)})})),this._parser.setExecuteHandlerFallback((e=>{this._logService.debug(\"Unknown EXECUTE code: \",{code:e})})),this._parser.setOscHandlerFallback(((e,t,i)=>{this._logService.debug(\"Unknown OSC code: \",{identifier:e,action:t,data:i})})),this._parser.setDcsHandlerFallback(((e,t,i)=>{\"HOOK\"===t&&(i=i.toArray()),this._logService.debug(\"Unknown DCS code: \",{identifier:this._parser.identToString(e),action:t,payload:i})})),this._parser.setPrintHandler(((e,t,i)=>this.print(e,t,i))),this._parser.registerCsiHandler({final:\"@\"},(e=>this.insertChars(e))),this._parser.registerCsiHandler({intermediates:\" \",final:\"@\"},(e=>this.scrollLeft(e))),this._parser.registerCsiHandler({final:\"A\"},(e=>this.cursorUp(e))),this._parser.registerCsiHandler({intermediates:\" \",final:\"A\"},(e=>this.scrollRight(e))),this._parser.registerCsiHandler({final:\"B\"},(e=>this.cursorDown(e))),this._parser.registerCsiHandler({final:\"C\"},(e=>this.cursorForward(e))),this._parser.registerCsiHandler({final:\"D\"},(e=>this.cursorBackward(e))),this._parser.registerCsiHandler({final:\"E\"},(e=>this.cursorNextLine(e))),this._parser.registerCsiHandler({final:\"F\"},(e=>this.cursorPrecedingLine(e))),this._parser.registerCsiHandler({final:\"G\"},(e=>this.cursorCharAbsolute(e))),this._parser.registerCsiHandler({final:\"H\"},(e=>this.cursorPosition(e))),this._parser.registerCsiHandler({final:\"I\"},(e=>this.cursorForwardTab(e))),this._parser.registerCsiHandler({final:\"J\"},(e=>this.eraseInDisplay(e,!1))),this._parser.registerCsiHandler({prefix:\"?\",final:\"J\"},(e=>this.eraseInDisplay(e,!0))),this._parser.registerCsiHandler({final:\"K\"},(e=>this.eraseInLine(e,!1))),this._parser.registerCsiHandler({prefix:\"?\",final:\"K\"},(e=>this.eraseInLine(e,!0))),this._parser.registerCsiHandler({final:\"L\"},(e=>this.insertLines(e))),this._parser.registerCsiHandler({final:\"M\"},(e=>this.deleteLines(e))),this._parser.registerCsiHandler({final:\"P\"},(e=>this.deleteChars(e))),this._parser.registerCsiHandler({final:\"S\"},(e=>this.scrollUp(e))),this._parser.registerCsiHandler({final:\"T\"},(e=>this.scrollDown(e))),this._parser.registerCsiHandler({final:\"X\"},(e=>this.eraseChars(e))),this._parser.registerCsiHandler({final:\"Z\"},(e=>this.cursorBackwardTab(e))),this._parser.registerCsiHandler({final:\"`\"},(e=>this.charPosAbsolute(e))),this._parser.registerCsiHandler({final:\"a\"},(e=>this.hPositionRelative(e))),this._parser.registerCsiHandler({final:\"b\"},(e=>this.repeatPrecedingCharacter(e))),this._parser.registerCsiHandler({final:\"c\"},(e=>this.sendDeviceAttributesPrimary(e))),this._parser.registerCsiHandler({prefix:\">\",final:\"c\"},(e=>this.sendDeviceAttributesSecondary(e))),this._parser.registerCsiHandler({final:\"d\"},(e=>this.linePosAbsolute(e))),this._parser.registerCsiHandler({final:\"e\"},(e=>this.vPositionRelative(e))),this._parser.registerCsiHandler({final:\"f\"},(e=>this.hVPosition(e))),this._parser.registerCsiHandler({final:\"g\"},(e=>this.tabClear(e))),this._parser.registerCsiHandler({final:\"h\"},(e=>this.setMode(e))),this._parser.registerCsiHandler({prefix:\"?\",final:\"h\"},(e=>this.setModePrivate(e))),this._parser.registerCsiHandler({final:\"l\"},(e=>this.resetMode(e))),this._parser.registerCsiHandler({prefix:\"?\",final:\"l\"},(e=>this.resetModePrivate(e))),this._parser.registerCsiHandler({final:\"m\"},(e=>this.charAttributes(e))),this._parser.registerCsiHandler({final:\"n\"},(e=>this.deviceStatus(e))),this._parser.registerCsiHandler({prefix:\"?\",final:\"n\"},(e=>this.deviceStatusPrivate(e))),this._parser.registerCsiHandler({intermediates:\"!\",final:\"p\"},(e=>this.softReset(e))),this._parser.registerCsiHandler({intermediates:\" \",final:\"q\"},(e=>this.setCursorStyle(e))),this._parser.registerCsiHandler({final:\"r\"},(e=>this.setScrollRegion(e))),this._parser.registerCsiHandler({final:\"s\"},(e=>this.saveCursor(e))),this._parser.registerCsiHandler({final:\"t\"},(e=>this.windowOptions(e))),this._parser.registerCsiHandler({final:\"u\"},(e=>this.restoreCursor(e))),this._parser.registerCsiHandler({intermediates:\"'\",final:\"}\"},(e=>this.insertColumns(e))),this._parser.registerCsiHandler({intermediates:\"'\",final:\"~\"},(e=>this.deleteColumns(e))),this._parser.registerCsiHandler({intermediates:'\"',final:\"q\"},(e=>this.selectProtected(e))),this._parser.registerCsiHandler({intermediates:\"$\",final:\"p\"},(e=>this.requestMode(e,!0))),this._parser.registerCsiHandler({prefix:\"?\",intermediates:\"$\",final:\"p\"},(e=>this.requestMode(e,!1))),this._parser.setExecuteHandler(s.C0.BEL,(()=>this.bell())),this._parser.setExecuteHandler(s.C0.LF,(()=>this.lineFeed())),this._parser.setExecuteHandler(s.C0.VT,(()=>this.lineFeed())),this._parser.setExecuteHandler(s.C0.FF,(()=>this.lineFeed())),this._parser.setExecuteHandler(s.C0.CR,(()=>this.carriageReturn())),this._parser.setExecuteHandler(s.C0.BS,(()=>this.backspace())),this._parser.setExecuteHandler(s.C0.HT,(()=>this.tab())),this._parser.setExecuteHandler(s.C0.SO,(()=>this.shiftOut())),this._parser.setExecuteHandler(s.C0.SI,(()=>this.shiftIn())),this._parser.setExecuteHandler(s.C1.IND,(()=>this.index())),this._parser.setExecuteHandler(s.C1.NEL,(()=>this.nextLine())),this._parser.setExecuteHandler(s.C1.HTS,(()=>this.tabSet())),this._parser.registerOscHandler(0,new f.OscHandler((e=>(this.setTitle(e),this.setIconName(e),!0)))),this._parser.registerOscHandler(1,new f.OscHandler((e=>this.setIconName(e)))),this._parser.registerOscHandler(2,new f.OscHandler((e=>this.setTitle(e)))),this._parser.registerOscHandler(4,new f.OscHandler((e=>this.setOrReportIndexedColor(e)))),this._parser.registerOscHandler(8,new f.OscHandler((e=>this.setHyperlink(e)))),this._parser.registerOscHandler(10,new f.OscHandler((e=>this.setOrReportFgColor(e)))),this._parser.registerOscHandler(11,new f.OscHandler((e=>this.setOrReportBgColor(e)))),this._parser.registerOscHandler(12,new f.OscHandler((e=>this.setOrReportCursorColor(e)))),this._parser.registerOscHandler(104,new f.OscHandler((e=>this.restoreIndexedColor(e)))),this._parser.registerOscHandler(110,new f.OscHandler((e=>this.restoreFgColor(e)))),this._parser.registerOscHandler(111,new f.OscHandler((e=>this.restoreBgColor(e)))),this._parser.registerOscHandler(112,new f.OscHandler((e=>this.restoreCursorColor(e)))),this._parser.registerEscHandler({final:\"7\"},(()=>this.saveCursor())),this._parser.registerEscHandler({final:\"8\"},(()=>this.restoreCursor())),this._parser.registerEscHandler({final:\"D\"},(()=>this.index())),this._parser.registerEscHandler({final:\"E\"},(()=>this.nextLine())),this._parser.registerEscHandler({final:\"H\"},(()=>this.tabSet())),this._parser.registerEscHandler({final:\"M\"},(()=>this.reverseIndex())),this._parser.registerEscHandler({final:\"=\"},(()=>this.keypadApplicationMode())),this._parser.registerEscHandler({final:\">\"},(()=>this.keypadNumericMode())),this._parser.registerEscHandler({final:\"c\"},(()=>this.fullReset())),this._parser.registerEscHandler({final:\"n\"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:\"o\"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:\"|\"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:\"}\"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:\"~\"},(()=>this.setgLevel(1))),this._parser.registerEscHandler({intermediates:\"%\",final:\"@\"},(()=>this.selectDefaultCharset())),this._parser.registerEscHandler({intermediates:\"%\",final:\"G\"},(()=>this.selectDefaultCharset()));for(const e in r.CHARSETS)this._parser.registerEscHandler({intermediates:\"(\",final:e},(()=>this.selectCharset(\"(\"+e))),this._parser.registerEscHandler({intermediates:\")\",final:e},(()=>this.selectCharset(\")\"+e))),this._parser.registerEscHandler({intermediates:\"*\",final:e},(()=>this.selectCharset(\"*\"+e))),this._parser.registerEscHandler({intermediates:\"+\",final:e},(()=>this.selectCharset(\"+\"+e))),this._parser.registerEscHandler({intermediates:\"-\",final:e},(()=>this.selectCharset(\"-\"+e))),this._parser.registerEscHandler({intermediates:\".\",final:e},(()=>this.selectCharset(\".\"+e))),this._parser.registerEscHandler({intermediates:\"/\",final:e},(()=>this.selectCharset(\"/\"+e)));this._parser.registerEscHandler({intermediates:\"#\",final:\"8\"},(()=>this.screenAlignmentPattern())),this._parser.setErrorHandler((e=>(this._logService.error(\"Parsing error: \",e),e))),this._parser.registerDcsHandler({intermediates:\"$\",final:\"q\"},new v.DcsHandler(((e,t)=>this.requestStatusString(e,t))))}getAttrData(){return this._curAttrData}get onRequestBell(){return this._onRequestBell.event}get onRequestRefreshRows(){return this._onRequestRefreshRows.event}get onRequestReset(){return this._onRequestReset.event}get onRequestSendFocus(){return this._onRequestSendFocus.event}get onRequestSyncScrollBar(){return this._onRequestSyncScrollBar.event}get onRequestWindowsOptionsReport(){return this._onRequestWindowsOptionsReport.event}get onA11yChar(){return this._onA11yChar.event}get onA11yTab(){return this._onA11yTab.event}get onCursorMove(){return this._onCursorMove.event}get onLineFeed(){return this._onLineFeed.event}get onScroll(){return this._onScroll.event}get onTitleChange(){return this._onTitleChange.event}get onColor(){return this._onColor.event}dispose(){super.dispose()}_preserveStack(e,t,i,s){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=i,this._parseStack.position=s}_logSlowResolvingAsync(e){this._logService.logLevel<=u.LogLevelEnum.WARN&&Promise.race([e,new Promise(((e,t)=>setTimeout((()=>t(\"#SLOW_TIMEOUT\")),5e3)))]).catch((e=>{if(\"#SLOW_TIMEOUT\"!==e)throw e;console.warn(\"async parser handler taking longer than 5000 ms\")}))}parse(e,t){let i,s=this._activeBuffer.x,r=this._activeBuffer.y,n=0;const o=this._parseStack.paused;if(o){if(i=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(i),i;s=this._parseStack.cursorStartX,r=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>S&&(n=this._parseStack.position+S)}if(this._logService.logLevel<=u.LogLevelEnum.DEBUG&&this._logService.debug(\"parsing data\"+(\"string\"==typeof e?` \"${e}\"`:` \"${Array.prototype.map.call(e,(e=>String.fromCharCode(e))).join(\"\")}\"`),\"string\"==typeof e?e.split(\"\").map((e=>e.charCodeAt(0))):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<S&&(this._parseBuffer=new Uint32Array(Math.min(e.length,S))),o||this._dirtyRowService.clearRange(),e.length>S)for(let t=n;t<e.length;t+=S){const n=t+S<e.length?t+S:e.length,o=\"string\"==typeof e?this._stringDecoder.decode(e.substring(t,n),this._parseBuffer):this._utf8Decoder.decode(e.subarray(t,n),this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,o))return this._preserveStack(s,r,o,t),this._logSlowResolvingAsync(i),i}else if(!o){const t=\"string\"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,t))return this._preserveStack(s,r,t,0),this._logSlowResolvingAsync(i),i}this._activeBuffer.x===s&&this._activeBuffer.y===r||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end)}print(e,t,i){let s,r;const n=this._charsetService.charset,o=this._optionsService.rawOptions.screenReaderMode,h=this._bufferService.cols,c=this._coreService.decPrivateModes.wraparound,d=this._coreService.modes.insertMode,_=this._curAttrData;let u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowService.markDirty(this._activeBuffer.y),this._activeBuffer.x&&i-t>0&&2===u.getWidth(this._activeBuffer.x-1)&&u.setCellFromCodePoint(this._activeBuffer.x-1,0,1,_.fg,_.bg,_.extended);for(let f=t;f<i;++f){if(s=e[f],r=this._unicodeService.wcwidth(s),s<127&&n){const e=n[String.fromCharCode(s)];e&&(s=e.charCodeAt(0))}if(o&&this._onA11yChar.fire((0,a.stringFromCodePoint)(s)),void 0!==this._currentLinkId&&this._oscLinkService.addLineToLink(this._currentLinkId,this._activeBuffer.ybase+this._activeBuffer.y),r||!this._activeBuffer.x){if(this._activeBuffer.x+r-1>=h)if(c){for(;this._activeBuffer.x<h;)u.setCellFromCodePoint(this._activeBuffer.x++,0,1,_.fg,_.bg,_.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y)}else if(this._activeBuffer.x=h-1,2===r)continue;if(d&&(u.insertCells(this._activeBuffer.x,r,this._activeBuffer.getNullCell(_),_),2===u.getWidth(h-1)&&u.setCellFromCodePoint(h-1,l.NULL_CELL_CODE,l.NULL_CELL_WIDTH,_.fg,_.bg,_.extended)),u.setCellFromCodePoint(this._activeBuffer.x++,s,r,_.fg,_.bg,_.extended),r>0)for(;--r;)u.setCellFromCodePoint(this._activeBuffer.x++,0,0,_.fg,_.bg,_.extended)}else u.getWidth(this._activeBuffer.x-1)?u.addCodepointToCell(this._activeBuffer.x-1,s):u.addCodepointToCell(this._activeBuffer.x-2,s)}i-t>0&&(u.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<h&&i-t>0&&0===u.getWidth(this._activeBuffer.x)&&!u.hasContent(this._activeBuffer.x)&&u.setCellFromCodePoint(this._activeBuffer.x,0,1,_.fg,_.bg,_.extended),this._dirtyRowService.markDirty(this._activeBuffer.y)}registerCsiHandler(e,t){return\"t\"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(e=>!m(e.params[0],this._optionsService.rawOptions.windowOptions)||t(e)))}registerDcsHandler(e,t){return this._parser.registerDcsHandler(e,new v.DcsHandler(t))}registerEscHandler(e,t){return this._parser.registerEscHandler(e,t)}registerOscHandler(e,t){return this._parser.registerOscHandler(e,new f.OscHandler(t))}bell(){return this._onRequestBell.fire(),!0}lineFeed(){return this._dirtyRowService.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowService.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0}carriageReturn(){return this._activeBuffer.x=0,!0}backspace(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;const e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);e.hasWidth(this._activeBuffer.x)&&!e.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--}return this._restrictCursor(),!0}tab(){if(this._activeBuffer.x>=this._bufferService.cols)return!0;const e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0}shiftOut(){return this._charsetService.setgLevel(1),!0}shiftIn(){return this._charsetService.setgLevel(0),!0}_restrictCursor(e=this._bufferService.cols-1){this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowService.markDirty(this._activeBuffer.y)}_setCursor(e,t){this._dirtyRowService.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowService.markDirty(this._activeBuffer.y)}_moveCursor(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t)}cursorUp(e){const t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0}cursorDown(e){const t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0}cursorForward(e){return this._moveCursor(e.params[0]||1,0),!0}cursorBackward(e){return this._moveCursor(-(e.params[0]||1),0),!0}cursorNextLine(e){return this.cursorDown(e),this._activeBuffer.x=0,!0}cursorPrecedingLine(e){return this.cursorUp(e),this._activeBuffer.x=0,!0}cursorCharAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}cursorPosition(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0}charPosAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}hPositionRelative(e){return this._moveCursor(e.params[0]||1,0),!0}linePosAbsolute(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0}vPositionRelative(e){return this._moveCursor(0,e.params[0]||1),!0}hVPosition(e){return this.cursorPosition(e),!0}tabClear(e){const t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0}cursorForwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return!0}cursorBackwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return!0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return!0}selectProtected(e){const t=e.params[0];return 1===t&&(this._curAttrData.bg|=536870912),2!==t&&0!==t||(this._curAttrData.bg&=-536870913),!0}_eraseInBufferLine(e,t,i,s=!1,r=!1){const n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,i,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData(),r),s&&(n.isWrapped=!1)}_resetBufferLine(e,t=!1){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.fill(this._activeBuffer.getNullCell(this._eraseAttrData()),t),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),i.isWrapped=!1}eraseInDisplay(e,t=!1){let i;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(i=this._activeBuffer.y,this._dirtyRowService.markDirty(i),this._eraseInBufferLine(i++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);i<this._bufferService.rows;i++)this._resetBufferLine(i,t);this._dirtyRowService.markDirty(i);break;case 1:for(i=this._activeBuffer.y,this._dirtyRowService.markDirty(i),this._eraseInBufferLine(i,0,this._activeBuffer.x+1,!0,t),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(i+1).isWrapped=!1);i--;)this._resetBufferLine(i,t);this._dirtyRowService.markDirty(0);break;case 2:for(i=this._bufferService.rows,this._dirtyRowService.markDirty(i-1);i--;)this._resetBufferLine(i,t);this._dirtyRowService.markDirty(0);break;case 3:const e=this._activeBuffer.lines.length-this._bufferService.rows;e>0&&(this._activeBuffer.lines.trimStart(e),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-e,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-e,0),this._onScroll.fire(0))}return!0}eraseInLine(e,t=!1){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1,t);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0,t)}return this._dirtyRowService.markDirty(this._activeBuffer.y),!0}insertLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const i=this._activeBuffer.ybase+this._activeBuffer.y,s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-s+1;for(;t--;)this._activeBuffer.lines.splice(r-1,1),this._activeBuffer.lines.splice(i,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}deleteLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const i=this._activeBuffer.ybase+this._activeBuffer.y;let s;for(s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,s=this._bufferService.rows-1+this._activeBuffer.ybase-s;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(s,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}insertChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}deleteChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}scrollUp(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollDown(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(h.DEFAULT_ATTR_DATA));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollLeft(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollRight(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}insertColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}deleteColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return!0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}eraseChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0}repeatPrecedingCharacter(e){if(!this._parser.precedingCodepoint)return!0;const t=e.params[0]||1,i=new Uint32Array(t);for(let e=0;e<t;++e)i[e]=this._parser.precedingCodepoint;return this.print(i,0,i.length),!0}sendDeviceAttributesPrimary(e){return e.params[0]>0||(this._is(\"xterm\")||this._is(\"rxvt-unicode\")||this._is(\"screen\")?this._coreService.triggerDataEvent(s.C0.ESC+\"[?1;2c\"):this._is(\"linux\")&&this._coreService.triggerDataEvent(s.C0.ESC+\"[?6c\")),!0}sendDeviceAttributesSecondary(e){return e.params[0]>0||(this._is(\"xterm\")?this._coreService.triggerDataEvent(s.C0.ESC+\"[>0;276;0c\"):this._is(\"rxvt-unicode\")?this._coreService.triggerDataEvent(s.C0.ESC+\"[>85;95;0c\"):this._is(\"linux\")?this._coreService.triggerDataEvent(e.params[0]+\"c\"):this._is(\"screen\")&&this._coreService.triggerDataEvent(s.C0.ESC+\"[>83;40003;0c\")),!0}_is(e){return 0===(this._optionsService.rawOptions.termName+\"\").indexOf(e)}setMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!0;break;case 20:this._optionsService.options.convertEol=!0}return!0}setModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,r.DEFAULT_CHARSET),this._charsetService.setgCharset(1,r.DEFAULT_CHARSET),this._charsetService.setgCharset(2,r.DEFAULT_CHARSET),this._charsetService.setgCharset(3,r.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:this._optionsService.options.cursorBlink=!0;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug(\"Serial port requested application keypad.\"),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol=\"X10\";break;case 1e3:this._coreMouseService.activeProtocol=\"VT200\";break;case 1002:this._coreMouseService.activeProtocol=\"DRAG\";break;case 1003:this._coreMouseService.activeProtocol=\"ANY\";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug(\"DECSET 1005 not supported (see #2507)\");break;case 1006:this._coreMouseService.activeEncoding=\"SGR\";break;case 1015:this._logService.debug(\"DECSET 1015 not supported (see #2507)\");break;case 1016:this._coreMouseService.activeEncoding=\"SGR_PIXELS\";break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0}return!0}resetMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!1;break;case 20:this._optionsService.options.convertEol=!1}return!0}resetModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:this._optionsService.options.cursorBlink=!1;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug(\"Switching back to normal keypad.\"),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol=\"NONE\";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug(\"DECRST 1005 not supported (see #2507)\");break;case 1006:case 1016:this._coreMouseService.activeEncoding=\"DEFAULT\";break;case 1015:this._logService.debug(\"DECRST 1015 not supported (see #2507)\");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1}return!0}requestMode(e,t){const i=this._coreService.decPrivateModes,{activeProtocol:r,activeEncoding:n}=this._coreMouseService,o=this._coreService,{buffers:a,cols:h}=this._bufferService,{active:c,alt:l}=a,d=this._optionsService.rawOptions,_=e=>e?1:2,u=e.params[0];return f=u,v=t?2===u?3:4===u?_(o.modes.insertMode):12===u?4:20===u?_(d.convertEol):0:1===u?_(i.applicationCursorKeys):3===u?d.windowOptions.setWinLines?80===h?2:132===h?1:0:0:6===u?_(i.origin):7===u?_(i.wraparound):8===u?3:9===u?_(\"X10\"===r):12===u?_(d.cursorBlink):25===u?_(!o.isCursorHidden):45===u?_(i.reverseWraparound):66===u?_(i.applicationKeypad):1e3===u?_(\"VT200\"===r):1002===u?_(\"DRAG\"===r):1003===u?_(\"ANY\"===r):1004===u?_(i.sendFocus):1005===u?4:1006===u?_(\"SGR\"===n):1015===u?4:1016===u?_(\"SGR_PIXELS\"===n):1048===u?1:47===u||1047===u||1049===u?_(c===l):2004===u?_(i.bracketedPasteMode):0,o.triggerDataEvent(`${s.C0.ESC}[${t?\"\":\"?\"}${f};${v}$y`),!0;var f,v}_updateAttrColor(e,t,i,s,r){return 2===t?(e|=50331648,e&=-16777216,e|=_.AttributeData.fromColorRGB([i,s,r])):5===t&&(e&=-50331904,e|=33554432|255&i),e}_extractColor(e,t,i){const s=[0,0,-1,0,0,0];let r=0,n=0;do{if(s[n+r]=e.params[t+n],e.hasSubParams(t+n)){const i=e.getSubParams(t+n);let o=0;do{5===s[1]&&(r=1),s[n+o+1+r]=i[o]}while(++o<i.length&&o+n+1+r<s.length);break}if(5===s[1]&&n+r>=2||2===s[1]&&n+r>=5)break;s[1]&&(r=1)}while(++n+t<e.length&&n+r<s.length);for(let e=2;e<s.length;++e)-1===s[e]&&(s[e]=0);switch(s[0]){case 38:i.fg=this._updateAttrColor(i.fg,s[1],s[3],s[4],s[5]);break;case 48:i.bg=this._updateAttrColor(i.bg,s[1],s[3],s[4],s[5]);break;case 58:i.extended=i.extended.clone(),i.extended.underlineColor=this._updateAttrColor(i.extended.underlineColor,s[1],s[3],s[4],s[5])}return n}_processUnderline(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended()}charAttributes(e){if(1===e.length&&0===e.params[0])return this._curAttrData.fg=h.DEFAULT_ATTR_DATA.fg,this._curAttrData.bg=h.DEFAULT_ATTR_DATA.bg,!0;const t=e.length;let i;const s=this._curAttrData;for(let r=0;r<t;r++)i=e.params[r],i>=30&&i<=37?(s.fg&=-50331904,s.fg|=16777216|i-30):i>=40&&i<=47?(s.bg&=-50331904,s.bg|=16777216|i-40):i>=90&&i<=97?(s.fg&=-50331904,s.fg|=16777224|i-90):i>=100&&i<=107?(s.bg&=-50331904,s.bg|=16777224|i-100):0===i?(s.fg=h.DEFAULT_ATTR_DATA.fg,s.bg=h.DEFAULT_ATTR_DATA.bg):1===i?s.fg|=134217728:3===i?s.bg|=67108864:4===i?(s.fg|=268435456,this._processUnderline(e.hasSubParams(r)?e.getSubParams(r)[0]:1,s)):5===i?s.fg|=536870912:7===i?s.fg|=67108864:8===i?s.fg|=1073741824:9===i?s.fg|=2147483648:2===i?s.bg|=134217728:21===i?this._processUnderline(2,s):22===i?(s.fg&=-134217729,s.bg&=-134217729):23===i?s.bg&=-67108865:24===i?(s.fg&=-268435457,this._processUnderline(0,s)):25===i?s.fg&=-536870913:27===i?s.fg&=-67108865:28===i?s.fg&=-1073741825:29===i?s.fg&=2147483647:39===i?(s.fg&=-67108864,s.fg|=16777215&h.DEFAULT_ATTR_DATA.fg):49===i?(s.bg&=-67108864,s.bg|=16777215&h.DEFAULT_ATTR_DATA.bg):38===i||48===i||58===i?r+=this._extractColor(e,r,s):59===i?(s.extended=s.extended.clone(),s.extended.underlineColor=-1,s.updateExtended()):100===i?(s.fg&=-67108864,s.fg|=16777215&h.DEFAULT_ATTR_DATA.fg,s.bg&=-67108864,s.bg|=16777215&h.DEFAULT_ATTR_DATA.bg):this._logService.debug(\"Unknown SGR attribute: %d.\",i);return!0}deviceStatus(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(`${s.C0.ESC}[0n`);break;case 6:const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${s.C0.ESC}[${e};${t}R`)}return!0}deviceStatusPrivate(e){if(6===e.params[0]){const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${s.C0.ESC}[?${e};${t}R`)}return!0}softReset(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=h.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0}setCursorStyle(e){const t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle=\"block\";break;case 3:case 4:this._optionsService.options.cursorStyle=\"underline\";break;case 5:case 6:this._optionsService.options.cursorStyle=\"bar\"}const i=t%2==1;return this._optionsService.options.cursorBlink=i,!0}setScrollRegion(e){const t=e.params[0]||1;let i;return(e.length<2||(i=e.params[1])>this._bufferService.rows||0===i)&&(i=this._bufferService.rows),i>t&&(this._activeBuffer.scrollTop=t-1,this._activeBuffer.scrollBottom=i-1,this._setCursor(0,0)),!0}windowOptions(e){if(!m(e.params[0],this._optionsService.rawOptions.windowOptions))return!0;const t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(C.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(C.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(`${s.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop())}return!0}saveCursor(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0}restoreCursor(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0}setTitle(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0}setIconName(e){return this._iconName=e,!0}setOrReportIndexedColor(e){const t=[],i=e.split(\";\");for(;i.length>1;){const e=i.shift(),s=i.shift();if(/^\\d+$/.exec(e)){const i=parseInt(e);if(0<=i&&i<256)if(\"?\"===s)t.push({type:0,index:i});else{const e=(0,g.parseColor)(s);e&&t.push({type:1,index:i,color:e})}}}return t.length&&this._onColor.fire(t),!0}setHyperlink(e){const t=e.split(\";\");return!(t.length<2)&&(t[1]?this._createHyperlink(t[0],t[1]):!t[0]&&this._finishHyperlink())}_createHyperlink(e,t){void 0!==this._currentLinkId&&this._finishHyperlink();const i=e.split(\":\");let s;const r=i.findIndex((e=>e.startsWith(\"id=\")));return-1!==r&&(s=i[r].slice(3)||void 0),this._curAttrData.extended=this._curAttrData.extended.clone(),this._currentLinkId=this._oscLinkService.registerLink({id:s,uri:t}),this._curAttrData.extended.urlId=this._currentLinkId,this._curAttrData.updateExtended(),!0}_finishHyperlink(){return this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=0,this._curAttrData.updateExtended(),this._currentLinkId=void 0,!0}_setOrReportSpecialColor(e,t){const i=e.split(\";\");for(let e=0;e<i.length&&!(t>=this._specialColors.length);++e,++t)if(\"?\"===i[e])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else{const s=(0,g.parseColor)(i[e]);s&&this._onColor.fire([{type:1,index:this._specialColors[t],color:s}])}return!0}setOrReportFgColor(e){return this._setOrReportSpecialColor(e,0)}setOrReportBgColor(e){return this._setOrReportSpecialColor(e,1)}setOrReportCursorColor(e){return this._setOrReportSpecialColor(e,2)}restoreIndexedColor(e){if(!e)return this._onColor.fire([{type:2}]),!0;const t=[],i=e.split(\";\");for(let e=0;e<i.length;++e)if(/^\\d+$/.exec(i[e])){const s=parseInt(i[e]);0<=s&&s<256&&t.push({type:2,index:s})}return t.length&&this._onColor.fire(t),!0}restoreFgColor(e){return this._onColor.fire([{type:2,index:256}]),!0}restoreBgColor(e){return this._onColor.fire([{type:2,index:257}]),!0}restoreCursorColor(e){return this._onColor.fire([{type:2,index:258}]),!0}nextLine(){return this._activeBuffer.x=0,this.index(),!0}keypadApplicationMode(){return this._logService.debug(\"Serial port requested application keypad.\"),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0}keypadNumericMode(){return this._logService.debug(\"Switching back to normal keypad.\"),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0}selectDefaultCharset(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,r.DEFAULT_CHARSET),!0}selectCharset(e){return 2!==e.length?(this.selectDefaultCharset(),!0):(\"/\"===e[0]||this._charsetService.setgCharset(p[e[0]],r.CHARSETS[e[1]]||r.DEFAULT_CHARSET),!0)}index(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0}tabSet(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0}reverseIndex(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){const e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom)}else this._activeBuffer.y--,this._restrictCursor();return!0}fullReset(){return this._parser.reset(),this._onRequestReset.fire(),!0}reset(){this._curAttrData=h.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=h.DEFAULT_ATTR_DATA.clone()}_eraseAttrData(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal}setgLevel(e){return this._charsetService.setgLevel(e),!0}screenAlignmentPattern(){const e=new d.CellData;e.content=1<<22|\"E\".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(let t=0;t<this._bufferService.rows;++t){const i=this._activeBuffer.ybase+this._activeBuffer.y+t,s=this._activeBuffer.lines.get(i);s&&(s.fill(e),s.isWrapped=!1)}return this._dirtyRowService.markAllDirty(),this._setCursor(0,0),!0}requestStatusString(e,t){const i=this._bufferService.buffer,r=this._optionsService.rawOptions;return(e=>(this._coreService.triggerDataEvent(`${s.C0.ESC}${e}${s.C0.ESC}\\\\`),!0))('\"q'===e?`P1$r${this._curAttrData.isProtected()?1:0}\"q`:'\"p'===e?'P1$r61;1\"p':\"r\"===e?`P1$r${i.scrollTop+1};${i.scrollBottom+1}r`:\"m\"===e?\"P1$r0m\":\" q\"===e?`P1$r${{block:2,underline:4,bar:6}[r.cursorStyle]-(r.cursorBlink?1:0)} q`:\"P0$r\")}}t.InputHandler=b},844:(e,t)=>{function i(e){for(const t of e)t.dispose();e.length=0}Object.defineProperty(t,\"__esModule\",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.toDisposable=t.Disposable=void 0,t.Disposable=class{constructor(){this._disposables=[],this._isDisposed=!1}dispose(){this._isDisposed=!0;for(const e of this._disposables)e.dispose();this._disposables.length=0}register(e){return this._disposables.push(e),e}unregister(e){const t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1)}},t.toDisposable=function(e){return{dispose:e}},t.disposeArray=i,t.getDisposeArrayDisposable=function(e){return{dispose:()=>i(e)}}},1505:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.FourKeyMap=t.TwoKeyMap=void 0;class i{constructor(){this._data={}}set(e,t,i){this._data[e]||(this._data[e]={}),this._data[e][t]=i}get(e,t){return this._data[e]?this._data[e][t]:void 0}clear(){this._data={}}}t.TwoKeyMap=i,t.FourKeyMap=class{constructor(){this._data=new i}set(e,t,s,r,n){this._data.get(e,t)||this._data.set(e,t,new i),this._data.get(e,t).set(s,r,n)}get(e,t,i,s){var r;return null===(r=this._data.get(e,t))||void 0===r?void 0:r.get(i,s)}clear(){this._data.clear()}}},6114:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.isSafari=t.isLegacyEdge=t.isFirefox=void 0;const i=\"undefined\"==typeof navigator,s=i?\"node\":navigator.userAgent,r=i?\"node\":navigator.platform;t.isFirefox=s.includes(\"Firefox\"),t.isLegacyEdge=s.includes(\"Edge\"),t.isSafari=/^((?!chrome|android).)*safari/i.test(s),t.isMac=[\"Macintosh\",\"MacIntel\",\"MacPPC\",\"Mac68K\"].includes(r),t.isIpad=\"iPad\"===r,t.isIphone=\"iPhone\"===r,t.isWindows=[\"Windows\",\"Win16\",\"Win32\",\"WinCE\"].includes(r),t.isLinux=r.indexOf(\"Linux\")>=0},6106:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.SortedList=void 0;let i=0;t.SortedList=class{constructor(e){this._getKey=e,this._array=[]}clear(){this._array.length=0}insert(e){0!==this._array.length?(i=this._search(this._getKey(e),0,this._array.length-1),this._array.splice(i,0,e)):this._array.push(e)}delete(e){if(0===this._array.length)return!1;const t=this._getKey(e);if(void 0===t)return!1;if(i=this._search(t,0,this._array.length-1),-1===i)return!1;if(this._getKey(this._array[i])!==t)return!1;do{if(this._array[i]===e)return this._array.splice(i,1),!0}while(++i<this._array.length&&this._getKey(this._array[i])===t);return!1}*getKeyIterator(e){if(0!==this._array.length&&(i=this._search(e,0,this._array.length-1),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{yield this._array[i]}while(++i<this._array.length&&this._getKey(this._array[i])===e)}forEachByKey(e,t){if(0!==this._array.length&&(i=this._search(e,0,this._array.length-1),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{t(this._array[i])}while(++i<this._array.length&&this._getKey(this._array[i])===e)}values(){return this._array.values()}_search(e,t,i){if(i<t)return t;let s=Math.floor((t+i)/2);const r=this._getKey(this._array[s]);if(r>e)return this._search(e,t,s-1);if(r<e)return this._search(e,s+1,i);for(;s>0&&this._getKey(this._array[s-1])===e;)s--;return s}}},8273:(e,t)=>{function i(e,t,i=0,s=e.length){if(i>=e.length)return e;i=(e.length+i)%e.length,s=s>=e.length?e.length:(e.length+s)%e.length;for(let r=i;r<s;++r)e[r]=t;return e}Object.defineProperty(t,\"__esModule\",{value:!0}),t.concat=t.fillFallback=t.fill=void 0,t.fill=function(e,t,s,r){return e.fill?e.fill(t,s,r):i(e,t,s,r)},t.fillFallback=i,t.concat=function(e,t){const i=new e.constructor(e.length+t.length);return i.set(e),i.set(t,e.length),i}},9282:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.updateWindowsModeWrappedState=void 0;const s=i(643);t.updateWindowsModeWrappedState=function(e){const t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),i=null==t?void 0:t.get(e.cols-1),r=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);r&&i&&(r.isWrapped=i[s.CHAR_DATA_CODE_INDEX]!==s.NULL_CELL_CODE&&i[s.CHAR_DATA_CODE_INDEX]!==s.WHITESPACE_CELL_CODE)}},3734:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;class i{constructor(){this.fg=0,this.bg=0,this.extended=new s}static toColorRGB(e){return[e>>>16&255,e>>>8&255,255&e]}static fromColorRGB(e){return(255&e[0])<<16|(255&e[1])<<8|255&e[2]}clone(){const e=new i;return e.fg=this.fg,e.bg=this.bg,e.extended=this.extended.clone(),e}isInverse(){return 67108864&this.fg}isBold(){return 134217728&this.fg}isUnderline(){return this.hasExtendedAttrs()&&0!==this.extended.underlineStyle?1:268435456&this.fg}isBlink(){return 536870912&this.fg}isInvisible(){return 1073741824&this.fg}isItalic(){return 67108864&this.bg}isDim(){return 134217728&this.bg}isStrikethrough(){return 2147483648&this.fg}isProtected(){return 536870912&this.bg}getFgColorMode(){return 50331648&this.fg}getBgColorMode(){return 50331648&this.bg}isFgRGB(){return 50331648==(50331648&this.fg)}isBgRGB(){return 50331648==(50331648&this.bg)}isFgPalette(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)}isBgPalette(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)}isFgDefault(){return 0==(50331648&this.fg)}isBgDefault(){return 0==(50331648&this.bg)}isAttributeDefault(){return 0===this.fg&&0===this.bg}getFgColor(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}}getBgColor(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}}hasExtendedAttrs(){return 268435456&this.bg}updateExtended(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456}getUnderlineColor(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()}getUnderlineColorMode(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()}isUnderlineColorRGB(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()}isUnderlineColorPalette(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()}isUnderlineColorDefault(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()}getUnderlineStyle(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0}}t.AttributeData=i;class s{constructor(e=0,t=0){this._ext=0,this._urlId=0,this._ext=e,this._urlId=t}get ext(){return this._urlId?-469762049&this._ext|this.underlineStyle<<26:this._ext}set ext(e){this._ext=e}get underlineStyle(){return this._urlId?5:(469762048&this._ext)>>26}set underlineStyle(e){this._ext&=-469762049,this._ext|=e<<26&469762048}get underlineColor(){return 67108863&this._ext}set underlineColor(e){this._ext&=-67108864,this._ext|=67108863&e}get urlId(){return this._urlId}set urlId(e){this._urlId=e}clone(){return new s(this._ext,this._urlId)}isEmpty(){return 0===this.underlineStyle&&0===this._urlId}}t.ExtendedAttrs=s},9092:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferStringIterator=t.Buffer=t.MAX_BUFFER_SIZE=void 0;const s=i(6349),r=i(8437),n=i(511),o=i(643),a=i(4634),h=i(4863),c=i(7116),l=i(3734);t.MAX_BUFFER_SIZE=4294967295,t.Buffer=class{constructor(e,t,i){this._hasScrollback=e,this._optionsService=t,this._bufferService=i,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=r.DEFAULT_ATTR_DATA.clone(),this.savedCharset=c.DEFAULT_CHARSET,this.markers=[],this._nullCell=n.CellData.fromCharData([0,o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]),this._whitespaceCell=n.CellData.fromCharData([0,o.WHITESPACE_CELL_CHAR,o.WHITESPACE_CELL_WIDTH,o.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}getNullCell(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new l.ExtendedAttrs),this._nullCell}getWhitespaceCell(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new l.ExtendedAttrs),this._whitespaceCell}getBlankLine(e,t){return new r.BufferLine(this._bufferService.cols,this.getNullCell(e),t)}get hasScrollback(){return this._hasScrollback&&this.lines.maxLength>this._rows}get isCursorInViewport(){const e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows}_getCorrectBufferLength(e){if(!this._hasScrollback)return e;const i=e+this._optionsService.rawOptions.scrollback;return i>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:i}fillViewportRows(e){if(0===this.lines.length){void 0===e&&(e=r.DEFAULT_ATTR_DATA);let t=this._rows;for(;t--;)this.lines.push(this.getBlankLine(e))}}clear(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}resize(e,t){const i=this.getNullCell(r.DEFAULT_ATTR_DATA),s=this._getCorrectBufferLength(t);if(s>this.lines.maxLength&&(this.lines.maxLength=s),this.lines.length>0){if(this._cols<e)for(let t=0;t<this.lines.length;t++)this.lines.get(t).resize(e,i);let n=0;if(this._rows<t)for(let s=this._rows;s<t;s++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode?this.lines.push(new r.BufferLine(e,i)):this.ybase>0&&this.lines.length<=this.ybase+this.y+n+1?(this.ybase--,n++,this.ydisp>0&&this.ydisp--):this.lines.push(new r.BufferLine(e,i)));else for(let e=this._rows;e>t;e--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(s<this.lines.maxLength){const e=this.lines.length-s;e>0&&(this.lines.trimStart(e),this.ybase=Math.max(this.ybase-e,0),this.ydisp=Math.max(this.ydisp-e,0),this.savedY=Math.max(this.savedY-e,0)),this.lines.maxLength=s}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),n&&(this.y+=n),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(let t=0;t<this.lines.length;t++)this.lines.get(t).resize(e,i);this._cols=e,this._rows=t}get _isReflowEnabled(){return this._hasScrollback&&!this._optionsService.rawOptions.windowsMode}_reflow(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t))}_reflowLarger(e,t){const i=(0,a.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(r.DEFAULT_ATTR_DATA));if(i.length>0){const s=(0,a.reflowLargerCreateNewLayout)(this.lines,i);(0,a.reflowLargerApplyNewLayout)(this.lines,s.layout),this._reflowLargerAdjustViewport(e,t,s.countRemoved)}}_reflowLargerAdjustViewport(e,t,i){const s=this.getNullCell(r.DEFAULT_ATTR_DATA);let n=i;for(;n-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new r.BufferLine(e,s))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-i,0)}_reflowSmaller(e,t){const i=this.getNullCell(r.DEFAULT_ATTR_DATA),s=[];let n=0;for(let o=this.lines.length-1;o>=0;o--){let h=this.lines.get(o);if(!h||!h.isWrapped&&h.getTrimmedLength()<=e)continue;const c=[h];for(;h.isWrapped&&o>0;)h=this.lines.get(--o),c.unshift(h);const l=this.ybase+this.y;if(l>=o&&l<o+c.length)continue;const d=c[c.length-1].getTrimmedLength(),_=(0,a.reflowSmallerGetNewLineLengths)(c,this._cols,e),u=_.length-c.length;let f;f=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+u):Math.max(0,this.lines.length-this.lines.maxLength+u);const v=[];for(let e=0;e<u;e++){const e=this.getBlankLine(r.DEFAULT_ATTR_DATA,!0);v.push(e)}v.length>0&&(s.push({start:o+c.length+n,newLines:v}),n+=v.length),c.push(...v);let g=_.length-1,p=_[g];0===p&&(g--,p=_[g]);let S=c.length-u-1,m=d;for(;S>=0;){const e=Math.min(m,p);if(void 0===c[g])break;if(c[g].copyCellsFrom(c[S],m-e,p-e,e,!0),p-=e,0===p&&(g--,p=_[g]),m-=e,0===m){S--;const e=Math.max(S,0);m=(0,a.getWrappedLineTrimmedLength)(c,e,this._cols)}}for(let t=0;t<c.length;t++)_[t]<e&&c[t].setCell(_[t],i);let C=u-f;for(;C-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+n)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+u,this.ybase+t-1)}if(s.length>0){const e=[],t=[];for(let e=0;e<this.lines.length;e++)t.push(this.lines.get(e));const i=this.lines.length;let r=i-1,o=0,a=s[o];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+n);let h=0;for(let c=Math.min(this.lines.maxLength-1,i+n-1);c>=0;c--)if(a&&a.start>r+h){for(let e=a.newLines.length-1;e>=0;e--)this.lines.set(c--,a.newLines[e]);c++,e.push({index:r+1,amount:a.newLines.length}),h+=a.newLines.length,a=s[++o]}else this.lines.set(c,t[r--]);let c=0;for(let t=e.length-1;t>=0;t--)e[t].index+=c,this.lines.onInsertEmitter.fire(e[t]),c+=e[t].amount;const l=Math.max(0,i+n-this.lines.maxLength);l>0&&this.lines.onTrimEmitter.fire(l)}}stringIndexToBufferIndex(e,t,i=!1){for(;t;){const s=this.lines.get(e);if(!s)return[-1,-1];const r=i?s.getTrimmedLength():s.length;for(let i=0;i<r;++i)if(s.get(i)[o.CHAR_DATA_WIDTH_INDEX]&&(t-=s.get(i)[o.CHAR_DATA_CHAR_INDEX].length||1),t<0)return[e,i];e++}return[e,0]}translateBufferLineToString(e,t,i=0,s){const r=this.lines.get(e);return r?r.translateToString(t,i,s):\"\"}getWrappedRangeForLine(e){let t=e,i=e;for(;t>0&&this.lines.get(t).isWrapped;)t--;for(;i+1<this.lines.length&&this.lines.get(i+1).isWrapped;)i++;return{first:t,last:i}}setupTabStops(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0}prevStop(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e}nextStop(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e}clearMarkers(e){this._isClearing=!0;for(let t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));this._isClearing=!1}clearAllMarkers(){this._isClearing=!0;for(let e=0;e<this.markers.length;e++)this.markers[e].dispose(),this.markers.splice(e--,1);this._isClearing=!1}addMarker(e){const t=new h.Marker(e);return this.markers.push(t),t.register(this.lines.onTrim((e=>{t.line-=e,t.line<0&&t.dispose()}))),t.register(this.lines.onInsert((e=>{t.line>=e.index&&(t.line+=e.amount)}))),t.register(this.lines.onDelete((e=>{t.line>=e.index&&t.line<e.index+e.amount&&t.dispose(),t.line>e.index&&(t.line-=e.amount)}))),t.register(t.onDispose((()=>this._removeMarker(t)))),t}_removeMarker(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1)}iterator(e,t,i,s,r){return new d(this,e,t,i,s,r)}};class d{constructor(e,t,i=0,s=e.lines.length,r=0,n=0){this._buffer=e,this._trimRight=t,this._startIndex=i,this._endIndex=s,this._startOverscan=r,this._endOverscan=n,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}hasNext(){return this._current<this._endIndex}next(){const e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);let t=\"\";for(let i=e.first;i<=e.last;++i)t+=this._buffer.translateBufferLineToString(i,this._trimRight);return this._current=e.last+1,{range:e,content:t}}}t.BufferStringIterator=d},8437:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;const s=i(482),r=i(643),n=i(511),o=i(3734);t.DEFAULT_ATTR_DATA=Object.freeze(new o.AttributeData);const a={startIndex:0};class h{constructor(e,t,i=!1){this.isWrapped=i,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);const s=t||n.CellData.fromCharData([0,r.NULL_CELL_CHAR,r.NULL_CELL_WIDTH,r.NULL_CELL_CODE]);for(let t=0;t<e;++t)this.setCell(t,s);this.length=e}get(e){const t=this._data[3*e+0],i=2097151&t;return[this._data[3*e+1],2097152&t?this._combined[e]:i?(0,s.stringFromCodePoint)(i):\"\",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):i]}set(e,t){this._data[3*e+1]=t[r.CHAR_DATA_ATTR_INDEX],t[r.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[r.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[r.CHAR_DATA_WIDTH_INDEX]<<22}getWidth(e){return this._data[3*e+0]>>22}hasWidth(e){return 12582912&this._data[3*e+0]}getFg(e){return this._data[3*e+1]}getBg(e){return this._data[3*e+2]}hasContent(e){return 4194303&this._data[3*e+0]}getCodePoint(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t}isCombined(e){return 2097152&this._data[3*e+0]}getString(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0,s.stringFromCodePoint)(2097151&t):\"\"}isProtected(e){return 536870912&this._data[3*e+2]}loadCell(e,t){return a.startIndex=3*e,t.content=this._data[a.startIndex+0],t.fg=this._data[a.startIndex+1],t.bg=this._data[a.startIndex+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t}setCell(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg}setCellFromCodePoint(e,t,i,s,r,n){268435456&r&&(this._extendedAttrs[e]=n),this._data[3*e+0]=t|i<<22,this._data[3*e+1]=s,this._data[3*e+2]=r}addCodepointToCell(e,t){let i=this._data[3*e+0];2097152&i?this._combined[e]+=(0,s.stringFromCodePoint)(t):(2097151&i?(this._combined[e]=(0,s.stringFromCodePoint)(2097151&i)+(0,s.stringFromCodePoint)(t),i&=-2097152,i|=2097152):i=t|1<<22,this._data[3*e+0]=i)}insertCells(e,t,i,s){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length-e){const s=new n.CellData;for(let i=this.length-e-t-1;i>=0;--i)this.setCell(e+t+i,this.loadCell(e+i,s));for(let s=0;s<t;++s)this.setCell(e+s,i)}else for(let t=e;t<this.length;++t)this.setCell(t,i);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs)}deleteCells(e,t,i,s){if(e%=this.length,t<this.length-e){const s=new n.CellData;for(let i=0;i<this.length-e-t;++i)this.setCell(e+i,this.loadCell(e+t+i,s));for(let e=this.length-t;e<this.length;++e)this.setCell(e,i)}else for(let t=e;t<this.length;++t)this.setCell(t,i);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs)}replaceCells(e,t,i,s,r=!1){if(r)for(e&&2===this.getWidth(e-1)&&!this.isProtected(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&!this.isProtected(t)&&this.setCellFromCodePoint(t,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);e<t&&e<this.length;)this.isProtected(e)||this.setCell(e,i),e++;else for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==s?void 0:s.fg)||0,(null==s?void 0:s.bg)||0,(null==s?void 0:s.extended)||new o.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,i)}resize(e,t){if(e!==this.length){if(e>this.length){const i=new Uint32Array(3*e);this.length&&(3*e<this._data.length?i.set(this._data.subarray(0,3*e)):i.set(this._data)),this._data=i;for(let i=this.length;i<e;++i)this.setCell(i,t)}else if(e){const t=new Uint32Array(3*e);t.set(this._data.subarray(0,3*e)),this._data=t;const i=Object.keys(this._combined);for(let t=0;t<i.length;t++){const s=parseInt(i[t],10);s>=e&&delete this._combined[s]}}else this._data=new Uint32Array(0),this._combined={};this.length=e}}fill(e,t=!1){if(t)for(let t=0;t<this.length;++t)this.isProtected(t)||this.setCell(t,e);else{this._combined={},this._extendedAttrs={};for(let t=0;t<this.length;++t)this.setCell(t,e)}}copyFrom(e){this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={};for(const t in e._combined)this._combined[t]=e._combined[t];this._extendedAttrs={};for(const t in e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped}clone(){const e=new h(0);e._data=new Uint32Array(this._data),e.length=this.length;for(const t in this._combined)e._combined[t]=this._combined[t];for(const t in this._extendedAttrs)e._extendedAttrs[t]=this._extendedAttrs[t];return e.isWrapped=this.isWrapped,e}getTrimmedLength(){for(let e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0}copyCellsFrom(e,t,i,s,r){const n=e._data;if(r)for(let r=s-1;r>=0;r--){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r])}else for(let r=0;r<s;r++){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r])}const o=Object.keys(e._combined);for(let s=0;s<o.length;s++){const r=parseInt(o[s],10);r>=t&&(this._combined[r-t+i]=e._combined[r])}}translateToString(e=!1,t=0,i=this.length){e&&(i=Math.min(i,this.getTrimmedLength()));let n=\"\";for(;t<i;){const e=this._data[3*t+0],i=2097151&e;n+=2097152&e?this._combined[t]:i?(0,s.stringFromCodePoint)(i):r.WHITESPACE_CELL_CHAR,t+=e>>22||1}return n}}t.BufferLine=h},4841:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error(`Buffer range end (${e.end.x}, ${e.end.y}) cannot be before start (${e.start.x}, ${e.start.y})`);return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)}},4634:(e,t)=>{function i(e,t,i){if(t===e.length-1)return e[t].getTrimmedLength();const s=!e[t].hasContent(i-1)&&1===e[t].getWidth(i-1),r=2===e[t+1].getWidth(0);return s&&r?i-1:i}Object.defineProperty(t,\"__esModule\",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,s,r,n){const o=[];for(let a=0;a<e.length-1;a++){let h=a,c=e.get(++h);if(!c.isWrapped)continue;const l=[e.get(a)];for(;h<e.length&&c.isWrapped;)l.push(c),c=e.get(++h);if(r>=a&&r<h){a+=l.length-1;continue}let d=0,_=i(l,d,t),u=1,f=0;for(;u<l.length;){const e=i(l,u,t),r=e-f,o=s-_,a=Math.min(r,o);l[d].copyCellsFrom(l[u],f,_,a,!1),_+=a,_===s&&(d++,_=0),f+=a,f===e&&(u++,f=0),0===_&&0!==d&&2===l[d-1].getWidth(s-1)&&(l[d].copyCellsFrom(l[d-1],s-1,_++,1,!1),l[d-1].setCell(s-1,n))}l[d].replaceCells(_,s,n);let v=0;for(let e=l.length-1;e>0&&(e>d||0===l[e].getTrimmedLength());e--)v++;v>0&&(o.push(a+l.length-v),o.push(v)),a+=l.length-1}return o},t.reflowLargerCreateNewLayout=function(e,t){const i=[];let s=0,r=t[s],n=0;for(let o=0;o<e.length;o++)if(r===o){const i=t[++s];e.onDeleteEmitter.fire({index:o-n,amount:i}),o+=i-1,n+=i,r=t[++s]}else i.push(o);return{layout:i,countRemoved:n}},t.reflowLargerApplyNewLayout=function(e,t){const i=[];for(let s=0;s<t.length;s++)i.push(e.get(t[s]));for(let t=0;t<i.length;t++)e.set(t,i[t]);e.length=t.length},t.reflowSmallerGetNewLineLengths=function(e,t,s){const r=[],n=e.map(((s,r)=>i(e,r,t))).reduce(((e,t)=>e+t));let o=0,a=0,h=0;for(;h<n;){if(n-h<s){r.push(n-h);break}o+=s;const c=i(e,a,t);o>c&&(o-=c,a++);const l=2===e[a].getWidth(o-1);l&&o--;const d=l?s-1:s;r.push(d),h+=d}return r},t.getWrappedLineTrimmedLength=i},5295:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferSet=void 0;const s=i(9092),r=i(8460),n=i(844);class o extends n.Disposable{constructor(e,t){super(),this._optionsService=e,this._bufferService=t,this._onBufferActivate=this.register(new r.EventEmitter),this.reset()}get onBufferActivate(){return this._onBufferActivate.event}reset(){this._normal=new s.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new s.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops()}get alt(){return this._alt}get active(){return this._activeBuffer}get normal(){return this._normal}activateNormalBuffer(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clearAllMarkers(),this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}))}activateAltBuffer(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}))}resize(e,t){this._normal.resize(e,t),this._alt.resize(e,t)}setupTabStops(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e)}}t.BufferSet=o},511:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.CellData=void 0;const s=i(482),r=i(643),n=i(3734);class o extends n.AttributeData{constructor(){super(...arguments),this.content=0,this.fg=0,this.bg=0,this.extended=new n.ExtendedAttrs,this.combinedData=\"\"}static fromCharData(e){const t=new o;return t.setFromCharData(e),t}isCombined(){return 2097152&this.content}getWidth(){return this.content>>22}getChars(){return 2097152&this.content?this.combinedData:2097151&this.content?(0,s.stringFromCodePoint)(2097151&this.content):\"\"}getCode(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content}setFromCharData(e){this.fg=e[r.CHAR_DATA_ATTR_INDEX],this.bg=0;let t=!1;if(e[r.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[r.CHAR_DATA_CHAR_INDEX].length){const i=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=i&&i<=56319){const s=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=s&&s<=57343?this.content=1024*(i-55296)+s-56320+65536|e[r.CHAR_DATA_WIDTH_INDEX]<<22:t=!0}else t=!0}else this.content=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[r.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[r.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[r.CHAR_DATA_WIDTH_INDEX]<<22)}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.CellData=o},643:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_EXT=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=256,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.DEFAULT_EXT=0,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR=\"\",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=\" \",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32},4863:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.Marker=void 0;const s=i(8460),r=i(844);class n extends r.Disposable{constructor(e){super(),this.line=e,this._id=n._nextId++,this.isDisposed=!1,this._onDispose=new s.EventEmitter}get id(){return this._id}get onDispose(){return this._onDispose.event}dispose(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),super.dispose())}}t.Marker=n,n._nextId=1},7116:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={\"`\":\"◆\",a:\"▒\",b:\"␉\",c:\"␌\",d:\"␍\",e:\"␊\",f:\"°\",g:\"±\",h:\"␤\",i:\"␋\",j:\"┘\",k:\"┐\",l:\"┌\",m:\"└\",n:\"┼\",o:\"⎺\",p:\"⎻\",q:\"─\",r:\"⎼\",s:\"⎽\",t:\"├\",u:\"┤\",v:\"┴\",w:\"┬\",x:\"│\",y:\"≤\",z:\"≥\",\"{\":\"π\",\"|\":\"≠\",\"}\":\"£\",\"~\":\"·\"},t.CHARSETS.A={\"#\":\"£\"},t.CHARSETS.B=void 0,t.CHARSETS[4]={\"#\":\"£\",\"@\":\"¾\",\"[\":\"ij\",\"\\\\\":\"½\",\"]\":\"|\",\"{\":\"¨\",\"|\":\"f\",\"}\":\"¼\",\"~\":\"´\"},t.CHARSETS.C=t.CHARSETS[5]={\"[\":\"Ä\",\"\\\\\":\"Ö\",\"]\":\"Å\",\"^\":\"Ü\",\"`\":\"é\",\"{\":\"ä\",\"|\":\"ö\",\"}\":\"å\",\"~\":\"ü\"},t.CHARSETS.R={\"#\":\"£\",\"@\":\"à\",\"[\":\"°\",\"\\\\\":\"ç\",\"]\":\"§\",\"{\":\"é\",\"|\":\"ù\",\"}\":\"è\",\"~\":\"¨\"},t.CHARSETS.Q={\"@\":\"à\",\"[\":\"â\",\"\\\\\":\"ç\",\"]\":\"ê\",\"^\":\"î\",\"`\":\"ô\",\"{\":\"é\",\"|\":\"ù\",\"}\":\"è\",\"~\":\"û\"},t.CHARSETS.K={\"@\":\"§\",\"[\":\"Ä\",\"\\\\\":\"Ö\",\"]\":\"Ü\",\"{\":\"ä\",\"|\":\"ö\",\"}\":\"ü\",\"~\":\"ß\"},t.CHARSETS.Y={\"#\":\"£\",\"@\":\"§\",\"[\":\"°\",\"\\\\\":\"ç\",\"]\":\"é\",\"`\":\"ù\",\"{\":\"à\",\"|\":\"ò\",\"}\":\"è\",\"~\":\"ì\"},t.CHARSETS.E=t.CHARSETS[6]={\"@\":\"Ä\",\"[\":\"Æ\",\"\\\\\":\"Ø\",\"]\":\"Å\",\"^\":\"Ü\",\"`\":\"ä\",\"{\":\"æ\",\"|\":\"ø\",\"}\":\"å\",\"~\":\"ü\"},t.CHARSETS.Z={\"#\":\"£\",\"@\":\"§\",\"[\":\"¡\",\"\\\\\":\"Ñ\",\"]\":\"¿\",\"{\":\"°\",\"|\":\"ñ\",\"}\":\"ç\"},t.CHARSETS.H=t.CHARSETS[7]={\"@\":\"É\",\"[\":\"Ä\",\"\\\\\":\"Ö\",\"]\":\"Å\",\"^\":\"Ü\",\"`\":\"é\",\"{\":\"ä\",\"|\":\"ö\",\"}\":\"å\",\"~\":\"ü\"},t.CHARSETS[\"=\"]={\"#\":\"ù\",\"@\":\"à\",\"[\":\"é\",\"\\\\\":\"ç\",\"]\":\"ê\",\"^\":\"î\",_:\"è\",\"`\":\"ô\",\"{\":\"ä\",\"|\":\"ö\",\"}\":\"ü\",\"~\":\"û\"}},2584:(e,t)=>{var i,s;Object.defineProperty(t,\"__esModule\",{value:!0}),t.C1_ESCAPED=t.C1=t.C0=void 0,function(e){e.NUL=\"\\0\",e.SOH=\"\u0001\",e.STX=\"\u0002\",e.ETX=\"\u0003\",e.EOT=\"\u0004\",e.ENQ=\"\u0005\",e.ACK=\"\u0006\",e.BEL=\"\u0007\",e.BS=\"\\b\",e.HT=\"\\t\",e.LF=\"\\n\",e.VT=\"\\v\",e.FF=\"\\f\",e.CR=\"\\r\",e.SO=\"\u000e\",e.SI=\"\u000f\",e.DLE=\"\u0010\",e.DC1=\"\u0011\",e.DC2=\"\u0012\",e.DC3=\"\u0013\",e.DC4=\"\u0014\",e.NAK=\"\u0015\",e.SYN=\"\u0016\",e.ETB=\"\u0017\",e.CAN=\"\u0018\",e.EM=\"\u0019\",e.SUB=\"\u001a\",e.ESC=\"\u001b\",e.FS=\"\u001c\",e.GS=\"\u001d\",e.RS=\"\u001e\",e.US=\"\u001f\",e.SP=\" \",e.DEL=\"\"}(i=t.C0||(t.C0={})),(s=t.C1||(t.C1={})).PAD=\"\",s.HOP=\"\",s.BPH=\"\",s.NBH=\"\",s.IND=\"\",s.NEL=\"\",s.SSA=\"\",s.ESA=\"\",s.HTS=\"\",s.HTJ=\"\",s.VTS=\"\",s.PLD=\"\",s.PLU=\"\",s.RI=\"\",s.SS2=\"\",s.SS3=\"\",s.DCS=\"\",s.PU1=\"\",s.PU2=\"\",s.STS=\"\",s.CCH=\"\",s.MW=\"\",s.SPA=\"\",s.EPA=\"\",s.SOS=\"\",s.SGCI=\"\",s.SCI=\"\",s.CSI=\"\",s.ST=\"\",s.OSC=\"\",s.PM=\"\",s.APC=\"\",(t.C1_ESCAPED||(t.C1_ESCAPED={})).ST=`${i.ESC}\\\\`},7399:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.evaluateKeyboardEvent=void 0;const s=i(2584),r={48:[\"0\",\")\"],49:[\"1\",\"!\"],50:[\"2\",\"@\"],51:[\"3\",\"#\"],52:[\"4\",\"$\"],53:[\"5\",\"%\"],54:[\"6\",\"^\"],55:[\"7\",\"&\"],56:[\"8\",\"*\"],57:[\"9\",\"(\"],186:[\";\",\":\"],187:[\"=\",\"+\"],188:[\",\",\"<\"],189:[\"-\",\"_\"],190:[\".\",\">\"],191:[\"/\",\"?\"],192:[\"`\",\"~\"],219:[\"[\",\"{\"],220:[\"\\\\\",\"|\"],221:[\"]\",\"}\"],222:[\"'\",'\"']};t.evaluateKeyboardEvent=function(e,t,i,n){const o={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:\"UIKeyInputUpArrow\"===e.key?o.key=t?s.C0.ESC+\"OA\":s.C0.ESC+\"[A\":\"UIKeyInputLeftArrow\"===e.key?o.key=t?s.C0.ESC+\"OD\":s.C0.ESC+\"[D\":\"UIKeyInputRightArrow\"===e.key?o.key=t?s.C0.ESC+\"OC\":s.C0.ESC+\"[C\":\"UIKeyInputDownArrow\"===e.key&&(o.key=t?s.C0.ESC+\"OB\":s.C0.ESC+\"[B\");break;case 8:if(e.altKey){o.key=s.C0.ESC+s.C0.DEL;break}o.key=s.C0.DEL;break;case 9:if(e.shiftKey){o.key=s.C0.ESC+\"[Z\";break}o.key=s.C0.HT,o.cancel=!0;break;case 13:o.key=e.altKey?s.C0.ESC+s.C0.CR:s.C0.CR,o.cancel=!0;break;case 27:o.key=s.C0.ESC,e.altKey&&(o.key=s.C0.ESC+s.C0.ESC),o.cancel=!0;break;case 37:if(e.metaKey)break;a?(o.key=s.C0.ESC+\"[1;\"+(a+1)+\"D\",o.key===s.C0.ESC+\"[1;3D\"&&(o.key=s.C0.ESC+(i?\"b\":\"[1;5D\"))):o.key=t?s.C0.ESC+\"OD\":s.C0.ESC+\"[D\";break;case 39:if(e.metaKey)break;a?(o.key=s.C0.ESC+\"[1;\"+(a+1)+\"C\",o.key===s.C0.ESC+\"[1;3C\"&&(o.key=s.C0.ESC+(i?\"f\":\"[1;5C\"))):o.key=t?s.C0.ESC+\"OC\":s.C0.ESC+\"[C\";break;case 38:if(e.metaKey)break;a?(o.key=s.C0.ESC+\"[1;\"+(a+1)+\"A\",i||o.key!==s.C0.ESC+\"[1;3A\"||(o.key=s.C0.ESC+\"[1;5A\")):o.key=t?s.C0.ESC+\"OA\":s.C0.ESC+\"[A\";break;case 40:if(e.metaKey)break;a?(o.key=s.C0.ESC+\"[1;\"+(a+1)+\"B\",i||o.key!==s.C0.ESC+\"[1;3B\"||(o.key=s.C0.ESC+\"[1;5B\")):o.key=t?s.C0.ESC+\"OB\":s.C0.ESC+\"[B\";break;case 45:e.shiftKey||e.ctrlKey||(o.key=s.C0.ESC+\"[2~\");break;case 46:o.key=a?s.C0.ESC+\"[3;\"+(a+1)+\"~\":s.C0.ESC+\"[3~\";break;case 36:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"H\":t?s.C0.ESC+\"OH\":s.C0.ESC+\"[H\";break;case 35:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"F\":t?s.C0.ESC+\"OF\":s.C0.ESC+\"[F\";break;case 33:e.shiftKey?o.type=2:e.ctrlKey?o.key=s.C0.ESC+\"[5;\"+(a+1)+\"~\":o.key=s.C0.ESC+\"[5~\";break;case 34:e.shiftKey?o.type=3:e.ctrlKey?o.key=s.C0.ESC+\"[6;\"+(a+1)+\"~\":o.key=s.C0.ESC+\"[6~\";break;case 112:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"P\":s.C0.ESC+\"OP\";break;case 113:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"Q\":s.C0.ESC+\"OQ\";break;case 114:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"R\":s.C0.ESC+\"OR\";break;case 115:o.key=a?s.C0.ESC+\"[1;\"+(a+1)+\"S\":s.C0.ESC+\"OS\";break;case 116:o.key=a?s.C0.ESC+\"[15;\"+(a+1)+\"~\":s.C0.ESC+\"[15~\";break;case 117:o.key=a?s.C0.ESC+\"[17;\"+(a+1)+\"~\":s.C0.ESC+\"[17~\";break;case 118:o.key=a?s.C0.ESC+\"[18;\"+(a+1)+\"~\":s.C0.ESC+\"[18~\";break;case 119:o.key=a?s.C0.ESC+\"[19;\"+(a+1)+\"~\":s.C0.ESC+\"[19~\";break;case 120:o.key=a?s.C0.ESC+\"[20;\"+(a+1)+\"~\":s.C0.ESC+\"[20~\";break;case 121:o.key=a?s.C0.ESC+\"[21;\"+(a+1)+\"~\":s.C0.ESC+\"[21~\";break;case 122:o.key=a?s.C0.ESC+\"[23;\"+(a+1)+\"~\":s.C0.ESC+\"[23~\";break;case 123:o.key=a?s.C0.ESC+\"[24;\"+(a+1)+\"~\":s.C0.ESC+\"[24~\";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(i&&!n||!e.altKey||e.metaKey)!i||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?o.key=e.key:e.key&&e.ctrlKey&&(\"_\"===e.key&&(o.key=s.C0.US),\"@\"===e.key&&(o.key=s.C0.NUL)):65===e.keyCode&&(o.type=1);else{const t=r[e.keyCode],i=null==t?void 0:t[e.shiftKey?1:0];if(i)o.key=s.C0.ESC+i;else if(e.keyCode>=65&&e.keyCode<=90){const t=e.ctrlKey?e.keyCode-64:e.keyCode+32;let i=String.fromCharCode(t);e.shiftKey&&(i=i.toUpperCase()),o.key=s.C0.ESC+i}else if(\"Dead\"===e.key&&e.code.startsWith(\"Key\")){let t=e.code.slice(3,4);e.shiftKey||(t=t.toLowerCase()),o.key=s.C0.ESC+t,o.cancel=!0}}else e.keyCode>=65&&e.keyCode<=90?o.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?o.key=s.C0.NUL:e.keyCode>=51&&e.keyCode<=55?o.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?o.key=s.C0.DEL:219===e.keyCode?o.key=s.C0.ESC:220===e.keyCode?o.key=s.C0.FS:221===e.keyCode&&(o.key=s.C0.GS)}return o}},482:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t=0,i=e.length){let s=\"\";for(let r=t;r<i;++r){let t=e[r];t>65535?(t-=65536,s+=String.fromCharCode(55296+(t>>10))+String.fromCharCode(t%1024+56320)):s+=String.fromCharCode(t)}return s},t.StringToUtf32=class{constructor(){this._interim=0}clear(){this._interim=0}decode(e,t){const i=e.length;if(!i)return 0;let s=0,r=0;if(this._interim){const i=e.charCodeAt(r++);56320<=i&&i<=57343?t[s++]=1024*(this._interim-55296)+i-56320+65536:(t[s++]=this._interim,t[s++]=i),this._interim=0}for(let n=r;n<i;++n){const r=e.charCodeAt(n);if(55296<=r&&r<=56319){if(++n>=i)return this._interim=r,s;const o=e.charCodeAt(n);56320<=o&&o<=57343?t[s++]=1024*(r-55296)+o-56320+65536:(t[s++]=r,t[s++]=o)}else 65279!==r&&(t[s++]=r)}return s}},t.Utf8ToUtf32=class{constructor(){this.interim=new Uint8Array(3)}clear(){this.interim.fill(0)}decode(e,t){const i=e.length;if(!i)return 0;let s,r,n,o,a=0,h=0,c=0;if(this.interim[0]){let s=!1,r=this.interim[0];r&=192==(224&r)?31:224==(240&r)?15:7;let n,o=0;for(;(n=63&this.interim[++o])&&o<4;)r<<=6,r|=n;const h=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,l=h-o;for(;c<l;){if(c>=i)return 0;if(n=e[c++],128!=(192&n)){c--,s=!0;break}this.interim[o++]=n,r<<=6,r|=63&n}s||(2===h?r<128?c--:t[a++]=r:3===h?r<2048||r>=55296&&r<=57343||65279===r||(t[a++]=r):r<65536||r>1114111||(t[a++]=r)),this.interim.fill(0)}const l=i-4;let d=c;for(;d<i;){for(;!(!(d<l)||128&(s=e[d])||128&(r=e[d+1])||128&(n=e[d+2])||128&(o=e[d+3]));)t[a++]=s,t[a++]=r,t[a++]=n,t[a++]=o,d+=4;if(s=e[d++],s<128)t[a++]=s;else if(192==(224&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(h=(31&s)<<6|63&r,h<128){d--;continue}t[a++]=h}else if(224==(240&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(h=(15&s)<<12|(63&r)<<6|63&n,h<2048||h>=55296&&h<=57343||65279===h)continue;t[a++]=h}else if(240==(248&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,this.interim[2]=n,a;if(o=e[d++],128!=(192&o)){d--;continue}if(h=(7&s)<<18|(63&r)<<12|(63&n)<<6|63&o,h<65536||h>1114111)continue;t[a++]=h}}return a}}},225:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.UnicodeV6=void 0;const s=i(8273),r=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],n=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];let o;t.UnicodeV6=class{constructor(){if(this.version=\"6\",!o){o=new Uint8Array(65536),(0,s.fill)(o,1),o[0]=0,(0,s.fill)(o,0,1,32),(0,s.fill)(o,0,127,160),(0,s.fill)(o,2,4352,4448),o[9001]=2,o[9002]=2,(0,s.fill)(o,2,11904,42192),o[12351]=1,(0,s.fill)(o,2,44032,55204),(0,s.fill)(o,2,63744,64256),(0,s.fill)(o,2,65040,65050),(0,s.fill)(o,2,65072,65136),(0,s.fill)(o,2,65280,65377),(0,s.fill)(o,2,65504,65511);for(let e=0;e<r.length;++e)(0,s.fill)(o,0,r[e][0],r[e][1]+1)}}wcwidth(e){return e<32?0:e<127?1:e<65536?o[e]:function(e,t){let i,s=0,r=t.length-1;if(e<t[0][0]||e>t[r][1])return!1;for(;r>=s;)if(i=s+r>>1,e>t[i][1])s=i+1;else{if(!(e<t[i][0]))return!0;r=i-1}return!1}(e,n)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1}}},5981:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.WriteBuffer=void 0;const s=i(8460),r=\"undefined\"==typeof queueMicrotask?e=>{Promise.resolve().then(e)}:queueMicrotask;t.WriteBuffer=class{constructor(e){this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._onWriteParsed=new s.EventEmitter}get onWriteParsed(){return this._onWriteParsed.event}writeSync(e,t){if(void 0!==t&&this._syncCalls>t)return void(this._syncCalls=0);if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,this._isSyncWriting)return;let i;for(this._isSyncWriting=!0;i=this._writeBuffer.shift();){this._action(i);const e=this._callbacks.shift();e&&e()}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0}write(e,t){if(this._pendingData>5e7)throw new Error(\"write data discarded, use flow control to avoid losing data\");this._writeBuffer.length||(this._bufferOffset=0,setTimeout((()=>this._innerWrite()))),this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t)}_innerWrite(e=0,t=!0){const i=e||Date.now();for(;this._writeBuffer.length>this._bufferOffset;){const e=this._writeBuffer[this._bufferOffset],s=this._action(e,t);if(s){const e=e=>Date.now()-i>=12?setTimeout((()=>this._innerWrite(0,e))):this._innerWrite(i,e);return void s.catch((e=>(r((()=>{throw e})),Promise.resolve(!1)))).then(e)}const n=this._callbacks[this._bufferOffset];if(n&&n(),this._bufferOffset++,this._pendingData-=e.length,Date.now()-i>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((()=>this._innerWrite()))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire()}}},5941:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.toRgbString=t.parseColor=void 0;const i=/^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/,s=/^[\\da-f]+$/;function r(e,t){const i=e.toString(16),s=i.length<2?\"0\"+i:i;switch(t){case 4:return i[0];case 8:return s;case 12:return(s+s).slice(0,3);default:return s+s}}t.parseColor=function(e){if(!e)return;let t=e.toLowerCase();if(0===t.indexOf(\"rgb:\")){t=t.slice(4);const e=i.exec(t);if(e){const t=e[1]?15:e[4]?255:e[7]?4095:65535;return[Math.round(parseInt(e[1]||e[4]||e[7]||e[10],16)/t*255),Math.round(parseInt(e[2]||e[5]||e[8]||e[11],16)/t*255),Math.round(parseInt(e[3]||e[6]||e[9]||e[12],16)/t*255)]}}else if(0===t.indexOf(\"#\")&&(t=t.slice(1),s.exec(t)&&[3,6,9,12].includes(t.length))){const e=t.length/3,i=[0,0,0];for(let s=0;s<3;++s){const r=parseInt(t.slice(e*s,e*s+e),16);i[s]=1===e?r<<4:2===e?r:3===e?r>>4:r>>8}return i}},t.toRgbString=function(e,t=16){const[i,s,n]=e;return`rgb:${r(i,t)}/${r(s,t)}/${r(n,t)}`}},5770:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7},6351:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.DcsHandler=t.DcsParser=void 0;const s=i(482),r=i(8742),n=i(5770),o=[];t.DcsParser=class{constructor(){this._handlers=Object.create(null),this._active=o,this._ident=0,this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=o}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1)}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e]}setHandlerFallback(e){this._handlerFb=e}reset(){if(this._active.length)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=o,this._ident=0}hook(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||o,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].hook(t);else this._handlerFb(this._ident,\"HOOK\",t)}put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._ident,\"PUT\",(0,s.utf32ToString)(e,t,i))}unhook(e,t=!0){if(this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].unhook(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--}for(;s>=0;s--)if(i=this._active[s].unhook(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._ident,\"UNHOOK\",e);this._active=o,this._ident=0}};const a=new r.Params;a.addParam(0),t.DcsHandler=class{constructor(e){this._handler=e,this._data=\"\",this._params=a,this._hitLimit=!1}hook(e){this._params=e.length>1||e.params[0]?e.clone():a,this._data=\"\",this._hitLimit=!1}put(e,t,i){this._hitLimit||(this._data+=(0,s.utf32ToString)(e,t,i),this._data.length>n.PAYLOAD_LIMIT&&(this._data=\"\",this._hitLimit=!0))}unhook(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data,this._params),t instanceof Promise))return t.then((e=>(this._params=a,this._data=\"\",this._hitLimit=!1,e)));return this._params=a,this._data=\"\",this._hitLimit=!1,t}}},2015:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;const s=i(844),r=i(8273),n=i(8742),o=i(6242),a=i(6351);class h{constructor(e){this.table=new Uint8Array(e)}setDefault(e,t){(0,r.fill)(this.table,e<<4|t)}add(e,t,i,s){this.table[t<<8|e]=i<<4|s}addMany(e,t,i,s){for(let r=0;r<e.length;r++)this.table[t<<8|e[r]]=i<<4|s}}t.TransitionTable=h;const c=160;t.VT500_TRANSITION_TABLE=function(){const e=new h(4095),t=Array.apply(null,Array(256)).map(((e,t)=>t)),i=(e,i)=>t.slice(e,i),s=i(32,127),r=i(0,24);r.push(25),r.push.apply(r,i(28,32));const n=i(0,14);let o;for(o in e.setDefault(1,0),e.addMany(s,0,2,0),n)e.addMany([24,26,153,154],o,3,0),e.addMany(i(128,144),o,3,0),e.addMany(i(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(r,0,3,0),e.addMany(r,1,3,1),e.add(127,1,0,1),e.addMany(r,8,0,8),e.addMany(r,3,3,3),e.add(127,3,0,3),e.addMany(r,4,3,4),e.add(127,4,0,4),e.addMany(r,6,3,6),e.addMany(r,5,3,5),e.add(127,5,0,5),e.addMany(r,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(s,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(i(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(s,7,0,7),e.addMany(r,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(i(64,127),3,7,0),e.addMany(i(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(i(48,60),4,8,4),e.addMany(i(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(i(32,64),6,0,6),e.add(127,6,0,6),e.addMany(i(64,127),6,0,0),e.addMany(i(32,48),3,9,5),e.addMany(i(32,48),5,9,5),e.addMany(i(48,64),5,0,6),e.addMany(i(64,127),5,7,0),e.addMany(i(32,48),4,9,5),e.addMany(i(32,48),1,9,2),e.addMany(i(32,48),2,9,2),e.addMany(i(48,127),2,10,0),e.addMany(i(48,80),1,10,0),e.addMany(i(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(i(96,127),1,10,0),e.add(80,1,11,9),e.addMany(r,9,0,9),e.add(127,9,0,9),e.addMany(i(28,32),9,0,9),e.addMany(i(32,48),9,9,12),e.addMany(i(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(r,11,0,11),e.addMany(i(32,128),11,0,11),e.addMany(i(28,32),11,0,11),e.addMany(r,10,0,10),e.add(127,10,0,10),e.addMany(i(28,32),10,0,10),e.addMany(i(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(i(32,48),10,9,12),e.addMany(r,12,0,12),e.add(127,12,0,12),e.addMany(i(28,32),12,0,12),e.addMany(i(32,48),12,9,12),e.addMany(i(48,64),12,0,11),e.addMany(i(64,127),12,12,13),e.addMany(i(64,127),10,12,13),e.addMany(i(64,127),9,12,13),e.addMany(r,13,13,13),e.addMany(s,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(c,0,2,0),e.add(c,8,5,8),e.add(c,6,0,6),e.add(c,11,0,11),e.add(c,13,13,13),e}();class l extends s.Disposable{constructor(e=t.VT500_TRANSITION_TABLE){super(),this._transitions=e,this._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},this.initialState=0,this.currentState=this.initialState,this._params=new n.Params,this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,this._printHandlerFb=(e,t,i)=>{},this._executeHandlerFb=e=>{},this._csiHandlerFb=(e,t)=>{},this._escHandlerFb=e=>{},this._errorHandlerFb=e=>e,this._printHandler=this._printHandlerFb,this._executeHandlers=Object.create(null),this._csiHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser=new o.OscParser,this._dcsParser=new a.DcsParser,this._errorHandler=this._errorHandlerFb,this.registerEscHandler({final:\"\\\\\"},(()=>!0))}_identifier(e,t=[64,126]){let i=0;if(e.prefix){if(e.prefix.length>1)throw new Error(\"only one byte as prefix supported\");if(i=e.prefix.charCodeAt(0),i&&60>i||i>63)throw new Error(\"prefix must be in range 0x3c .. 0x3f\")}if(e.intermediates){if(e.intermediates.length>2)throw new Error(\"only two bytes as intermediates are supported\");for(let t=0;t<e.intermediates.length;++t){const s=e.intermediates.charCodeAt(t);if(32>s||s>47)throw new Error(\"intermediate must be in range 0x20 .. 0x2f\");i<<=8,i|=s}}if(1!==e.final.length)throw new Error(\"final must be a single byte\");const s=e.final.charCodeAt(0);if(t[0]>s||s>t[1])throw new Error(`final must be in range ${t[0]} .. ${t[1]}`);return i<<=8,i|=s,i}identToString(e){const t=[];for(;e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join(\"\")}dispose(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose()}setPrintHandler(e){this._printHandler=e}clearPrintHandler(){this._printHandler=this._printHandlerFb}registerEscHandler(e,t){const i=this._identifier(e,[48,126]);void 0===this._escHandlers[i]&&(this._escHandlers[i]=[]);const s=this._escHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1)}}}clearEscHandler(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])]}setEscHandlerFallback(e){this._escHandlerFb=e}setExecuteHandler(e,t){this._executeHandlers[e.charCodeAt(0)]=t}clearExecuteHandler(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)]}setExecuteHandlerFallback(e){this._executeHandlerFb=e}registerCsiHandler(e,t){const i=this._identifier(e);void 0===this._csiHandlers[i]&&(this._csiHandlers[i]=[]);const s=this._csiHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1)}}}clearCsiHandler(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)]}setCsiHandlerFallback(e){this._csiHandlerFb=e}registerDcsHandler(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)}clearDcsHandler(e){this._dcsParser.clearHandler(this._identifier(e))}setDcsHandlerFallback(e){this._dcsParser.setHandlerFallback(e)}registerOscHandler(e,t){return this._oscParser.registerHandler(e,t)}clearOscHandler(e){this._oscParser.clearHandler(e)}setOscHandlerFallback(e){this._oscParser.setHandlerFallback(e)}setErrorHandler(e){this._errorHandler=e}clearErrorHandler(){this._errorHandler=this._errorHandlerFb}reset(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[])}_preserveStack(e,t,i,s,r){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=i,this._parseStack.transition=s,this._parseStack.chunkPos=r}parse(e,t,i){let s,r=0,n=0,o=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,o=this._parseStack.chunkPos+1;else{if(void 0===i||1===this._parseStack.state)throw this._parseStack.state=1,new Error(\"improper continuation due to previous async handler, giving up parsing\");const t=this._parseStack.handlers;let n=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](this._params),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 4:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 6:if(r=e[this._parseStack.chunkPos],s=this._dcsParser.unhook(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(r=e[this._parseStack.chunkPos],s=this._oscParser.end(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0}this._parseStack.state=0,o=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition}for(let i=o;i<t;++i){switch(r=e[i],n=this._transitions.table[this.currentState<<8|(r<160?r:c)],n>>4){case 2:for(let s=i+1;;++s){if(s>=t||(r=e[s])<32||r>126&&r<c){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<c){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<c){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<c){this._printHandler(e,i,s),i=s-1;break}}break;case 3:this._executeHandlers[r]?this._executeHandlers[r]():this._executeHandlerFb(r),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:i,code:r,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:const o=this._csiHandlers[this._collect<<8|r];let a=o?o.length-1:-1;for(;a>=0&&(s=o[a](this._params),!0!==s);a--)if(s instanceof Promise)return this._preserveStack(3,o,a,n,i),s;a<0&&this._csiHandlerFb(this._collect<<8|r,this._params),this.precedingCodepoint=0;break;case 8:do{switch(r){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(r-48)}}while(++i<t&&(r=e[i])>47&&r<60);i--;break;case 9:this._collect<<=8,this._collect|=r;break;case 10:const h=this._escHandlers[this._collect<<8|r];let l=h?h.length-1:-1;for(;l>=0&&(s=h[l](),!0!==s);l--)if(s instanceof Promise)return this._preserveStack(4,h,l,n,i),s;l<0&&this._escHandlerFb(this._collect<<8|r),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|r,this._params);break;case 13:for(let s=i+1;;++s)if(s>=t||24===(r=e[s])||26===r||27===r||r>127&&r<c){this._dcsParser.put(e,i,s),i=s-1;break}break;case 14:if(s=this._dcsParser.unhook(24!==r&&26!==r),s)return this._preserveStack(6,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(let s=i+1;;s++)if(s>=t||(r=e[s])<32||r>127&&r<c){this._oscParser.put(e,i,s),i=s-1;break}break;case 6:if(s=this._oscParser.end(24!==r&&26!==r),s)return this._preserveStack(5,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0}this.currentState=15&n}}}t.EscapeSequenceParser=l},6242:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.OscHandler=t.OscParser=void 0;const s=i(5770),r=i(482),n=[];t.OscParser=class{constructor(){this._state=0,this._active=n,this._id=-1,this._handlers=Object.create(null),this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1}}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1)}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e]}setHandlerFallback(e){this._handlerFb=e}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=n}reset(){if(2===this._state)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=n,this._id=-1,this._state=0}_start(){if(this._active=this._handlers[this._id]||n,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,\"START\")}_put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._id,\"PUT\",(0,r.utf32ToString)(e,t,i))}start(){this.reset(),this._state=1}put(e,t,i){if(3!==this._state){if(1===this._state)for(;t<i;){const i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48}2===this._state&&i-t>0&&this._put(e,t,i)}}end(e,t=!0){if(0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].end(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--}for(;s>=0;s--)if(i=this._active[s].end(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._id,\"END\",e);this._active=n,this._id=-1,this._state=0}}},t.OscHandler=class{constructor(e){this._handler=e,this._data=\"\",this._hitLimit=!1}start(){this._data=\"\",this._hitLimit=!1}put(e,t,i){this._hitLimit||(this._data+=(0,r.utf32ToString)(e,t,i),this._data.length>s.PAYLOAD_LIMIT&&(this._data=\"\",this._hitLimit=!0))}end(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data),t instanceof Promise))return t.then((e=>(this._data=\"\",this._hitLimit=!1,e)));return this._data=\"\",this._hitLimit=!1,t}}},8742:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.Params=void 0;const i=2147483647;class s{constructor(e=32,t=32){if(this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error(\"maxSubParamsLength must not be greater than 256\");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}static fromArray(e){const t=new s;if(!e.length)return t;for(let i=Array.isArray(e[0])?1:0;i<e.length;++i){const s=e[i];if(Array.isArray(s))for(let e=0;e<s.length;++e)t.addSubParam(s[e]);else t.addParam(s)}return t}clone(){const e=new s(this.maxLength,this.maxSubParamsLength);return e.params.set(this.params),e.length=this.length,e._subParams.set(this._subParams),e._subParamsLength=this._subParamsLength,e._subParamsIdx.set(this._subParamsIdx),e._rejectDigits=this._rejectDigits,e._rejectSubDigits=this._rejectSubDigits,e._digitIsSub=this._digitIsSub,e}toArray(){const e=[];for(let t=0;t<this.length;++t){e.push(this.params[t]);const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&e.push(Array.prototype.slice.call(this._subParams,i,s))}return e}reset(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}addParam(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else{if(e<-1)throw new Error(\"values lesser than -1 are not allowed\");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>i?i:e}}addSubParam(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else{if(e<-1)throw new Error(\"values lesser than -1 are not allowed\");this._subParams[this._subParamsLength++]=e>i?i:e,this._subParamsIdx[this.length-1]++}}hasSubParams(e){return(255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0}getSubParams(e){const t=this._subParamsIdx[e]>>8,i=255&this._subParamsIdx[e];return i-t>0?this._subParams.subarray(t,i):null}getSubParamsAll(){const e={};for(let t=0;t<this.length;++t){const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&(e[t]=this._subParams.slice(i,s))}return e}addDigit(e){let t;if(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)return;const s=this._digitIsSub?this._subParams:this.params,r=s[t-1];s[t-1]=~r?Math.min(10*r+e,i):e}}t.Params=s},5741:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.AddonManager=void 0,t.AddonManager=class{constructor(){this._addons=[]}dispose(){for(let e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose()}loadAddon(e,t){const i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=()=>this._wrappedAddonDispose(i),t.activate(e)}_wrappedAddonDispose(e){if(e.isDisposed)return;let t=-1;for(let i=0;i<this._addons.length;i++)if(this._addons[i]===e){t=i;break}if(-1===t)throw new Error(\"Could not dispose an addon that has not been loaded\");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1)}}},8771:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferApiView=void 0;const s=i(3785),r=i(511);t.BufferApiView=class{constructor(e,t){this._buffer=e,this.type=t}init(e){return this._buffer=e,this}get cursorY(){return this._buffer.y}get cursorX(){return this._buffer.x}get viewportY(){return this._buffer.ydisp}get baseY(){return this._buffer.ybase}get length(){return this._buffer.lines.length}getLine(e){const t=this._buffer.lines.get(e);if(t)return new s.BufferLineApiView(t)}getNullCell(){return new r.CellData}}},3785:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferLineApiView=void 0;const s=i(511);t.BufferLineApiView=class{constructor(e){this._line=e}get isWrapped(){return this._line.isWrapped}get length(){return this._line.length}getCell(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new s.CellData)}translateToString(e,t,i){return this._line.translateToString(e,t,i)}}},8285:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferNamespaceApi=void 0;const s=i(8771),r=i(8460);t.BufferNamespaceApi=class{constructor(e){this._core=e,this._onBufferChange=new r.EventEmitter,this._normal=new s.BufferApiView(this._core.buffers.normal,\"normal\"),this._alternate=new s.BufferApiView(this._core.buffers.alt,\"alternate\"),this._core.buffers.onBufferActivate((()=>this._onBufferChange.fire(this.active)))}get onBufferChange(){return this._onBufferChange.event}get active(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error(\"Active buffer is neither normal nor alternate\")}get normal(){return this._normal.init(this._core.buffers.normal)}get alternate(){return this._alternate.init(this._core.buffers.alt)}}},7975:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.ParserApi=void 0,t.ParserApi=class{constructor(e){this._core=e}registerCsiHandler(e,t){return this._core.registerCsiHandler(e,(e=>t(e.toArray())))}addCsiHandler(e,t){return this.registerCsiHandler(e,t)}registerDcsHandler(e,t){return this._core.registerDcsHandler(e,((e,i)=>t(e,i.toArray())))}addDcsHandler(e,t){return this.registerDcsHandler(e,t)}registerEscHandler(e,t){return this._core.registerEscHandler(e,t)}addEscHandler(e,t){return this.registerEscHandler(e,t)}registerOscHandler(e,t){return this._core.registerOscHandler(e,t)}addOscHandler(e,t){return this.registerOscHandler(e,t)}}},7090:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.UnicodeApi=void 0,t.UnicodeApi=class{constructor(e){this._core=e}register(e){this._core.unicodeService.register(e)}get versions(){return this._core.unicodeService.versions}get activeVersion(){return this._core.unicodeService.activeVersion}set activeVersion(e){this._core.unicodeService.activeVersion=e}}},744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;const n=i(2585),o=i(5295),a=i(8460),h=i(844);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;let c=class extends h.Disposable{constructor(e){super(),this.isUserScrolling=!1,this._onResize=new a.EventEmitter,this._onScroll=new a.EventEmitter,this.cols=Math.max(e.rawOptions.cols||0,t.MINIMUM_COLS),this.rows=Math.max(e.rawOptions.rows||0,t.MINIMUM_ROWS),this.buffers=new o.BufferSet(e,this)}get onResize(){return this._onResize.event}get onScroll(){return this._onScroll.event}get buffer(){return this.buffers.active}dispose(){super.dispose(),this.buffers.dispose()}resize(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:e,rows:t})}reset(){this.buffers.reset(),this.isUserScrolling=!1}scroll(e,t=!1){const i=this.buffer;let s;s=this._cachedBlankLine,s&&s.length===this.cols&&s.getFg(0)===e.fg&&s.getBg(0)===e.bg||(s=i.getBlankLine(e,t),this._cachedBlankLine=s),s.isWrapped=t;const r=i.ybase+i.scrollTop,n=i.ybase+i.scrollBottom;if(0===i.scrollTop){const e=i.lines.isFull;n===i.lines.length-1?e?i.lines.recycle().copyFrom(s):i.lines.push(s.clone()):i.lines.splice(n+1,0,s.clone()),e?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++)}else{const e=n-r+1;i.lines.shiftElements(r+1,e-1,-1),i.lines.set(n,s.clone())}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp)}scrollLines(e,t,i){const s=this.buffer;if(e<0){if(0===s.ydisp)return;this.isUserScrolling=!0}else e+s.ydisp>=s.ybase&&(this.isUserScrolling=!1);const r=s.ydisp;s.ydisp=Math.max(Math.min(s.ydisp+e,s.ybase),0),r!==s.ydisp&&(t||this._onScroll.fire(s.ydisp))}scrollPages(e){this.scrollLines(e*(this.rows-1))}scrollToTop(){this.scrollLines(-this.buffer.ydisp)}scrollToBottom(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)}scrollToLine(e){const t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t)}};c=s([r(0,n.IOptionsService)],c),t.BufferService=c},7994:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.CharsetService=void 0,t.CharsetService=class{constructor(){this.glevel=0,this._charsets=[]}reset(){this.charset=void 0,this._charsets=[],this.glevel=0}setgLevel(e){this.glevel=e,this.charset=this._charsets[e]}setgCharset(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t)}}},1753:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.CoreMouseService=void 0;const n=i(2585),o=i(8460),a={NONE:{events:0,restrict:()=>!1},X10:{events:1,restrict:e=>4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)},VT200:{events:19,restrict:e=>32!==e.action},DRAG:{events:23,restrict:e=>32!==e.action||3!==e.button},ANY:{events:31,restrict:e=>!0}};function h(e,t){let i=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(i|=64,i|=e.action):(i|=3&e.button,4&e.button&&(i|=64),8&e.button&&(i|=128),32===e.action?i|=32:0!==e.action||t||(i|=3)),i}const c=String.fromCharCode,l={DEFAULT:e=>{const t=[h(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?\"\":`\u001b[M${c(t[0])}${c(t[1])}${c(t[2])}`},SGR:e=>{const t=0===e.action&&4!==e.button?\"m\":\"M\";return`\u001b[<${h(e,!0)};${e.col};${e.row}${t}`},SGR_PIXELS:e=>{const t=0===e.action&&4!==e.button?\"m\":\"M\";return`\u001b[<${h(e,!0)};${e.x};${e.y}${t}`}};let d=class{constructor(e,t){this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol=\"\",this._activeEncoding=\"\",this._onProtocolChange=new o.EventEmitter,this._lastEvent=null;for(const e of Object.keys(a))this.addProtocol(e,a[e]);for(const e of Object.keys(l))this.addEncoding(e,l[e]);this.reset()}addProtocol(e,t){this._protocols[e]=t}addEncoding(e,t){this._encodings[e]=t}get activeProtocol(){return this._activeProtocol}get areMouseEventsActive(){return 0!==this._protocols[this._activeProtocol].events}set activeProtocol(e){if(!this._protocols[e])throw new Error(`unknown protocol \"${e}\"`);this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events)}get activeEncoding(){return this._activeEncoding}set activeEncoding(e){if(!this._encodings[e])throw new Error(`unknown encoding \"${e}\"`);this._activeEncoding=e}reset(){this.activeProtocol=\"NONE\",this.activeEncoding=\"DEFAULT\",this._lastEvent=null}get onProtocolChange(){return this._onProtocolChange.event}triggerMouseEvent(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return!1;if(4===e.button&&32===e.action)return!1;if(3===e.button&&32!==e.action)return!1;if(4!==e.button&&(2===e.action||3===e.action))return!1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._equalEvents(this._lastEvent,e,\"SGR_PIXELS\"===this._activeEncoding))return!1;if(!this._protocols[this._activeProtocol].restrict(e))return!1;const t=this._encodings[this._activeEncoding](e);return t&&(\"DEFAULT\"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0}explainEvents(e){return{down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}}_equalEvents(e,t,i){if(i){if(e.x!==t.x)return!1;if(e.y!==t.y)return!1}else{if(e.col!==t.col)return!1;if(e.row!==t.row)return!1}return e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift}};d=s([r(0,n.IBufferService),r(1,n.ICoreService)],d),t.CoreMouseService=d},6975:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.CoreService=void 0;const n=i(2585),o=i(8460),a=i(1439),h=i(844),c=Object.freeze({insertMode:!1}),l=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0});let d=class extends h.Disposable{constructor(e,t,i,s){super(),this._bufferService=t,this._logService=i,this._optionsService=s,this.isCursorInitialized=!1,this.isCursorHidden=!1,this._onData=this.register(new o.EventEmitter),this._onUserInput=this.register(new o.EventEmitter),this._onBinary=this.register(new o.EventEmitter),this._scrollToBottom=e,this.register({dispose:()=>this._scrollToBottom=void 0}),this.modes=(0,a.clone)(c),this.decPrivateModes=(0,a.clone)(l)}get onData(){return this._onData.event}get onUserInput(){return this._onUserInput.event}get onBinary(){return this._onBinary.event}reset(){this.modes=(0,a.clone)(c),this.decPrivateModes=(0,a.clone)(l)}triggerDataEvent(e,t=!1){if(this._optionsService.rawOptions.disableStdin)return;const i=this._bufferService.buffer;i.ybase!==i.ydisp&&this._scrollToBottom(),t&&this._onUserInput.fire(),this._logService.debug(`sending data \"${e}\"`,(()=>e.split(\"\").map((e=>e.charCodeAt(0))))),this._onData.fire(e)}triggerBinaryEvent(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug(`sending binary \"${e}\"`,(()=>e.split(\"\").map((e=>e.charCodeAt(0))))),this._onBinary.fire(e))}};d=s([r(1,n.IBufferService),r(2,n.ILogService),r(3,n.IOptionsService)],d),t.CoreService=d},9074:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.DecorationService=void 0;const s=i(8055),r=i(8460),n=i(844),o=i(6106),a={xmin:0,xmax:0};class h extends n.Disposable{constructor(){super(...arguments),this._decorations=new o.SortedList((e=>null==e?void 0:e.marker.line)),this._onDecorationRegistered=this.register(new r.EventEmitter),this._onDecorationRemoved=this.register(new r.EventEmitter)}get onDecorationRegistered(){return this._onDecorationRegistered.event}get onDecorationRemoved(){return this._onDecorationRemoved.event}get decorations(){return this._decorations.values()}registerDecoration(e){if(e.marker.isDisposed)return;const t=new c(e);if(t){const e=t.marker.onDispose((()=>t.dispose()));t.onDispose((()=>{t&&(this._decorations.delete(t)&&this._onDecorationRemoved.fire(t),e.dispose())})),this._decorations.insert(t),this._onDecorationRegistered.fire(t)}return t}reset(){for(const e of this._decorations.values())e.dispose();this._decorations.clear()}*getDecorationsAtCell(e,t,i){var s,r,n;let o=0,a=0;for(const h of this._decorations.getKeyIterator(t))o=null!==(s=h.options.x)&&void 0!==s?s:0,a=o+(null!==(r=h.options.width)&&void 0!==r?r:1),e>=o&&e<a&&(!i||(null!==(n=h.options.layer)&&void 0!==n?n:\"bottom\")===i)&&(yield h)}forEachDecorationAtCell(e,t,i,s){this._decorations.forEachByKey(t,(t=>{var r,n,o;a.xmin=null!==(r=t.options.x)&&void 0!==r?r:0,a.xmax=a.xmin+(null!==(n=t.options.width)&&void 0!==n?n:1),e>=a.xmin&&e<a.xmax&&(!i||(null!==(o=t.options.layer)&&void 0!==o?o:\"bottom\")===i)&&s(t)}))}dispose(){for(const e of this._decorations.values())this._onDecorationRemoved.fire(e);this.reset()}}t.DecorationService=h;class c extends n.Disposable{constructor(e){super(),this.options=e,this.isDisposed=!1,this.onRenderEmitter=this.register(new r.EventEmitter),this.onRender=this.onRenderEmitter.event,this._onDispose=this.register(new r.EventEmitter),this.onDispose=this._onDispose.event,this._cachedBg=null,this._cachedFg=null,this.marker=e.marker,this.options.overviewRulerOptions&&!this.options.overviewRulerOptions.position&&(this.options.overviewRulerOptions.position=\"full\")}get backgroundColorRGB(){return null===this._cachedBg&&(this.options.backgroundColor?this._cachedBg=s.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg}get foregroundColorRGB(){return null===this._cachedFg&&(this.options.foregroundColor?this._cachedFg=s.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg}dispose(){this._isDisposed||(this._isDisposed=!0,this._onDispose.fire(),super.dispose())}}},3730:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.DirtyRowService=void 0;const n=i(2585);let o=class{constructor(e){this._bufferService=e,this.clearRange()}get start(){return this._start}get end(){return this._end}clearRange(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y}markDirty(e){e<this._start?this._start=e:e>this._end&&(this._end=e)}markRangeDirty(e,t){if(e>t){const i=e;e=t,t=i}e<this._start&&(this._start=e),t>this._end&&(this._end=t)}markAllDirty(){this.markRangeDirty(0,this._bufferService.rows-1)}};o=s([r(0,n.IBufferService)],o),t.DirtyRowService=o},4348:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;const s=i(2585),r=i(8343);class n{constructor(...e){this._entries=new Map;for(const[t,i]of e)this.set(t,i)}set(e,t){const i=this._entries.get(e);return this._entries.set(e,t),i}forEach(e){this._entries.forEach(((t,i)=>e(i,t)))}has(e){return this._entries.has(e)}get(e){return this._entries.get(e)}}t.ServiceCollection=n,t.InstantiationService=class{constructor(){this._services=new n,this._services.set(s.IInstantiationService,this)}setService(e,t){this._services.set(e,t)}getService(e){return this._services.get(e)}createInstance(e,...t){const i=(0,r.getServiceDependencies)(e).sort(((e,t)=>e.index-t.index)),s=[];for(const t of i){const i=this._services.get(t.id);if(!i)throw new Error(`[createInstance] ${e.name} depends on UNKNOWN service ${t.id}.`);s.push(i)}const n=i.length>0?i[0].index:t.length;if(t.length!==n)throw new Error(`[createInstance] First service dependency of ${e.name} at position ${n+1} conflicts with ${t.length} static arguments`);return new e(...[...t,...s])}}},7866:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.LogService=void 0;const n=i(2585),o={debug:n.LogLevelEnum.DEBUG,info:n.LogLevelEnum.INFO,warn:n.LogLevelEnum.WARN,error:n.LogLevelEnum.ERROR,off:n.LogLevelEnum.OFF};let a=class{constructor(e){this._optionsService=e,this.logLevel=n.LogLevelEnum.OFF,this._updateLogLevel(),this._optionsService.onOptionChange((e=>{\"logLevel\"===e&&this._updateLogLevel()}))}_updateLogLevel(){this.logLevel=o[this._optionsService.rawOptions.logLevel]}_evalLazyOptionalParams(e){for(let t=0;t<e.length;t++)\"function\"==typeof e[t]&&(e[t]=e[t]())}_log(e,t,i){this._evalLazyOptionalParams(i),e.call(console,\"xterm.js: \"+t,...i)}debug(e,...t){this.logLevel<=n.LogLevelEnum.DEBUG&&this._log(console.log,e,t)}info(e,...t){this.logLevel<=n.LogLevelEnum.INFO&&this._log(console.info,e,t)}warn(e,...t){this.logLevel<=n.LogLevelEnum.WARN&&this._log(console.warn,e,t)}error(e,...t){this.logLevel<=n.LogLevelEnum.ERROR&&this._log(console.error,e,t)}};a=s([r(0,n.IOptionsService)],a),t.LogService=a},7302:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=void 0;const s=i(8460),r=i(6114);t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:\"block\",cursorWidth:1,customGlyphs:!0,drawBoldTextInBrightColors:!0,fastScrollModifier:\"alt\",fastScrollSensitivity:5,fontFamily:\"courier-new, courier, monospace\",fontSize:15,fontWeight:\"normal\",fontWeightBold:\"bold\",lineHeight:1,letterSpacing:0,linkHandler:null,logLevel:\"info\",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,smoothScrollDuration:0,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!1,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:r.isMac,windowOptions:{},windowsMode:!1,wordSeparator:\" ()[]{}',\\\"`\",altClickMovesCursor:!0,convertEol:!1,termName:\"xterm\",cancelEvents:!1,overviewRulerWidth:0};const n=[\"normal\",\"bold\",\"100\",\"200\",\"300\",\"400\",\"500\",\"600\",\"700\",\"800\",\"900\"];t.OptionsService=class{constructor(e){this._onOptionChange=new s.EventEmitter;const i=Object.assign({},t.DEFAULT_OPTIONS);for(const t in e)if(t in i)try{const s=e[t];i[t]=this._sanitizeAndValidateOption(t,s)}catch(e){console.error(e)}this.rawOptions=i,this.options=Object.assign({},i),this._setupOptions()}get onOptionChange(){return this._onOptionChange.event}_setupOptions(){const e=e=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key \"${e}\"`);return this.rawOptions[e]},i=(e,i)=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key \"${e}\"`);i=this._sanitizeAndValidateOption(e,i),this.rawOptions[e]!==i&&(this.rawOptions[e]=i,this._onOptionChange.fire(e))};for(const t in this.rawOptions){const s={get:e.bind(this,t),set:i.bind(this,t)};Object.defineProperty(this.options,t,s)}}_sanitizeAndValidateOption(e,i){switch(e){case\"cursorStyle\":if(i||(i=t.DEFAULT_OPTIONS[e]),!function(e){return\"block\"===e||\"underline\"===e||\"bar\"===e}(i))throw new Error(`\"${i}\" is not a valid value for ${e}`);break;case\"wordSeparator\":i||(i=t.DEFAULT_OPTIONS[e]);break;case\"fontWeight\":case\"fontWeightBold\":if(\"number\"==typeof i&&1<=i&&i<=1e3)break;i=n.includes(i)?i:t.DEFAULT_OPTIONS[e];break;case\"cursorWidth\":i=Math.floor(i);case\"lineHeight\":case\"tabStopWidth\":if(i<1)throw new Error(`${e} cannot be less than 1, value: ${i}`);break;case\"minimumContrastRatio\":i=Math.max(1,Math.min(21,Math.round(10*i)/10));break;case\"scrollback\":if((i=Math.min(i,4294967295))<0)throw new Error(`${e} cannot be less than 0, value: ${i}`);break;case\"fastScrollSensitivity\":case\"scrollSensitivity\":if(i<=0)throw new Error(`${e} cannot be less than or equal to 0, value: ${i}`);case\"rows\":case\"cols\":if(!i&&0!==i)throw new Error(`${e} must be numeric, value: ${i}`)}return i}}},2660:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.OscLinkService=void 0;const n=i(2585);let o=class{constructor(e){this._bufferService=e,this._nextId=1,this._entriesWithId=new Map,this._dataByLinkId=new Map}registerLink(e){const t=this._bufferService.buffer;if(void 0===e.id){const i=t.addMarker(t.ybase+t.y),s={data:e,id:this._nextId++,lines:[i]};return i.onDispose((()=>this._removeMarkerFromLink(s,i))),this._dataByLinkId.set(s.id,s),s.id}const i=e,s=this._getEntryIdKey(i),r=this._entriesWithId.get(s);if(r)return this.addLineToLink(r.id,t.ybase+t.y),r.id;const n=t.addMarker(t.ybase+t.y),o={id:this._nextId++,key:this._getEntryIdKey(i),data:i,lines:[n]};return n.onDispose((()=>this._removeMarkerFromLink(o,n))),this._entriesWithId.set(o.key,o),this._dataByLinkId.set(o.id,o),o.id}addLineToLink(e,t){const i=this._dataByLinkId.get(e);if(i&&i.lines.every((e=>e.line!==t))){const e=this._bufferService.buffer.addMarker(t);i.lines.push(e),e.onDispose((()=>this._removeMarkerFromLink(i,e)))}}getLinkData(e){var t;return null===(t=this._dataByLinkId.get(e))||void 0===t?void 0:t.data}_getEntryIdKey(e){return`${e.id};;${e.uri}`}_removeMarkerFromLink(e,t){const i=e.lines.indexOf(t);-1!==i&&(e.lines.splice(i,1),0===e.lines.length&&(void 0!==e.data.id&&this._entriesWithId.delete(e.key),this._dataByLinkId.delete(e.id)))}};o=s([r(0,n.IBufferService)],o),t.OscLinkService=o},8343:(e,t)=>{function i(e,t,i){t.di$target===t?t.di$dependencies.push({id:e,index:i}):(t.di$dependencies=[{id:e,index:i}],t.di$target=t)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0,t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);const s=function(e,t,r){if(3!==arguments.length)throw new Error(\"@IServiceName-decorator can only be used to decorate a parameter\");i(s,e,r)};return s.toString=()=>e,t.serviceRegistry.set(e,s),s}},2585:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.IDecorationService=t.IUnicodeService=t.IOscLinkService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.IDirtyRowService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;const s=i(8343);var r;t.IBufferService=(0,s.createDecorator)(\"BufferService\"),t.ICoreMouseService=(0,s.createDecorator)(\"CoreMouseService\"),t.ICoreService=(0,s.createDecorator)(\"CoreService\"),t.ICharsetService=(0,s.createDecorator)(\"CharsetService\"),t.IDirtyRowService=(0,s.createDecorator)(\"DirtyRowService\"),t.IInstantiationService=(0,s.createDecorator)(\"InstantiationService\"),(r=t.LogLevelEnum||(t.LogLevelEnum={}))[r.DEBUG=0]=\"DEBUG\",r[r.INFO=1]=\"INFO\",r[r.WARN=2]=\"WARN\",r[r.ERROR=3]=\"ERROR\",r[r.OFF=4]=\"OFF\",t.ILogService=(0,s.createDecorator)(\"LogService\"),t.IOptionsService=(0,s.createDecorator)(\"OptionsService\"),t.IOscLinkService=(0,s.createDecorator)(\"OscLinkService\"),t.IUnicodeService=(0,s.createDecorator)(\"UnicodeService\"),t.IDecorationService=(0,s.createDecorator)(\"DecorationService\")},1480:(e,t,i)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.UnicodeService=void 0;const s=i(8460),r=i(225);t.UnicodeService=class{constructor(){this._providers=Object.create(null),this._active=\"\",this._onChange=new s.EventEmitter;const e=new r.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e}get onChange(){return this._onChange.event}get versions(){return Object.keys(this._providers)}get activeVersion(){return this._active}set activeVersion(e){if(!this._providers[e])throw new Error(`unknown Unicode version \"${e}\"`);this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e)}register(e){this._providers[e.version]=e}wcwidth(e){return this._activeProvider.wcwidth(e)}getStringCellWidth(e){let t=0;const i=e.length;for(let s=0;s<i;++s){let r=e.charCodeAt(s);if(55296<=r&&r<=56319){if(++s>=i)return t+this.wcwidth(r);const n=e.charCodeAt(s);56320<=n&&n<=57343?r=1024*(r-55296)+n-56320+65536:t+=this.wcwidth(n)}t+=this.wcwidth(r)}return t}}}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}var s={};return(()=>{var e=s;Object.defineProperty(e,\"__esModule\",{value:!0}),e.Terminal=void 0;const t=i(3236),r=i(9042),n=i(7975),o=i(7090),a=i(5741),h=i(8285),c=[\"cols\",\"rows\"];e.Terminal=class{constructor(e){this._core=new t.Terminal(e),this._addonManager=new a.AddonManager,this._publicOptions=Object.assign({},this._core.options);const i=e=>this._core.options[e],s=(e,t)=>{this._checkReadonlyOptions(e),this._core.options[e]=t};for(const e in this._core.options){const t={get:i.bind(this,e),set:s.bind(this,e)};Object.defineProperty(this._publicOptions,e,t)}}_checkReadonlyOptions(e){if(c.includes(e))throw new Error(`Option \"${e}\" can only be set in the constructor`)}_checkProposedApi(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error(\"You must set the allowProposedApi option to true to use proposed API\")}get onBell(){return this._core.onBell}get onBinary(){return this._core.onBinary}get onCursorMove(){return this._core.onCursorMove}get onData(){return this._core.onData}get onKey(){return this._core.onKey}get onLineFeed(){return this._core.onLineFeed}get onRender(){return this._core.onRender}get onResize(){return this._core.onResize}get onScroll(){return this._core.onScroll}get onSelectionChange(){return this._core.onSelectionChange}get onTitleChange(){return this._core.onTitleChange}get onWriteParsed(){return this._core.onWriteParsed}get element(){return this._core.element}get parser(){return this._checkProposedApi(),this._parser||(this._parser=new n.ParserApi(this._core)),this._parser}get unicode(){return this._checkProposedApi(),new o.UnicodeApi(this._core)}get textarea(){return this._core.textarea}get rows(){return this._core.rows}get cols(){return this._core.cols}get buffer(){return this._checkProposedApi(),this._buffer||(this._buffer=new h.BufferNamespaceApi(this._core)),this._buffer}get markers(){return this._checkProposedApi(),this._core.markers}get modes(){const e=this._core.coreService.decPrivateModes;let t=\"none\";switch(this._core.coreMouseService.activeProtocol){case\"X10\":t=\"x10\";break;case\"VT200\":t=\"vt200\";break;case\"DRAG\":t=\"drag\";break;case\"ANY\":t=\"any\"}return{applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}}get options(){return this._publicOptions}set options(e){for(const t in e)this._publicOptions[t]=e[t]}blur(){this._core.blur()}focus(){this._core.focus()}resize(e,t){this._verifyIntegers(e,t),this._core.resize(e,t)}open(e){this._core.open(e)}attachCustomKeyEventHandler(e){this._core.attachCustomKeyEventHandler(e)}registerLinkProvider(e){return this._checkProposedApi(),this._core.registerLinkProvider(e)}registerCharacterJoiner(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)}deregisterCharacterJoiner(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e)}registerMarker(e=0){return this._verifyIntegers(e),this._core.addMarker(e)}registerDecoration(e){var t,i,s;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(i=e.width)&&void 0!==i?i:0,null!==(s=e.height)&&void 0!==s?s:0),this._core.registerDecoration(e)}hasSelection(){return this._core.hasSelection()}select(e,t,i){this._verifyIntegers(e,t,i),this._core.select(e,t,i)}getSelection(){return this._core.getSelection()}getSelectionPosition(){return this._core.getSelectionPosition()}clearSelection(){this._core.clearSelection()}selectAll(){this._core.selectAll()}selectLines(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t)}dispose(){this._addonManager.dispose(),this._core.dispose()}scrollLines(e){this._verifyIntegers(e),this._core.scrollLines(e)}scrollPages(e){this._verifyIntegers(e),this._core.scrollPages(e)}scrollToTop(){this._core.scrollToTop()}scrollToBottom(){this._core.scrollToBottom()}scrollToLine(e){this._verifyIntegers(e),this._core.scrollToLine(e)}clear(){this._core.clear()}write(e,t){this._core.write(e,t)}writeln(e,t){this._core.write(e),this._core.write(\"\\r\\n\",t)}paste(e){this._core.paste(e)}refresh(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t)}reset(){this._core.reset()}clearTextureAtlas(){this._core.clearTextureAtlas()}loadAddon(e){return this._addonManager.loadAddon(this,e)}static get strings(){return r}_verifyIntegers(...e){for(const t of e)if(t===1/0||isNaN(t)||t%1!=0)throw new Error(\"This API only accepts integers\")}_verifyPositiveIntegers(...e){for(const t of e)if(t&&(t===1/0||isNaN(t)||t%1!=0||t<0))throw new Error(\"This API only accepts positive integers\")}}})(),s})()}));\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","exports","e","t","i","Object","defineProperty","value","AccessibilityManager","s","r","n","o","a","h","c","l","Disposable","constructor","_terminal","_renderService","_liveRegionLineCount","_charsToConsume","_charsToAnnounce","_accessibilityTreeRoot","document","createElement","classList","add","tabIndex","_rowContainer","setAttribute","_rowElements","rows","_createAccessibilityTreeNode","appendChild","_topBoundaryFocusListener","_onBoundaryFocus","_bottomBoundaryFocusListener","addEventListener","length","_refreshRowsDimensions","_renderRowsDebouncer","TimeBasedDebouncer","_renderRows","bind","_refreshRows","_liveRegion","element","insertAdjacentElement","register","onResize","_onResize","onRender","start","end","onScroll","onA11yChar","_onChar","onLineFeed","onA11yTab","_onTab","onKey","_onKey","key","onBlur","_clearLiveRegion","onDimensionsChange","_screenDprMonitor","ScreenDprMonitor","window","setListener","addDisposableDomListener","dispose","removeElementFromParent","target","getAttribute","buffer","lines","relatedTarget","pop","removeChild","shift","removeEventListener","unshift","scrollLines","focus","preventDefault","stopImmediatePropagation","children","_refreshRowDimensions","textContent","tooMuchOutput","isMac","parentNode","setTimeout","refresh","toString","translateBufferLineToString","ydisp","innerText","_announceCharacters","dimensions","actualCellHeight","style","height","replace","decPrivateModes","bracketedPasteMode","triggerDataEvent","getBoundingClientRect","clientX","left","clientY","top","width","zIndex","rightClickHandler","moveTextAreaUnderMouseCursor","paste","handlePasteEvent","copyHandler","bracketTextForPaste","prepareTextForTerminal","clipboardData","setData","selectionText","stopPropagation","getData","rightClickSelect","select","ColorContrastCache","_color","TwoKeyMap","_css","setCss","set","getCss","get","setColor","getColor","clear","ColorManager","DEFAULT_ANSI_COLORS","css","toColor","rgba","freeze","channels","toCss","toRgba","allowTransparency","d","getContext","_ctx","globalCompositeOperation","_litmusColor","createLinearGradient","_contrastCache","colors","foreground","background","cursor","cursorAccent","selectionForeground","selectionBackgroundTransparent","selectionBackgroundOpaque","color","blend","selectionInactiveBackgroundTransparent","selectionInactiveBackgroundOpaque","ansi","slice","contrastCache","_updateRestoreColors","onOptionsChange","setTheme","_parseColor","selectionBackground","selectionInactiveBackground","isOpaque","opacity","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","extendedAnsi","Math","min","restoreColor","_restoreColors","fillStyle","console","warn","fillRect","getImageData","data","substring","split","map","Number","round","parentElement","__decorate","arguments","getOwnPropertyDescriptor","Reflect","decorate","__param","Linkifier2","_bufferService","_linkProviders","_linkCacheDisposables","_isMouseOut","_activeLine","_onShowLinkUnderline","EventEmitter","_onHideLinkUnderline","getDisposeArrayDisposable","currentLink","_currentLink","onShowLinkUnderline","event","onHideLinkUnderline","_lastMouseEvent","registerLinkProvider","indexOf","splice","attachToDom","_element","_mouseService","_clearCurrentLink","_onMouseMove","_handleMouseDown","_handleMouseUp","_positionFromMouseEvent","composedPath","contains","_lastBufferCell","x","y","_onHover","_askForLink","_linkAtPosition","link","_activeProviderReplies","forEach","Map","entries","_checkLinkProviderResult","provideLinks","size","_removeIntersectingLinks","Set","range","cols","has","find","_handleNewLink","_mouseDownLink","activate","text","_linkLeave","disposeArray","state","decorations","underline","pointerCursor","isHovered","_linkHover","defineProperties","toggle","_fireUnderlineEvent","onRenderedViewportChange","hover","_createLinkUnderlineEvent","fire","remove","leave","getCoords","x1","y1","x2","y2","fg","IBufferService","promptLabel","OscLinkProvider","_optionsService","_oscLinkService","rawOptions","linkHandler","CellData","getTrimmedLength","_","hasContent","loadCell","hasExtendedAttrs","extended","urlId","getLinkData","uri","confirm","open","opener","location","href","call","IOptionsService","IOscLinkService","RenderDebouncer","_parentWindow","_renderCallback","_refreshCallbacks","_animationFrame","cancelAnimationFrame","addRefreshCallback","requestAnimationFrame","_innerRefresh","_rowCount","_rowStart","_rowEnd","max","_runRefreshCallbacks","_currentDevicePixelRatio","devicePixelRatio","_listener","clearListener","_outerListener","_updateDpr","_resolutionMediaMatchList","removeListener","matchMedia","addListener","Terminal","u","f","v","g","p","S","m","C","b","w","E","L","R","k","D","A","B","T","M","O","CoreTerminal","browser","_keyDownHandled","_keyDownSeen","_keyPressHandled","_unprocessedDeadKey","_onCursorMove","_onRender","_onSelectionChange","_onTitleChange","_onBell","_onFocus","_onBlur","_onA11yCharEmitter","_onA11yTabEmitter","_setup","linkifier2","_instantiationService","createInstance","_decorationService","DecorationService","setService","IDecorationService","_inputHandler","onRequestBell","onRequestRefreshRows","onRequestSendFocus","_reportFocus","onRequestReset","reset","onRequestWindowsOptionsReport","_reportWindowsOptions","onColor","_handleColorEvent","forwardEvent","onCursorMove","onTitleChange","_afterResize","onSelectionChange","onBell","onFocus","_colorManager","index","type","toColorRGB","coreService","C0","ESC","toRgbString","C1_ESCAPED","ST","setColors","viewport","onThemeChange","_isDisposed","_customKeyEventHandler","write","buffers","active","textarea","preventScroll","_updateOptions","_charSizeService","measure","syncScrollArea","optionsService","screenReaderMode","_accessibilityManager","setupTabStops","_setTheme","theme","_onTextAreaFocus","sendFocus","updateCursorStyle","_showCursor","blur","_onTextAreaBlur","_syncTextArea","isCursorInViewport","_compositionHelper","isComposing","ybase","getWidth","actualCellWidth","lineHeight","_initGlobal","_bindKeys","hasSelection","_selectionService","isFirefox","button","screenElement","options","rightClickSelectsWord","isLinux","_keyUp","_keyDown","_keyPress","compositionstart","compositionupdate","compositionend","_inputEvent","updateCompositionElements","isConnected","_logService","debug","_document","ownerDocument","dir","createDocumentFragment","_viewportElement","_viewportScrollArea","_helperContainer","_coreBrowserService","CoreBrowserService","defaultView","ICoreBrowserService","CharSizeService","ICharSizeService","_theme","onOptionChange","_characterJoinerService","CharacterJoinerService","ICharacterJoinerService","_createRenderer","RenderService","IRenderService","resize","_compositionView","CompositionHelper","MouseService","IMouseService","Viewport","onRequestSyncScrollBar","SelectionService","ISelectionService","onRequestScrollLines","amount","suppressScrollEvent","onRequestRedraw","onSelectionChanged","columnSelectMode","onLinuxMouseSelection","_onScroll","BufferDecorationRenderer","onMouseDown","coreMouseService","areMouseEventsActive","disable","enable","overviewRulerWidth","_overviewRulerRenderer","OverviewRulerRenderer","bindMouse","DomRenderer","getMouseReportCoords","overrideType","buttons","getLinesScrolled","deltaY","triggerMouseEvent","col","row","action","ctrl","ctrlKey","alt","altKey","shiftKey","mouseup","wheel","mousedrag","mousemove","cancel","onProtocolChange","logLevel","explainEvents","passive","activeProtocol","shouldForceSelection","hasScrollback","applicationCursorKeys","abs","onWheel","onTouchStart","onTouchMove","refreshRows","shouldColumnSelect","isCursorInitialized","attachCustomKeyEventHandler","registerCharacterJoiner","deregisterCharacterJoiner","deregister","markers","addMarker","registerDecoration","setSelection","getSelection","getSelectionPosition","selectionStart","selectionEnd","clearSelection","selectAll","selectLines","macOptionIsMeta","keydown","scrollToBottom","evaluateKeyboardEvent","_isThirdLevelShift","metaKey","charCodeAt","ETX","CR","domEvent","isWindows","getModifierState","keyCode","charCode","which","String","fromCharCode","inputType","composed","hasValidSize","clearAllMarkers","getBlankLine","DEFAULT_ATTR_DATA","position","source","clearTextureAtlas","WindowsOptionsReportType","GET_WIN_SIZE_PIXELS","canvasWidth","toFixed","canvasHeight","GET_CELL_SIZE_PIXELS","cancelEvents","_debounceThresholdMS","_lastRefreshMs","_additionalRefreshRequested","_refreshTimeoutID","clearTimeout","Date","now","_scrollLines","_scrollArea","scrollBarWidth","_currentRowHeight","_currentScaledCellHeight","_lastRecordedBufferLength","_lastRecordedViewportHeight","_lastRecordedBufferHeight","_lastTouchY","_lastScrollTop","_wheelPartialScroll","_refreshAnimationFrame","_ignoreNextScrollEvent","_smoothScrollState","startTime","origin","offsetWidth","_activeBuffer","onBufferActivate","activeBuffer","_renderDimensions","backgroundColor","_refresh","scaledCellHeight","dpr","offsetHeight","scrollTop","offsetParent","_smoothScroll","_smoothScrollPercent","_clearSmoothScrollState","smoothScrollDuration","_bubbleScroll","cancelable","_getPixelsScrolled","scrollHeight","_applyScrollModifier","deltaMode","WheelEvent","DOM_DELTA_LINE","DOM_DELTA_PAGE","DOM_DELTA_PIXEL","floor","fastScrollModifier","fastScrollSensitivity","scrollSensitivity","touches","pageY","_screenElement","_decorationElements","_altBufferIsActive","_dimensionsChanged","_container","_queueRefresh","onDecorationRegistered","onDecorationRemoved","_removeDecoration","refreshDecorations","_renderDecoration","_refreshStyle","_refreshXPosition","_createElement","marker","line","display","onRenderEmitter","onDispose","anchor","right","delete","ColorZoneStore","_zones","_zonePool","_zonePoolIndex","_linePadding","full","center","zones","addDecoration","overviewRulerOptions","_lineIntersectsZone","_lineAdjacentToZone","_addLineToZone","startBufferLine","endBufferLine","setPadding","_coreBrowseService","_colorZoneStore","_shouldUpdateDimensions","_shouldUpdateAnchor","_lastKnownBufferLength","_canvas","_refreshCanvasDimensions","insertBefore","_registerDecorationListeners","_registerBufferChangeListeners","_registerDimensionChangeListeners","_width","normal","_refreshDrawHeightConstants","_refreshColorZonePadding","_containerHeight","clientHeight","_refreshDrawConstants","ceil","_refreshDecorations","clearRect","lineWidth","_renderColorZone","_textarea","_coreService","_isComposing","_isSendingComposition","_compositionPosition","_dataAlreadySent","_finalizeComposition","_handleAnyTextareaChanges","DEL","fontFamily","fontSize","ICoreService","getComputedStyle","parseInt","getPropertyValue","getCoordsRelativeToElement","moveToCellSequence","isWrapped","TEXT_BASELINE","DIM_OPACITY","INVERTED_DEFAULT_COLOR","isLegacyEdge","excludeFromContrastRatioDemands","isRestrictedPowerlineGlyph","isPowerlineGlyph","throwIfFalsy","_colors","_linkifier2","_terminalClass","_refreshRowElements","_selectionContainer","scaledCharWidth","scaledCharHeight","scaledCellWidth","scaledCharLeft","scaledCharTop","scaledCanvasWidth","scaledCanvasHeight","_updateDimensions","_injectCss","_rowFactory","DomRendererRowFactory","_onLinkHover","_onLinkLeave","_themeStyleElement","_dimensionsStyleElement","letterSpacing","overflow","_terminalSelector","BOLD_CLASS","fontWeight","fontWeightBold","ITALIC_CLASS","CURSOR_CLASS","CURSOR_STYLE_BLOCK_CLASS","CURSOR_BLINK_CLASS","CURSOR_STYLE_BAR_CLASS","cursorWidth","CURSOR_STYLE_UNDERLINE_CLASS","opaque","onDevicePixelRatioChange","onCharSizeChanged","renderRows","_createSelectionElement","onOptionsChanged","cursorBlink","cursorStyle","createRow","_setCellUnderline","textDecoration","IInstantiationService","STRIKETHROUGH_CLASS","UNDERLINE_CLASS","DIM_CLASS","_workCell","_columnSelectMode","_selectionStart","_selectionEnd","getJoinedCharacters","getCode","NULL_CELL_CODE","JoinedCellData","translateToString","isCursorHidden","isBold","isItalic","isDim","isInvisible","WHITESPACE_CELL_CHAR","getChars","isUnderline","underlineStyle","innerHTML","isUnderlineColorDefault","isUnderlineColorRGB","textDecorationColor","AttributeData","getUnderlineColor","join","drawBoldTextInBrightColors","isStrikethrough","getFgColor","getFgColorMode","getBgColor","getBgColorMode","isInverse","forEachDecorationAtCell","layer","backgroundColorRGB","foregroundColorRGB","_isCellInSelection","isFocused","_addStyle","multiplyOpacity","_applyMinimumContrast","minimumContrastRatio","ensureContrastRatio","SelectionModel","isSelectAllActive","selectionStartLength","finalSelectionStart","areSelectionValuesReversed","finalSelectionEnd","onTrim","_onCharSizeChange","_measureStrategy","onCharSizeChange","_parentElement","_result","_measureElement","content","combinedData","bg","isCombined","setFromCharData","getAsCharData","_characterJoiners","_nextCharacterJoinerId","id","handler","getFg","getBg","_getJoinedRanges","error","_mergeRanges","_stringRangesToCellRanges","getString","getRootNode","activeElement","hasFocus","_renderer","_isPaused","_needsFullRefresh","_isNextRenderRedrawOnly","_needsSelectionRefresh","_canvasWidth","_canvasHeight","_selectionState","_onDimensionsChange","_onRenderedViewportChange","_onRefreshRequest","_renderDebouncer","_fullRefresh","_handleOptionsChanged","IntersectionObserver","_onIntersectionChange","threshold","observe","disconnect","onRefreshRequest","isIntersecting","intersectionRatio","_fireOnCanvasResize","setRenderer","_linkifier","_dragScrollAmount","_enabled","_mouseDownTimeStamp","_oldHasSelection","_oldSelectionStart","_oldSelectionEnd","_onLinuxMouseSelection","_onRedrawRequest","_onRequestScrollLines","_mouseMoveListener","_mouseUpListener","_onMouseUp","onUserInput","_trimListener","_onTrim","_onBufferActivate","_model","_activeSelectionMode","_removeMouseDownListeners","_isClickInSelection","_getMouseBufferCoords","_areCoordsInSelection","isCellInSelection","_selectWordAtCursor","getRangeLength","_selectWordAt","_getMouseEventScrollAmount","macOptionClickForcesSelection","timeStamp","_onIncrementalClick","detail","_onSingleClick","_onDoubleClick","_onTripleClick","_addMouseDownListeners","_dragScrollIntervalTimer","setInterval","_dragScroll","clearInterval","hasWidth","_selectLineAt","_selectToWordAt","altClickMovesCursor","_fireEventIfSelectionChanged","_fireOnSelectionChange","_convertViewportColToCharacterIndex","_getWordAt","charAt","_isCharWordSeparator","trim","getCodePoint","wordSeparator","getWrappedRangeForLine","first","last","createDecorator","CircularList","_maxLength","onDeleteEmitter","onInsertEmitter","onTrimEmitter","_array","_startIndex","_length","onDelete","onInsert","maxLength","_getCyclicIndex","recycle","isFull","trimStart","shiftElements","clone","Array","isArray","contrastRatio","toPaddedHex","rgb","toChannels","match","repeat","parseFloat","pow","relativeLuminance","relativeLuminance2","reduceLuminance","increaseLuminance","_onBinary","_onData","_onLineFeed","_onWriteParsed","InstantiationService","OptionsService","BufferService","LogService","ILogService","CoreService","CoreMouseService","ICoreMouseService","_dirtyRowService","DirtyRowService","IDirtyRowService","unicodeService","UnicodeService","IUnicodeService","_charsetService","CharsetService","ICharsetService","OscLinkService","InputHandler","onData","onBinary","markRangeDirty","scrollBottom","_writeBuffer","WriteBuffer","parse","onWriteParsed","_onScrollApi","_windowsMode","writeSync","LogLevelEnum","WARN","isNaN","MINIMUM_COLS","MINIMUM_ROWS","scroll","scrollPages","scrollToTop","scrollToLine","registerEscHandler","registerDcsHandler","registerCsiHandler","registerOscHandler","windowsMode","_enableWindowsMode","updateWindowsModeWrappedState","final","_listeners","_disposed","_event","setWinLines","restoreWin","minimizeWin","setWinPosition","setWinSizePixels","raiseWin","lowerWin","refreshWin","setWinSizeChars","maximizeWin","fullscreenWin","getWinState","getWinPosition","getWinSizePixels","getScreenSizePixels","getCellSizePixels","getWinSizeChars","getScreenSizeChars","getIconTitle","getWinTitle","pushTitle","popTitle","EscapeSequenceParser","_coreMouseService","_unicodeService","_parser","_parseBuffer","Uint32Array","_stringDecoder","StringToUtf32","_utf8Decoder","Utf8ToUtf32","_windowTitle","_iconName","_windowTitleStack","_iconNameStack","_curAttrData","_eraseAttrDataInternal","_onRequestBell","_onRequestRefreshRows","_onRequestReset","_onRequestSendFocus","_onRequestSyncScrollBar","_onRequestWindowsOptionsReport","_onA11yChar","_onA11yTab","_onColor","_parseStack","paused","cursorStartX","cursorStartY","decodedLength","_specialColors","setCsiHandlerFallback","identifier","identToString","params","toArray","setEscHandlerFallback","setExecuteHandlerFallback","code","setOscHandlerFallback","setDcsHandlerFallback","payload","setPrintHandler","print","insertChars","intermediates","scrollLeft","cursorUp","scrollRight","cursorDown","cursorForward","cursorBackward","cursorNextLine","cursorPrecedingLine","cursorCharAbsolute","cursorPosition","cursorForwardTab","eraseInDisplay","prefix","eraseInLine","insertLines","deleteLines","deleteChars","scrollUp","scrollDown","eraseChars","cursorBackwardTab","charPosAbsolute","hPositionRelative","repeatPrecedingCharacter","sendDeviceAttributesPrimary","sendDeviceAttributesSecondary","linePosAbsolute","vPositionRelative","hVPosition","tabClear","setMode","setModePrivate","resetMode","resetModePrivate","charAttributes","deviceStatus","deviceStatusPrivate","softReset","setCursorStyle","setScrollRegion","saveCursor","windowOptions","restoreCursor","insertColumns","deleteColumns","selectProtected","requestMode","setExecuteHandler","BEL","bell","LF","lineFeed","VT","FF","carriageReturn","BS","backspace","HT","tab","SO","shiftOut","SI","shiftIn","C1","IND","NEL","nextLine","HTS","tabSet","OscHandler","setTitle","setIconName","setOrReportIndexedColor","setHyperlink","setOrReportFgColor","setOrReportBgColor","setOrReportCursorColor","restoreIndexedColor","restoreFgColor","restoreBgColor","restoreCursorColor","reverseIndex","keypadApplicationMode","keypadNumericMode","fullReset","setgLevel","selectDefaultCharset","CHARSETS","selectCharset","screenAlignmentPattern","setErrorHandler","DcsHandler","requestStatusString","getAttrData","_preserveStack","_logSlowResolvingAsync","Promise","race","catch","DEBUG","prototype","clearRange","decode","subarray","charset","wraparound","modes","insertMode","markDirty","setCellFromCodePoint","wcwidth","stringFromCodePoint","_currentLinkId","addLineToLink","_eraseAttrData","insertCells","getNullCell","NULL_CELL_WIDTH","addCodepointToCell","precedingCodepoint","convertEol","reverseWraparound","_restrictCursor","nextStop","_setCursor","_moveCursor","tabs","prevStop","_eraseInBufferLine","replaceCells","_resetBufferLine","fill","clearMarkers","deleteCells","_is","termName","setgCharset","DEFAULT_CHARSET","applicationKeypad","activeEncoding","activateAltBuffer","activateNormalBuffer","_updateAttrColor","fromColorRGB","_extractColor","hasSubParams","getSubParams","underlineColor","_processUnderline","updateExtended","savedX","savedY","savedCurAttrData","savedCharset","_savedCharset","exec","parseColor","_createHyperlink","_finishHyperlink","findIndex","startsWith","registerLink","_setOrReportSpecialColor","markAllDirty","isProtected","block","bar","toDisposable","_disposables","unregister","FourKeyMap","_data","isIphone","isIpad","isSafari","navigator","userAgent","platform","includes","test","SortedList","_getKey","insert","_search","getKeyIterator","forEachByKey","values","concat","fillFallback","CHAR_DATA_CODE_INDEX","WHITESPACE_CELL_CODE","ExtendedAttrs","isBlink","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","isEmpty","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","_ext","_urlId","ext","BufferStringIterator","Buffer","MAX_BUFFER_SIZE","_hasScrollback","_nullCell","fromCharData","NULL_CELL_CHAR","_whitespaceCell","WHITESPACE_CELL_WIDTH","_isClearing","_cols","_rows","_getCorrectBufferLength","getWhitespaceCell","BufferLine","scrollback","fillViewportRows","_isReflowEnabled","_reflow","_reflowLarger","_reflowSmaller","reflowLargerGetLinesToRemove","reflowLargerCreateNewLayout","reflowLargerApplyNewLayout","layout","_reflowLargerAdjustViewport","countRemoved","reflowSmallerGetNewLineLengths","newLines","copyCellsFrom","getWrappedLineTrimmedLength","setCell","stringIndexToBufferIndex","CHAR_DATA_WIDTH_INDEX","CHAR_DATA_CHAR_INDEX","tabStopWidth","Marker","_removeMarker","iterator","_buffer","_trimRight","_endIndex","_startOverscan","_endOverscan","_current","hasNext","next","startIndex","_combined","_extendedAttrs","CHAR_DATA_ATTR_INDEX","keys","copyFrom","reduce","BufferSet","_normal","_alt","inactiveBuffer","DEFAULT_EXT","DEFAULT_ATTR","DEFAULT_COLOR","_id","_nextId","isDisposed","_onDispose","j","q","z","Q","K","Y","Z","H","NUL","SOH","STX","EOT","ENQ","ACK","DLE","DC1","DC2","DC3","DC4","NAK","SYN","ETB","CAN","EM","SUB","FS","GS","RS","US","SP","PAD","HOP","BPH","NBH","SSA","ESA","HTJ","VTS","PLD","PLU","RI","SS2","SS3","DCS","PU1","PU2","STS","CCH","MW","SPA","EPA","SOS","SGCI","SCI","CSI","OSC","PM","APC","toUpperCase","toLowerCase","utf32ToString","_interim","interim","Uint8Array","UnicodeV6","version","queueMicrotask","resolve","then","_action","_callbacks","_pendingData","_bufferOffset","_isSyncWriting","_syncCalls","_innerWrite","PAYLOAD_LIMIT","DcsParser","_handlers","create","_active","_ident","_handlerFb","_stack","loopPosition","fallThrough","registerHandler","clearHandler","setHandlerFallback","unhook","hook","put","Params","addParam","_handler","_params","_hitLimit","VT500_TRANSITION_TABLE","TransitionTable","table","setDefault","addMany","apply","_transitions","handlers","handlerPos","transition","chunkPos","initialState","currentState","_collect","_printHandlerFb","_executeHandlerFb","_csiHandlerFb","_escHandlerFb","_errorHandlerFb","_printHandler","_executeHandlers","_csiHandlers","_escHandlers","_oscParser","OscParser","_dcsParser","_errorHandler","_identifier","reverse","clearPrintHandler","clearEscHandler","clearExecuteHandler","clearCsiHandler","clearDcsHandler","clearOscHandler","clearErrorHandler","collect","abort","addSubParam","addDigit","_state","_start","_put","maxSubParamsLength","Int32Array","_subParams","_subParamsLength","_subParamsIdx","Uint16Array","_rejectDigits","_rejectSubDigits","_digitIsSub","fromArray","getSubParamsAll","AddonManager","_addons","instance","loadAddon","_wrappedAddonDispose","BufferApiView","init","cursorY","cursorX","viewportY","baseY","getLine","BufferLineApiView","_line","getCell","BufferNamespaceApi","_core","_onBufferChange","_alternate","onBufferChange","alternate","ParserApi","addCsiHandler","addDcsHandler","addEscHandler","addOscHandler","UnicodeApi","versions","activeVersion","isUserScrolling","_cachedBlankLine","glevel","_charsets","NONE","events","restrict","X10","VT200","DRAG","ANY","_protocols","_encodings","_activeProtocol","_activeEncoding","_onProtocolChange","_lastEvent","addProtocol","addEncoding","_equalEvents","triggerBinaryEvent","down","up","drag","move","_onUserInput","_scrollToBottom","disableStdin","xmin","xmax","_decorations","_onDecorationRegistered","_onDecorationRemoved","getDecorationsAtCell","_cachedBg","_cachedFg","foregroundColor","_end","ServiceCollection","_entries","_services","getService","getServiceDependencies","sort","name","info","INFO","ERROR","off","OFF","_updateLogLevel","_evalLazyOptionalParams","_log","log","DEFAULT_OPTIONS","customGlyphs","allowProposedApi","_onOptionChange","assign","_sanitizeAndValidateOption","_setupOptions","_entriesWithId","_dataByLinkId","_removeMarkerFromLink","_getEntryIdKey","every","serviceRegistry","di$dependencies","di$target","_providers","_onChange","_activeProvider","onChange","getStringCellWidth","_addonManager","_publicOptions","_checkReadonlyOptions","_checkProposedApi","parser","unicode","applicationCursorKeysMode","applicationKeypadMode","mouseTrackingMode","originMode","reverseWraparoundMode","sendFocusMode","wraparoundMode","_verifyIntegers","registerMarker","_verifyPositiveIntegers","writeln","strings"],"sourceRoot":""}