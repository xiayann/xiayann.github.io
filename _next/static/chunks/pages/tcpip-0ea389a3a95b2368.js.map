{"version":3,"file":"static/chunks/pages/tcpip-0ea389a3a95b2368.js","mappings":"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","sources":["webpack://_N_E/?e773","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Text/Text.view.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Text/Text.ts","webpack://_N_E/./src/pages/tcpip.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return require(\"private-next-pages/tcpip.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/tcpip\"])\n      });\n    }\n  ","/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport { withSlots, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport type { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  // eslint-disable-next-line eqeqeq\n  if (props.children == null) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n","import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n","import * as React from 'react';\nimport { createComponent } from '@fluentui/foundation-legacy';\nimport { TextView } from './Text.view';\nimport { TextStyles as styles } from './Text.styles';\nimport type { ITextProps } from './Text.types';\n\nexport const Text: React.FunctionComponent<ITextProps> = createComponent(TextView, {\n  displayName: 'Text',\n  styles,\n});\n\nexport default Text;\n","// cspell: ignore addrs\n\nimport { ICommandBarItemProps, MessageBar, Stack, StackItem, Text, TextField, Toggle } from \"@fluentui/react\";\nimport { autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect } from \"react\";\nimport { CommandBar, ExternalLink } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { asyncEffect, Icons, RouteStackProps } from \"../utils\";\n\nclass TcpIpState {\n    initial = true;\n    visible = false;\n    serviceListenAddresses: string[] | undefined = undefined;\n    servicePortEnabled = false;\n    servicePort: string = '';\n    persistPortEnabled = false;\n    persistPort: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false,\n        });\n\n\n        autorun(() => {\n            if (GlobalState.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'refresh',\n                disabled: !GlobalState.device,\n                iconProps: { iconName: Icons.ArrowClockwise },\n                text: 'Refresh',\n                onClick: this.queryInfo as VoidFunction,\n            },\n            {\n                key: 'apply',\n                disabled: !GlobalState.device,\n                iconProps: { iconName: Icons.Save },\n                text: 'Apply',\n                onClick: this.applyServicePort,\n            }\n        ];\n    }\n\n    queryInfo = asyncEffect(async (signal) => {\n        if (!GlobalState.device) {\n            runInAction(() => {\n                this.serviceListenAddresses = undefined;\n                this.servicePortEnabled = false;\n                this.servicePort = '';\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            });\n            return;\n        }\n\n        const serviceListenAddresses = await GlobalState.device.getProp('service.adb.listen_addrs');\n        const servicePort = await GlobalState.device.getProp('service.adb.tcp.port');\n        const persistPort = await GlobalState.device.getProp('persist.adb.tcp.port');\n\n        if (signal.aborted) {\n            return;\n        }\n\n        runInAction(() => {\n            this.serviceListenAddresses = serviceListenAddresses !== '' ? serviceListenAddresses.split(',') : undefined;\n\n            if (servicePort) {\n                this.servicePortEnabled = !serviceListenAddresses && servicePort !== '0';\n                this.servicePort = servicePort;\n            } else {\n                this.servicePortEnabled = false;\n                this.servicePort = '5555';\n            }\n\n            if (persistPort) {\n                this.persistPortEnabled = !serviceListenAddresses && !servicePort;\n                this.persistPort = persistPort;\n            } else {\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            }\n        });\n    });\n\n    applyServicePort = async () => {\n        if (!GlobalState.device) {\n            return;\n        }\n\n        if (state.servicePortEnabled) {\n            await GlobalState.device.tcpip.setPort(Number.parseInt(state.servicePort, 10));\n        } else {\n            await GlobalState.device.tcpip.disable();\n        }\n    };\n}\n\nconst state = new TcpIpState();\n\nconst TcpIp: NextPage = () => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const handleServicePortEnabledChange = useCallback((e: unknown, value?: boolean) => {\n        runInAction(() => { state.servicePortEnabled = !!value; });\n    }, []);\n\n    const handleServicePortChange = useCallback((e: unknown, value?: string) => {\n        if (value === undefined) {\n            return;\n        }\n        runInAction(() => state.servicePort = value);\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>ADB over WiFi - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem>\n                <MessageBar>\n                    <Text>\n                        For WebADB to wirelessly connect to your device,\n                        <ExternalLink href=\"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\" spaceBefore spaceAfter>extra software</ExternalLink>\n                        is required.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.serviceListenAddresses?.map((address) => (\n                    <TextField\n                        key={address}\n                        disabled\n                        value={address}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={state.servicePortEnabled}\n                    disabled={!GlobalState.device || !!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                <TextField\n                    disabled={!GlobalState.device || !!state.serviceListenAddresses}\n                    value={state.servicePort}\n                    styles={{ root: { width: 300 } }}\n                    onChange={handleServicePortChange}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={state.persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.persistPort && (\n                    <TextField\n                        disabled\n                        value={state.persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(TcpIp);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        // reset forced colors to browser control for inner actions\n        forcedColorAdjust: 'auto',\n        MsHighContrastAdjust: 'auto',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[205],{\n\n/***/ 3453:\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return __webpack_require__(8256);\n      }\n    ]);\n    if(false) {}\n  \n\n/***/ }),\n\n/***/ 8256:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ tcpip; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4471);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Stack/Stack.js + 2 modules\nvar Stack = __webpack_require__(1887);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js\nvar StackItem = __webpack_require__(9899);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.js + 2 modules\nvar MessageBar = __webpack_require__(1490);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+foundation-legacy@8.2.24_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/foundation-legacy/lib/createComponent.js\nvar createComponent = __webpack_require__(9830);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+foundation-legacy@8.2.24_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/foundation-legacy/lib/slots.js\nvar slots = __webpack_require__(6527);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Text/Text.view.js\n\n/** @jsxRuntime classic */\n/** @jsx withSlots */\n\n\nvar TextView = function (props) {\n    // eslint-disable-next-line eqeqeq\n    if (props.children == null) {\n        return null;\n    }\n    var block = props.block, className = props.className, _a = props.as, RootType = _a === void 0 ? 'span' : _a, variant = props.variant, nowrap = props.nowrap, rest = (0,tslib_es6/* __rest */._T)(props, [\"block\", \"className\", \"as\", \"variant\", \"nowrap\"]);\n    var Slots = (0,slots/* getSlots */.FJ)(props, {\n        root: RootType,\n    });\n    return (0,slots/* withSlots */.Yb)(Slots.root, (0,tslib_es6/* __assign */.pi)({}, (0,properties/* getNativeProps */.pq)(rest, properties/* htmlElementProperties */.iY)));\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Text/Text.styles.js\nvar TextStyles = function (props, theme) {\n    var as = props.as, className = props.className, block = props.block, nowrap = props.nowrap, variant = props.variant;\n    var fonts = theme.fonts, semanticColors = theme.semanticColors;\n    var variantObject = fonts[variant || 'medium'];\n    return {\n        root: [\n            variantObject,\n            {\n                color: variantObject.color || semanticColors.bodyText,\n                display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n                mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n                webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n            },\n            nowrap && {\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n            },\n            className,\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Text/Text.js\n\n\n\nvar Text = (0,createComponent/* createComponent */.L)(TextView, {\n    displayName: 'Text',\n    styles: TextStyles,\n});\n/* harmony default export */ var Text_Text = ((/* unused pure expression or super */ null && (Text)));\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Toggle/Toggle.js + 2 modules\nvar Toggle = __webpack_require__(7738);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/TextField/TextField.js + 5 modules\nvar TextField = __webpack_require__(2081);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/mobx@6.7.0/node_modules/mobx/dist/mobx.esm.js\nvar mobx_esm = __webpack_require__(6323);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/mobx-react-lite@3.4.0_jofyzmwkboewm6mjrhi25mngky/node_modules/mobx-react-lite/es/index.js + 16 modules\nvar es = __webpack_require__(6779);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/next@13.0.3_biqbaboplfbrettd7655fr4n2y/node_modules/next/head.js\nvar head = __webpack_require__(3591);\nvar head_default = /*#__PURE__*/__webpack_require__.n(head);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ./src/components/index.ts + 16 modules\nvar components = __webpack_require__(4347);\n// EXTERNAL MODULE: ./src/state/index.ts + 1 modules\nvar state = __webpack_require__(2344);\n// EXTERNAL MODULE: ./src/utils/index.ts + 4 modules\nvar utils = __webpack_require__(5155);\n;// CONCATENATED MODULE: ./src/pages/tcpip.tsx\n// cspell: ignore addrs\n\n\n\n\n\n\n\n\n\nclass TcpIpState {\n    get commandBarItems() {\n        return [\n            {\n                key: \"refresh\",\n                disabled: !state/* GlobalState.device */.q.device,\n                iconProps: {\n                    iconName: utils/* Icons.ArrowClockwise */.PJ.ArrowClockwise\n                },\n                text: \"Refresh\",\n                onClick: this.queryInfo\n            },\n            {\n                key: \"apply\",\n                disabled: !state/* GlobalState.device */.q.device,\n                iconProps: {\n                    iconName: utils/* Icons.Save */.PJ.Save\n                },\n                text: \"Apply\",\n                onClick: this.applyServicePort\n            }\n        ];\n    }\n    constructor(){\n        this.initial = true;\n        this.visible = false;\n        this.serviceListenAddresses = undefined;\n        this.servicePortEnabled = false;\n        this.servicePort = \"\";\n        this.persistPortEnabled = false;\n        this.persistPort = undefined;\n        this.queryInfo = (0,utils/* asyncEffect */.FW)(async (signal)=>{\n            if (!state/* GlobalState.device */.q.device) {\n                (0,mobx_esm/* runInAction */.z)(()=>{\n                    this.serviceListenAddresses = undefined;\n                    this.servicePortEnabled = false;\n                    this.servicePort = \"\";\n                    this.persistPortEnabled = false;\n                    this.persistPort = undefined;\n                });\n                return;\n            }\n            const serviceListenAddresses = await state/* GlobalState.device.getProp */.q.device.getProp(\"service.adb.listen_addrs\");\n            const servicePort = await state/* GlobalState.device.getProp */.q.device.getProp(\"service.adb.tcp.port\");\n            const persistPort = await state/* GlobalState.device.getProp */.q.device.getProp(\"persist.adb.tcp.port\");\n            if (signal.aborted) {\n                return;\n            }\n            (0,mobx_esm/* runInAction */.z)(()=>{\n                this.serviceListenAddresses = serviceListenAddresses !== \"\" ? serviceListenAddresses.split(\",\") : undefined;\n                if (servicePort) {\n                    this.servicePortEnabled = !serviceListenAddresses && servicePort !== \"0\";\n                    this.servicePort = servicePort;\n                } else {\n                    this.servicePortEnabled = false;\n                    this.servicePort = \"5555\";\n                }\n                if (persistPort) {\n                    this.persistPortEnabled = !serviceListenAddresses && !servicePort;\n                    this.persistPort = persistPort;\n                } else {\n                    this.persistPortEnabled = false;\n                    this.persistPort = undefined;\n                }\n            });\n        });\n        this.applyServicePort = async ()=>{\n            if (!state/* GlobalState.device */.q.device) {\n                return;\n            }\n            if (tcpip_state.servicePortEnabled) {\n                await state/* GlobalState.device.tcpip.setPort */.q.device.tcpip.setPort(Number.parseInt(tcpip_state.servicePort, 10));\n            } else {\n                await state/* GlobalState.device.tcpip.disable */.q.device.tcpip.disable();\n            }\n        };\n        (0,mobx_esm/* makeAutoObservable */.ky)(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false\n        });\n        (0,mobx_esm/* autorun */.EH)(()=>{\n            if (state/* GlobalState.device */.q.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n}\nconst tcpip_state = new TcpIpState();\nconst TcpIp = ()=>{\n    var ref;\n    (0,react.useEffect)(()=>{\n        (0,mobx_esm/* runInAction */.z)(()=>{\n            tcpip_state.visible = true;\n        });\n        return ()=>{\n            (0,mobx_esm/* runInAction */.z)(()=>{\n                tcpip_state.visible = false;\n            });\n        };\n    });\n    const handleServicePortEnabledChange = (0,react.useCallback)((e, value)=>{\n        (0,mobx_esm/* runInAction */.z)(()=>{\n            tcpip_state.servicePortEnabled = !!value;\n        });\n    }, []);\n    const handleServicePortChange = (0,react.useCallback)((e, value)=>{\n        if (value === undefined) {\n            return;\n        }\n        (0,mobx_esm/* runInAction */.z)(()=>tcpip_state.servicePort = value);\n    }, []);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(Stack/* Stack */.K, {\n        ...utils/* RouteStackProps */.LE,\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)((head_default()), {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"title\", {\n                    children: \"ADB over WiFi - Android Web Toolbox\"\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(components/* CommandBar */.X3, {\n                items: tcpip_state.commandBarItems\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(StackItem/* StackItem */.v, {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(MessageBar/* MessageBar */.c, {\n                    children: /*#__PURE__*/ (0,jsx_runtime.jsxs)(Text, {\n                        children: [\n                            \"For WebADB to wirelessly connect to your device,\",\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(components/* ExternalLink */.dL, {\n                                href: \"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\",\n                                spaceBefore: true,\n                                spaceAfter: true,\n                                children: \"extra software\"\n                            }),\n                            \"is required.\"\n                        ]\n                    })\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(StackItem/* StackItem */.v, {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(MessageBar/* MessageBar */.c, {\n                    children: /*#__PURE__*/ (0,jsx_runtime.jsx)(Text, {\n                        children: \"Your device will disconnect after changing ADB over WiFi config.\"\n                    })\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(StackItem/* StackItem */.v, {\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(Toggle/* Toggle */.Z, {\n                        inlineLabel: true,\n                        label: \"service.adb.listen_addrs\",\n                        disabled: true,\n                        checked: !!tcpip_state.serviceListenAddresses,\n                        onText: \"Enabled\",\n                        offText: \"Disabled\"\n                    }),\n                    (ref = tcpip_state.serviceListenAddresses) === null || ref === void 0 ? void 0 : ref.map((address)=>/*#__PURE__*/ (0,jsx_runtime.jsx)(TextField/* TextField */.n, {\n                            disabled: true,\n                            value: address,\n                            styles: {\n                                root: {\n                                    width: 300\n                                }\n                            }\n                        }, address))\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(StackItem/* StackItem */.v, {\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(Toggle/* Toggle */.Z, {\n                        inlineLabel: true,\n                        label: \"service.adb.tcp.port\",\n                        checked: tcpip_state.servicePortEnabled,\n                        disabled: !state/* GlobalState.device */.q.device || !!tcpip_state.serviceListenAddresses,\n                        onText: \"Enabled\",\n                        offText: \"Disabled\",\n                        onChange: handleServicePortEnabledChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(TextField/* TextField */.n, {\n                        disabled: !state/* GlobalState.device */.q.device || !!tcpip_state.serviceListenAddresses,\n                        value: tcpip_state.servicePort,\n                        styles: {\n                            root: {\n                                width: 300\n                            }\n                        },\n                        onChange: handleServicePortChange\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(StackItem/* StackItem */.v, {\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(Toggle/* Toggle */.Z, {\n                        inlineLabel: true,\n                        label: \"persist.adb.tcp.port\",\n                        disabled: true,\n                        checked: tcpip_state.persistPortEnabled,\n                        onText: \"Enabled\",\n                        offText: \"Disabled\"\n                    }),\n                    tcpip_state.persistPort && /*#__PURE__*/ (0,jsx_runtime.jsx)(TextField/* TextField */.n, {\n                        disabled: true,\n                        value: tcpip_state.persistPort,\n                        styles: {\n                            root: {\n                                width: 300\n                            }\n                        }\n                    })\n                ]\n            })\n        ]\n    });\n};\n/* harmony default export */ var tcpip = ((0,es/* observer */.Pi)(TcpIp));\n\n\n/***/ }),\n\n/***/ 1490:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"c\": function() { return /* binding */ MessageBar; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/css.js\nvar css = __webpack_require__(6799);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/DelayedRender.js\nvar DelayedRender = __webpack_require__(8262);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.js + 1 modules\nvar IconButton = __webpack_require__(1197);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/Icon.js + 2 modules\nvar Icon = __webpack_require__(8415);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.types.js\nvar MessageBar_types = __webpack_require__(8290);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useBoolean.js\nvar useBoolean = __webpack_require__(6807);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useId.js\nvar useId = __webpack_require__(4976);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.base.js\nvar _a;\n\n\n\n\n\n\n\nvar ICON_MAP = (_a = {},\n    _a[MessageBar_types/* MessageBarType.info */.f.info] = 'Info',\n    _a[MessageBar_types/* MessageBarType.warning */.f.warning] = 'Info',\n    _a[MessageBar_types/* MessageBarType.error */.f.error] = 'ErrorBadge',\n    _a[MessageBar_types/* MessageBarType.blocked */.f.blocked] = 'Blocked2',\n    _a[MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning] = 'Warning',\n    _a[MessageBar_types/* MessageBarType.success */.f.success] = 'Completed',\n    _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar getAnnouncementPriority = function (messageBarType) {\n    switch (messageBarType) {\n        case MessageBar_types/* MessageBarType.blocked */.f.blocked:\n        case MessageBar_types/* MessageBarType.error */.f.error:\n        case MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning:\n            return 'assertive';\n    }\n    return 'polite';\n};\nvar getRole = function (messageBarType) {\n    switch (messageBarType) {\n        case MessageBar_types/* MessageBarType.blocked */.f.blocked:\n        case MessageBar_types/* MessageBarType.error */.f.error:\n        case MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning:\n            return 'alert';\n    }\n    return 'status';\n};\nvar MessageBarBase = react.forwardRef(function (props, ref) {\n    var _a = (0,useBoolean/* useBoolean */.k)(false), expandSingleLine = _a[0], toggleExpandSingleLine = _a[1].toggle;\n    var labelId = (0,useId/* useId */.M)('MessageBar');\n    var actions = props.actions, className = props.className, children = props.children, \n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel = props.overflowButtonAriaLabel, dismissIconProps = props.dismissIconProps, styles = props.styles, theme = props.theme, _b = props.messageBarType, messageBarType = _b === void 0 ? MessageBar_types/* MessageBarType.info */.f.info : _b, _c = props.onDismiss, onDismiss = _c === void 0 ? undefined : _c, _d = props.isMultiline, isMultiline = _d === void 0 ? true : _d, truncated = props.truncated, dismissButtonAriaLabel = props.dismissButtonAriaLabel, messageBarIconProps = props.messageBarIconProps, role = props.role, _e = props.delayedRender, delayedRender = _e === void 0 ? true : _e, expandButtonProps = props.expandButtonProps;\n    var nativeProps = (0,properties/* getNativeProps */.pq)(props, properties/* htmlElementProperties */.iY, [\n        'className',\n        'role',\n    ]);\n    var classNames = getClassNames(styles, {\n        theme: theme,\n        messageBarType: messageBarType || MessageBar_types/* MessageBarType.info */.f.info,\n        onDismiss: onDismiss !== undefined,\n        actions: actions !== undefined,\n        truncated: truncated,\n        isMultiline: isMultiline,\n        expandSingleLine: expandSingleLine,\n        className: className,\n    });\n    var expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n    var regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n    var actionsDiv = actions ? react.createElement(\"div\", { className: classNames.actions }, actions) : null;\n    var dismissButton = onDismiss ? (react.createElement(IconButton/* IconButton */.h, { disabled: false, className: classNames.dismissal, onClick: onDismiss, iconProps: dismissIconProps ? dismissIconProps : { iconName: 'Clear' }, title: dismissButtonAriaLabel, ariaLabel: dismissButtonAriaLabel })) : null;\n    return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ ref: ref, className: classNames.root }, regionProps),\n        react.createElement(\"div\", { className: classNames.content },\n            react.createElement(\"div\", { className: classNames.iconContainer, \"aria-hidden\": true }, messageBarIconProps ? (react.createElement(Icon/* Icon */.J, (0,tslib_es6/* __assign */.pi)({}, messageBarIconProps, { className: (0,css/* css */.i)(classNames.icon, messageBarIconProps.className) }))) : (react.createElement(Icon/* Icon */.J, { iconName: ICON_MAP[messageBarType], className: classNames.icon }))),\n            react.createElement(\"div\", { className: classNames.text, id: labelId, role: role || getRole(messageBarType), \"aria-live\": getAnnouncementPriority(messageBarType) },\n                react.createElement(\"span\", (0,tslib_es6/* __assign */.pi)({ className: classNames.innerText }, nativeProps), delayedRender ? (react.createElement(DelayedRender/* DelayedRender */.U, null,\n                    react.createElement(\"span\", null, children))) : (\n                // this span is probably not necessary, but preserving it for now in case anyone\n                // has styling that expects it to be present\n                react.createElement(\"span\", null, children)))),\n            /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (react.createElement(\"div\", { className: classNames.expandSingleLine },\n                react.createElement(IconButton/* IconButton */.h, (0,tslib_es6/* __assign */.pi)({ disabled: false, className: classNames.expand, onClick: toggleExpandSingleLine, iconProps: expandIconProps, ariaLabel: overflowButtonAriaLabel, \"aria-expanded\": expandSingleLine }, expandButtonProps)))),\n            !isMultiline && actionsDiv,\n            /* singleline dismiss */ !isMultiline && dismissButton && (react.createElement(\"div\", { className: classNames.dismissSingleLine }, dismissButton)),\n            isMultiline && dismissButton),\n        isMultiline && actionsDiv));\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.styles.js\nvar MessageBar_styles_a, _b, _c;\n\n\n\nvar GlobalClassNames = {\n    root: 'ms-MessageBar',\n    error: 'ms-MessageBar--error',\n    blocked: 'ms-MessageBar--blocked',\n    severeWarning: 'ms-MessageBar--severeWarning',\n    success: 'ms-MessageBar--success',\n    warning: 'ms-MessageBar--warning',\n    multiline: 'ms-MessageBar-multiline',\n    singleline: 'ms-MessageBar-singleline',\n    dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n    expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n    content: 'ms-MessageBar-content',\n    iconContainer: 'ms-MessageBar-icon',\n    text: 'ms-MessageBar-text',\n    innerText: 'ms-MessageBar-innerText',\n    dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n    expandSingleLine: 'ms-MessageBar-expandSingleLine',\n    dismissal: 'ms-MessageBar-dismissal',\n    expand: 'ms-MessageBar-expand',\n    actions: 'ms-MessageBar-actions',\n    actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\nvar backgroundColor = (MessageBar_styles_a = {},\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.error */.f.error] = 'errorBackground',\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.blocked */.f.blocked] = 'errorBackground',\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.success */.f.success] = 'successBackground',\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.warning */.f.warning] = 'warningBackground',\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning] = 'severeWarningBackground',\n    MessageBar_styles_a[MessageBar_types/* MessageBarType.info */.f.info] = 'infoBackground',\n    MessageBar_styles_a);\nvar highContrastBackgroundColor = (_b = {},\n    _b[MessageBar_types/* MessageBarType.error */.f.error] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBar_types/* MessageBarType.blocked */.f.blocked] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBar_types/* MessageBarType.success */.f.success] = 'rgba(48, 241, 73, 0.3)',\n    _b[MessageBar_types/* MessageBarType.warning */.f.warning] = 'rgba(255, 254, 57, 0.3)',\n    _b[MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBar_types/* MessageBarType.info */.f.info] = 'Window',\n    _b);\nvar iconColor = (_c = {},\n    _c[MessageBar_types/* MessageBarType.error */.f.error] = 'errorIcon',\n    _c[MessageBar_types/* MessageBarType.blocked */.f.blocked] = 'errorIcon',\n    _c[MessageBar_types/* MessageBarType.success */.f.success] = 'successIcon',\n    _c[MessageBar_types/* MessageBarType.warning */.f.warning] = 'warningIcon',\n    _c[MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning] = 'severeWarningIcon',\n    _c[MessageBar_types/* MessageBarType.info */.f.info] = 'infoIcon',\n    _c);\nvar getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var theme = props.theme, className = props.className, onDismiss = props.onDismiss, truncated = props.truncated, isMultiline = props.isMultiline, expandSingleLine = props.expandSingleLine, _f = props.messageBarType, messageBarType = _f === void 0 ? MessageBar_types/* MessageBarType.info */.f.info : _f;\n    var semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var SmallScreenSelector = (0,lib/* getScreenSelector */.sK)(0, lib/* ScreenWidthMaxSmall */.mV);\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GlobalClassNames, theme);\n    var dismissalAndExpandIconStyle = {\n        fontSize: lib/* IconFontSizes.xSmall */.ld.xSmall,\n        height: 10,\n        lineHeight: '10px',\n        color: semanticColors.messageText,\n        selectors: (_a = {},\n            _a[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, (0,lib/* getHighContrastNoAdjustStyle */.xM)()), { color: 'WindowText' }),\n            _a),\n    };\n    var dismissalAndExpandStyle = [\n        (0,lib/* getFocusStyle */.GL)(theme, {\n            inset: 1,\n            highContrastStyle: {\n                outlineOffset: '-6px',\n                outline: '1px solid Highlight',\n            },\n            borderColor: 'transparent',\n        }),\n        {\n            flexShrink: 0,\n            width: 32,\n            height: 32,\n            padding: '8px 12px',\n            selectors: {\n                '& .ms-Button-icon': dismissalAndExpandIconStyle,\n                ':hover': {\n                    backgroundColor: 'transparent',\n                },\n                ':active': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n    ];\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            messageBarType === MessageBar_types/* MessageBarType.error */.f.error && classNames.error,\n            messageBarType === MessageBar_types/* MessageBarType.blocked */.f.blocked && classNames.blocked,\n            messageBarType === MessageBar_types/* MessageBarType.severeWarning */.f.severeWarning && classNames.severeWarning,\n            messageBarType === MessageBar_types/* MessageBarType.success */.f.success && classNames.success,\n            messageBarType === MessageBar_types/* MessageBarType.warning */.f.warning && classNames.warning,\n            isMultiline ? classNames.multiline : classNames.singleline,\n            !isMultiline && onDismiss && classNames.dismissalSingleLine,\n            !isMultiline && truncated && classNames.expandingSingleLine,\n            {\n                background: semanticColors[backgroundColor[messageBarType]],\n                color: semanticColors.messageText,\n                minHeight: 32,\n                width: '100%',\n                display: 'flex',\n                wordBreak: 'break-word',\n                selectors: (_b = {\n                        '.ms-Link': {\n                            color: semanticColors.messageLink,\n                            selectors: {\n                                ':hover': {\n                                    color: semanticColors.messageLinkHovered,\n                                },\n                            },\n                        }\n                    },\n                    _b[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, (0,lib/* getHighContrastNoAdjustStyle */.xM)()), { background: highContrastBackgroundColor[messageBarType], border: '1px solid WindowText', color: 'WindowText' }),\n                    _b),\n            },\n            isMultiline && {\n                flexDirection: 'column',\n            },\n            className,\n        ],\n        content: [\n            classNames.content,\n            {\n                display: 'flex',\n                width: '100%',\n                lineHeight: 'normal',\n            },\n        ],\n        iconContainer: [\n            classNames.iconContainer,\n            {\n                fontSize: lib/* IconFontSizes.medium */.ld.medium,\n                minWidth: 16,\n                minHeight: 16,\n                display: 'flex',\n                flexShrink: 0,\n                margin: '8px 0 8px 12px',\n            },\n        ],\n        icon: {\n            color: semanticColors[iconColor[messageBarType]],\n            selectors: (_c = {},\n                _c[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, (0,lib/* getHighContrastNoAdjustStyle */.xM)()), { color: 'WindowText' }),\n                _c),\n        },\n        text: [\n            classNames.text,\n            (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({ minWidth: 0, display: 'flex', flexGrow: 1, margin: 8 }, fonts.small), { selectors: (_d = {},\n                    _d[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({}, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _d) }),\n            !onDismiss && {\n                marginRight: 12,\n            },\n        ],\n        innerText: [\n            classNames.innerText,\n            {\n                lineHeight: 16,\n                selectors: {\n                    '& span a:last-child': {\n                        paddingLeft: 4,\n                    },\n                },\n            },\n            truncated && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n            !isMultiline && {\n                // In high contrast this causes the top and bottom of links' focus outline to be clipped\n                // (not sure of a good way around that while still maintaining text clipping)\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n            },\n            !isMultiline &&\n                !truncated && {\n                selectors: (_e = {},\n                    _e[SmallScreenSelector] = {\n                        overflow: 'visible',\n                        whiteSpace: 'pre-wrap',\n                    },\n                    _e),\n            },\n            expandSingleLine && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n        ],\n        dismissSingleLine: classNames.dismissSingleLine,\n        expandSingleLine: classNames.expandSingleLine,\n        dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n        expand: [classNames.expand, dismissalAndExpandStyle],\n        actions: [\n            isMultiline ? classNames.actions : classNames.actionsSingleline,\n            {\n                display: 'flex',\n                flexGrow: 0,\n                flexShrink: 0,\n                flexBasis: 'auto',\n                flexDirection: 'row-reverse',\n                alignItems: 'center',\n                margin: '0 12px 0 8px',\n                // reset forced colors to browser control for inner actions\n                forcedColorAdjust: 'auto',\n                MsHighContrastAdjust: 'auto',\n                selectors: {\n                    '& button:nth-child(n+2)': {\n                        marginLeft: 8,\n                    },\n                },\n            },\n            isMultiline && {\n                marginBottom: 8,\n            },\n            onDismiss &&\n                !isMultiline && {\n                marginRight: 0,\n            },\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.js\n\n\n\nvar MessageBar = (0,styled/* styled */.z)(MessageBarBase, getStyles, undefined, {\n    scope: 'MessageBar',\n});\n\n\n/***/ }),\n\n/***/ 8290:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"f\": function() { return /* binding */ MessageBarType; }\n/* harmony export */ });\n/**\n * {@docCategory MessageBar}\n */\nvar MessageBarType;\n(function (MessageBarType) {\n    /** Info styled MessageBar */\n    MessageBarType[MessageBarType[\"info\"] = 0] = \"info\";\n    /** Error styled MessageBar */\n    MessageBarType[MessageBarType[\"error\"] = 1] = \"error\";\n    /** Blocked styled MessageBar */\n    MessageBarType[MessageBarType[\"blocked\"] = 2] = \"blocked\";\n    /** SevereWarning styled MessageBar */\n    MessageBarType[MessageBarType[\"severeWarning\"] = 3] = \"severeWarning\";\n    /** Success styled MessageBar */\n    MessageBarType[MessageBarType[\"success\"] = 4] = \"success\";\n    /** Warning styled MessageBar */\n    MessageBarType[MessageBarType[\"warning\"] = 5] = \"warning\";\n})(MessageBarType || (MessageBarType = {}));\n\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [81,774,888,179], function() { return __webpack_exec__(3453); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__unused_webpack_exports","__webpack_require__","window","__NEXT_P","__webpack_exports__","r","d","tcpip","jsx_runtime","Stack","StackItem","MessageBar","createComponent","tslib_es6","slots","properties","Text","L","props","children","block","className","_a","as","rest","variant","nowrap","_T","Slots","FJ","root","Yb","pi","pq","iY","displayName","styles","theme","fonts","semanticColors","variantObject","color","bodyText","display","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","whiteSpace","overflow","textOverflow","Toggle","TextField","mobx_esm","es","head","head_default","n","react","components","state","utils","tcpip_state","commandBarItems","key","disabled","q","device","iconProps","iconName","PJ","ArrowClockwise","text","onClick","queryInfo","Save","applyServicePort","constructor","initial","visible","serviceListenAddresses","undefined","servicePortEnabled","servicePort","persistPortEnabled","persistPort","FW","signal","z","getProp","aborted","split","setPort","Number","parseInt","disable","ky","EH","TcpIp","ref","useEffect","handleServicePortEnabledChange","useCallback","e","value","handleServicePortChange","jsxs","K","LE","jsx","X3","items","v","c","dL","href","spaceBefore","spaceAfter","Z","inlineLabel","label","checked","onText","offText","map","address","width","onChange","Pi","MessageBar_styles_a","_b","_c","styled","classNamesFunction","css","DelayedRender","IconButton","Icon","MessageBar_types","useBoolean","useId","ICON_MAP","f","info","warning","error","blocked","severeWarning","success","getClassNames","y","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","forwardRef","k","expandSingleLine","toggleExpandSingleLine","toggle","labelId","M","actions","overflowButtonAriaLabel","dismissIconProps","onDismiss","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","classNames","actionsDiv","createElement","dismissButton","h","dismissal","title","ariaLabel","content","iconContainer","J","i","icon","id","innerText","U","expand","dismissSingleLine","lib","GlobalClassNames","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","_f","SmallScreenSelector","sK","mV","Cn","dismissalAndExpandIconStyle","fontSize","ld","xSmall","height","lineHeight","messageText","selectors","qJ","xM","dismissalAndExpandStyle","GL","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","padding","medium","background","minHeight","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","flexBasis","alignItems","forcedColorAdjust","MsHighContrastAdjust","marginLeft","marginBottom","scope","MessageBarType","O","s","_N_E"],"sourceRoot":""}