{"version":3,"file":"static/chunks/pages/logcat-af8dadc43cd11664.js","mappings":"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","sources":["webpack://_N_E/?ad35","webpack://_N_E/../../libraries/b-tree/src/index.ts","webpack://_N_E/./src/pages/logcat.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return require(\"private-next-pages/logcat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/logcat\"])\n      });\n    }\n  ","interface BTreeInsertionResult {\n    key: number;\n    child: BTreeNode;\n}\n\nfunction insert(array: Int32Array, length: number, value: number, index: number) {\n    if (index !== length) {\n        array.set(array.subarray(index, length), index + 1);\n    }\n    array[index] = value;\n}\n\nfunction remove(array: Int32Array, length: number, index: number) {\n    if (index < length - 1) {\n        array.set(array.subarray(index + 1, length), index);\n    }\n}\n\nexport class BTreeNode {\n    order: number;\n    mid: number;\n    minKeyCount: number;\n\n    keys: Int32Array;\n    keyCount: number;\n\n    height: number;\n    children: BTreeNode[];\n\n    public constructor(\n        order: number,\n        keys: Int32Array,\n        keyCount: number,\n        height: number,\n        children: BTreeNode[]\n    ) {\n        this.order = order;\n        this.mid = this.order >> 1;\n        // Math.ceil(order / 2) - 1\n        this.minKeyCount = ((this.order + 1) >> 1) - 1;\n\n        this.keys = keys;\n        this.keyCount = keyCount;\n\n        this.height = height;\n        this.children = children;\n    }\n\n    /**\n     * Split the current node into two\n     * @param value The key to be inserted.\n     * @param index The index of the key to be inserted at.\n     * @param child The child (right to the key) to be inserted. May be undefined when current node is a leaf.\n     * @returns The new key and child need to be inserted to its parent.\n     * The new key is the middle key of the current node, and the child contains the right half of the current node.\n     */\n    protected split(value: number, index: number, child?: BTreeNode): BTreeInsertionResult {\n        let middleKey: number;\n        const rightKeys = new Int32Array(this.order - 1);\n        let rightChildren: BTreeNode[];\n\n        if (index < this.mid) {\n            middleKey = this.keys[this.mid - 1]!;\n            rightKeys.set(this.keys.subarray(this.mid), 0);\n\n            insert(this.keys, this.mid - 1, value, index);\n\n            if (child) {\n                // internal node\n                rightChildren = this.children.splice(this.mid, this.order - this.mid);\n                // TODO: this may cause the underlying array to grow (re-alloc and copy)\n                // investigate if this hurts performance.\n                this.children.splice(index + 1, 0, child);\n            } else {\n                // leaf node, doesn't have children, create am empty array for it.\n                rightChildren = new Array(this.order);\n            }\n        } else {\n            if (index === this.mid) {\n                middleKey = value;\n                rightKeys.set(this.keys.subarray(this.mid), 0);\n            } else {\n                middleKey = this.keys[this.mid]!;\n                if (index !== this.mid + 1) {\n                    rightKeys.set(this.keys.subarray(this.mid + 1, index), 0);\n                }\n                rightKeys[index - this.mid - 1] = value;\n                rightKeys.set(this.keys.subarray(index), index - this.mid);\n            }\n\n            if (child) {\n                rightChildren = this.children.splice(this.mid + 1, this.order - this.mid - 1);\n                rightChildren.splice(index - this.mid, 0, child);\n            } else {\n                rightChildren = new Array(this.order);\n            }\n        }\n\n        this.keyCount = this.mid;\n        return {\n            key: middleKey,\n            child: new BTreeNode(\n                this.order,\n                rightKeys,\n                this.order - 1 - this.mid,\n                this.height,\n                rightChildren\n            ),\n        };\n    }\n\n    public search(value: number): number {\n        let start = 0;\n        let end = this.keyCount - 1;\n        while (start <= end) {\n            const mid = (start + end) >> 1;\n            if (this.keys[mid] === value) {\n                return mid;\n            } else if (this.keys[mid]! < value) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return ~start;\n    }\n\n    public has(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            return this.children[index]!.has(value);\n        }\n        return false;\n    }\n\n    public add(value: number): BTreeInsertionResult | boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return false;\n        }\n\n        index = ~index;\n\n        if (this.height === 0) {\n            if (this.keyCount === this.order - 1) {\n                return this.split(value, index);\n            }\n\n            insert(this.keys, this.keyCount, value, index);\n            this.keyCount += 1;\n            return true;\n        }\n\n        const split = this.children[index]!.add(value);\n        if (typeof split === 'object') {\n            if (this.keyCount === this.order - 1) {\n                return this.split(split.key, index, split.child);\n            }\n\n            insert(this.keys, this.keyCount, split.key, index);\n            this.keyCount += 1;\n\n            this.children.splice(index + 1, 0, split.child);\n        }\n\n        return true;\n    }\n\n    public delete(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            this.deleteAt(index);\n            return true;\n        }\n\n        if (this.height > 0) {\n            index = ~index;\n            const deleted = this.children[index]!.delete(value);\n            if (deleted) {\n                this.balance(index);\n            }\n            return deleted;\n        }\n\n        return false;\n    }\n\n    public max(): number {\n        if (this.height === 0) {\n            return this.keys[this.keyCount - 1]!;\n        }\n        return this.children[this.keyCount]!.max();\n    }\n\n    protected balance(index: number) {\n        const child = this.children[index]!;\n\n        if (child.keyCount >= this.minKeyCount) {\n            return;\n        }\n\n        if (index > 0) {\n            const left = this.children[index - 1]!;\n            if (left.keyCount > this.minKeyCount) {\n                // rotate right\n                insert(child.keys, child.keyCount, this.keys[index - 1]!, 0);\n                if (this.height > 1) {\n                    child.children.splice(0, 0, left.children[left.keyCount]!);\n                }\n                child.keyCount += 1;\n\n                this.keys[index - 1] = left.keys[left.keyCount - 1]!;\n                left.keyCount -= 1;\n                return;\n            }\n\n            // merge with left\n            left.keys[left.keyCount] = this.keys[index - 1]!;\n            left.keyCount += 1;\n            left.keys.set(child.keys.subarray(0, child.keyCount), left.keyCount);\n            if (this.height > 1) {\n                for (let i = 0; i <= child.keyCount; i++) {\n                    left.children[left.keyCount + i] = child.children[i]!;\n                }\n            }\n            left.keyCount += child.keyCount;\n            remove(this.keys, this.keyCount, index - 1);\n            this.children.splice(index, 1);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const right = this.children[index + 1]!;\n        if (right.keyCount > this.minKeyCount) {\n            // rotate left\n            child.keys[child.keyCount] = this.keys[index]!;\n            if (this.height > 1) {\n                child.children[child.keyCount + 1] = right.children.splice(0, 1)[0]!;\n            }\n            child.keyCount += 1;\n\n            this.keys[index] = right.keys[0]!;\n\n            remove(right.keys, right.keyCount, 0);\n            right.keyCount -= 1;\n            return;\n        }\n\n        // merge right into child\n        child.keys[child.keyCount] = this.keys[index]!;\n        child.keyCount += 1;\n        child.keys.set(right.keys.subarray(0, right.keyCount), child.keyCount);\n        if (this.height > 1) {\n            for (let i = 0; i <= right.keyCount; i++) {\n                child.children[child.keyCount + i] = right.children[i]!;\n            }\n        }\n        child.keyCount += right.keyCount;\n        remove(this.keys, this.keyCount, index);\n        this.children.splice(index + 1, 1);\n        this.keyCount -= 1;\n    }\n\n    protected deleteMax(): void {\n        if (this.height === 0) {\n            this.keyCount -= 1;\n            return;\n        }\n\n        const child = this.children[this.keyCount]!;\n        child.deleteMax();\n        this.balance(this.keyCount);\n    }\n\n    protected deleteAt(index: number) {\n        if (this.height === 0) {\n            remove(this.keys, this.keyCount, index);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const max = this.children[index]!.max();\n        this.keys[index] = max;\n        this.children[index]!.deleteMax();\n        this.balance(index);\n    }\n\n    public *[Symbol.iterator](): Generator<number, void, void> {\n        if (this.height > 0) {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield* this.children[i]!;\n                yield this.keys[i]!;\n            }\n            yield* this.children[this.keyCount]!;\n        } else {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield this.keys[i]!;\n            }\n        }\n    }\n}\n\nexport class BTree {\n    order: number;\n    root: BTreeNode;\n\n    size: number = 0;\n\n    public constructor(order: number) {\n        this.order = order;\n        this.root = new BTreeNode(\n            order,\n            new Int32Array(order - 1),\n            0,\n            0,\n            new Array(order)\n        );\n    }\n\n    public has(value: number) {\n        // TODO(btree): benchmark this non-recursive version\n        let node = this.root;\n        while (true) {\n            const index = node.search(value);\n            if (index >= 0) {\n                return true;\n            }\n\n            node = node.children[~index]!;\n            if (!node) {\n                return false;\n            }\n        }\n    }\n\n    public add(value: number) {\n        const split = this.root.add(value);\n        if (typeof split === 'object') {\n            const keys = new Int32Array(this.order - 1);\n            keys[0] = split.key;\n\n            const children = new Array(this.order);\n            children[0] = this.root;\n            children[1] = split.child;\n\n            this.root = new BTreeNode(\n                this.order,\n                keys,\n                1,\n                this.root.height + 1,\n                children\n            );\n        }\n        if (split) {\n            this.size += 1;\n        }\n        return !!split;\n    }\n\n    public delete(value: number) {\n        const deleted = this.root.delete(value);\n        if (deleted) {\n            if (this.root.height > 0 && this.root.keyCount === 0) {\n                this.root = this.root.children[0]!;\n            }\n            this.size -= 1;\n        }\n        return deleted;\n    }\n\n    public clear() {\n        this.root.keyCount = 0;\n        this.root.height = 0;\n        // immediately release all references\n        this.root.children = new Array(this.order);\n        this.size = 0;\n    }\n\n    public [Symbol.iterator]() {\n        return this.root[Symbol.iterator]();\n    }\n}\n","import { Checkbox, ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AndroidLogEntry, AndroidLogPriority, formatAndroidLogEntry, Logcat, LogcatFormat } from '@yume-chan/android-bin';\nimport { BTree } from '@yume-chan/b-tree';\nimport { AbortController, ReadableStream, WritableStream } from '@yume-chan/stream-extra';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { FormEvent, useEffect, useState } from 'react';\n\nimport { CommandBar, Grid, GridColumn, GridHeaderProps, GridRowProps } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { Icons, RouteStackProps, useStableCallback } from \"../utils\";\n\nconst LINE_HEIGHT = 32;\n\nconst useClasses = makeStyles({\n    grid: {\n        height: '100%',\n        marginLeft: '-16px',\n        marginRight: '-16px',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n});\n\nexport interface Column extends GridColumn {\n    title: string;\n}\n\nexport interface LogRow extends AndroidLogEntry {\n    timeString?: string;\n}\n\nconst state = makeAutoObservable({\n    logcat: undefined as Logcat | undefined,\n    running: false,\n    buffer: [] as LogRow[],\n    flushRequested: false,\n    list: [] as LogRow[],\n    selection: new BTree(6),\n    count: 0,\n    stream: undefined as ReadableStream<AndroidLogEntry> | undefined,\n    stopSignal: undefined as AbortController | undefined,\n    selectedCount: 0,\n    animationFrameId: undefined as number | undefined,\n    start() {\n        if (this.running) {\n            return;\n        }\n\n        // Logcat always starts from beginning,\n        // so don't append.\n        this.list = [];\n\n        this.running = true;\n        this.stream = this.logcat!.binary();\n        this.stopSignal = new AbortController();\n        this.stream\n            .pipeTo(\n                new WritableStream({\n                    write: (chunk) => {\n                        this.buffer.push(chunk);\n                        if (!this.flushRequested) {\n                            this.flushRequested = true;\n                            requestAnimationFrame(this.flush);\n                        }\n                    },\n                }),\n                { signal: this.stopSignal.signal }\n            )\n            .catch(() => { });\n    },\n    flush() {\n        this.list.push(...this.buffer);\n        this.buffer = [];\n        this.flushRequested = false;\n    },\n    stop() {\n        this.running = false;\n        this.stopSignal!.abort();\n    },\n    clear() {\n        this.list = [];\n        this.selection.clear();\n        this.selectedCount = 0;\n    },\n    get empty() {\n        return this.list.length === 0;\n    },\n    get commandBar(): ICommandBarItemProps[] {\n        return [\n            this.running ? {\n                key: \"stop\",\n                text: \"Stop\",\n                iconProps: { iconName: Icons.Stop },\n                onClick: () => this.stop(),\n            } : {\n                key: \"start\",\n                text: \"Start\",\n                disabled: this.logcat === undefined,\n                iconProps: { iconName: Icons.Play },\n                onClick: () => this.start(),\n            },\n            {\n                key: 'clear',\n                text: 'Clear',\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                onClick: () => this.clear(),\n            },\n            {\n                key: 'copyAll',\n                text: 'Copy Rows',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += formatAndroidLogEntry(\n                            this.list[index],\n                            LogcatFormat.Brief\n                        ) + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            },\n            {\n                key: 'copyText',\n                text: 'Copy Messages',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += this.list[index].message + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            }\n        ];\n    },\n    get columns(): Column[] {\n        return [\n            {\n                width: 40,\n                title: '',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const [checked, setChecked] = useState(false);\n                    useEffect(() => {\n                        setChecked(this.selection.has(rowIndex));\n                    }, [rowIndex]);\n\n                    const handleChange = useStableCallback((e?: FormEvent<EventTarget>, checked?: boolean) => {\n                        if (checked === undefined) {\n                            return;\n                        }\n                        if (checked) {\n                            this.selection.add(rowIndex);\n                            setChecked(true);\n                        } else {\n                            this.selection.delete(rowIndex);\n                            setChecked(false);\n                        }\n                        runInAction(() => {\n                            // Trigger mobx\n                            this.selectedCount = this.selection.size;\n                        });\n                    });\n\n                    return (\n                        <Stack className={className} verticalAlign='center' horizontalAlign='center' {...rest}>\n                            <Checkbox checked={checked} onChange={handleChange} />\n                        </Stack>\n                    );\n                }\n            },\n            {\n                width: 200,\n                title: 'Time',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    if (!item.timeString) {\n                        item.timeString = new Date(item.second * 1000).toISOString();\n                    }\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.timeString}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'PID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.pid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'TID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 80,\n                title: 'Priority',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {AndroidLogPriority[item.priority]}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                title: 'Tag',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tag}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                flexGrow: 1,\n                title: 'Message',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.message}\n                        </div>\n                    );\n                }\n            },\n        ];\n    },\n}, {\n    buffer: false,\n    list: observable.shallow,\n    flush: action.bound,\n});\n\nautorun(() => {\n    if (GlobalState.device) {\n        runInAction(() => {\n            state.logcat = new Logcat(GlobalState.device!);\n        });\n    } else {\n        runInAction(() => {\n            state.logcat = undefined;\n            if (state.running) {\n                state.stop();\n            }\n        });\n    }\n});\n\nconst Header = observer(function Header({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {state.columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const item = state.list[rowIndex];\n    const classes = useClasses();\n\n    const handleClick = useStableCallback(() => {\n        runInAction(() => {\n        });\n    });\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n            )}\n            onClick={handleClick}\n            {...rest}\n        />\n    );\n};\n\nconst LogcatPage: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Logcat - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBar} />\n\n            <StackItem grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={state.list.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={state.columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(LogcatPage);\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[793],{\n\n/***/ 1481:\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return __webpack_require__(7428);\n      }\n    ]);\n    if(false) {}\n  \n\n/***/ }),\n\n/***/ 7428:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ logcat; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4471);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Stack/Stack.js + 2 modules\nvar Stack = __webpack_require__(1887);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.js + 2 modules\nvar Checkbox = __webpack_require__(8439);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js\nvar StackItem = __webpack_require__(9899);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@griffel+react@1.4.2_react@18.2.0/node_modules/@griffel/react/makeStyles.esm.js + 27 modules\nvar makeStyles_esm = __webpack_require__(9332);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@griffel+core@1.8.1/node_modules/@griffel/core/index.esm.js + 19 modules\nvar index_esm = __webpack_require__(8186);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@griffel+core@1.8.1/node_modules/@griffel/core/mergeClasses.esm.js\nvar mergeClasses_esm = __webpack_require__(3423);\n// EXTERNAL MODULE: ../../libraries/android-bin/esm/index.js + 4 modules\nvar esm = __webpack_require__(7386);\n;// CONCATENATED MODULE: ../../libraries/b-tree/esm/index.js\nfunction insert(array, length, value, index) {\n    if (index !== length) {\n        array.set(array.subarray(index, length), index + 1);\n    }\n    array[index] = value;\n}\nfunction remove(array, length, index) {\n    if (index < length - 1) {\n        array.set(array.subarray(index + 1, length), index);\n    }\n}\nclass BTreeNode {\n    order;\n    mid;\n    minKeyCount;\n    keys;\n    keyCount;\n    height;\n    children;\n    constructor(order, keys, keyCount, height, children) {\n        this.order = order;\n        this.mid = this.order >> 1;\n        // Math.ceil(order / 2) - 1\n        this.minKeyCount = ((this.order + 1) >> 1) - 1;\n        this.keys = keys;\n        this.keyCount = keyCount;\n        this.height = height;\n        this.children = children;\n    }\n    /**\n     * Split the current node into two\n     * @param value The key to be inserted.\n     * @param index The index of the key to be inserted at.\n     * @param child The child (right to the key) to be inserted. May be undefined when current node is a leaf.\n     * @returns The new key and child need to be inserted to its parent.\n     * The new key is the middle key of the current node, and the child contains the right half of the current node.\n     */\n    split(value, index, child) {\n        let middleKey;\n        const rightKeys = new Int32Array(this.order - 1);\n        let rightChildren;\n        if (index < this.mid) {\n            middleKey = this.keys[this.mid - 1];\n            rightKeys.set(this.keys.subarray(this.mid), 0);\n            insert(this.keys, this.mid - 1, value, index);\n            if (child) {\n                // internal node\n                rightChildren = this.children.splice(this.mid, this.order - this.mid);\n                // TODO: this may cause the underlying array to grow (re-alloc and copy)\n                // investigate if this hurts performance.\n                this.children.splice(index + 1, 0, child);\n            }\n            else {\n                // leaf node, doesn't have children, create am empty array for it.\n                rightChildren = new Array(this.order);\n            }\n        }\n        else {\n            if (index === this.mid) {\n                middleKey = value;\n                rightKeys.set(this.keys.subarray(this.mid), 0);\n            }\n            else {\n                middleKey = this.keys[this.mid];\n                if (index !== this.mid + 1) {\n                    rightKeys.set(this.keys.subarray(this.mid + 1, index), 0);\n                }\n                rightKeys[index - this.mid - 1] = value;\n                rightKeys.set(this.keys.subarray(index), index - this.mid);\n            }\n            if (child) {\n                rightChildren = this.children.splice(this.mid + 1, this.order - this.mid - 1);\n                rightChildren.splice(index - this.mid, 0, child);\n            }\n            else {\n                rightChildren = new Array(this.order);\n            }\n        }\n        this.keyCount = this.mid;\n        return {\n            key: middleKey,\n            child: new BTreeNode(this.order, rightKeys, this.order - 1 - this.mid, this.height, rightChildren),\n        };\n    }\n    search(value) {\n        let start = 0;\n        let end = this.keyCount - 1;\n        while (start <= end) {\n            const mid = (start + end) >> 1;\n            if (this.keys[mid] === value) {\n                return mid;\n            }\n            else if (this.keys[mid] < value) {\n                start = mid + 1;\n            }\n            else {\n                end = mid - 1;\n            }\n        }\n        return ~start;\n    }\n    has(value) {\n        let index = this.search(value);\n        if (index >= 0) {\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            return this.children[index].has(value);\n        }\n        return false;\n    }\n    add(value) {\n        let index = this.search(value);\n        if (index >= 0) {\n            return false;\n        }\n        index = ~index;\n        if (this.height === 0) {\n            if (this.keyCount === this.order - 1) {\n                return this.split(value, index);\n            }\n            insert(this.keys, this.keyCount, value, index);\n            this.keyCount += 1;\n            return true;\n        }\n        const split = this.children[index].add(value);\n        if (typeof split === 'object') {\n            if (this.keyCount === this.order - 1) {\n                return this.split(split.key, index, split.child);\n            }\n            insert(this.keys, this.keyCount, split.key, index);\n            this.keyCount += 1;\n            this.children.splice(index + 1, 0, split.child);\n        }\n        return true;\n    }\n    delete(value) {\n        let index = this.search(value);\n        if (index >= 0) {\n            this.deleteAt(index);\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            const deleted = this.children[index].delete(value);\n            if (deleted) {\n                this.balance(index);\n            }\n            return deleted;\n        }\n        return false;\n    }\n    max() {\n        if (this.height === 0) {\n            return this.keys[this.keyCount - 1];\n        }\n        return this.children[this.keyCount].max();\n    }\n    balance(index) {\n        const child = this.children[index];\n        if (child.keyCount >= this.minKeyCount) {\n            return;\n        }\n        if (index > 0) {\n            const left = this.children[index - 1];\n            if (left.keyCount > this.minKeyCount) {\n                // rotate right\n                insert(child.keys, child.keyCount, this.keys[index - 1], 0);\n                if (this.height > 1) {\n                    child.children.splice(0, 0, left.children[left.keyCount]);\n                }\n                child.keyCount += 1;\n                this.keys[index - 1] = left.keys[left.keyCount - 1];\n                left.keyCount -= 1;\n                return;\n            }\n            // merge with left\n            left.keys[left.keyCount] = this.keys[index - 1];\n            left.keyCount += 1;\n            left.keys.set(child.keys.subarray(0, child.keyCount), left.keyCount);\n            if (this.height > 1) {\n                for (let i = 0; i <= child.keyCount; i++) {\n                    left.children[left.keyCount + i] = child.children[i];\n                }\n            }\n            left.keyCount += child.keyCount;\n            remove(this.keys, this.keyCount, index - 1);\n            this.children.splice(index, 1);\n            this.keyCount -= 1;\n            return;\n        }\n        const right = this.children[index + 1];\n        if (right.keyCount > this.minKeyCount) {\n            // rotate left\n            child.keys[child.keyCount] = this.keys[index];\n            if (this.height > 1) {\n                child.children[child.keyCount + 1] = right.children.splice(0, 1)[0];\n            }\n            child.keyCount += 1;\n            this.keys[index] = right.keys[0];\n            remove(right.keys, right.keyCount, 0);\n            right.keyCount -= 1;\n            return;\n        }\n        // merge right into child\n        child.keys[child.keyCount] = this.keys[index];\n        child.keyCount += 1;\n        child.keys.set(right.keys.subarray(0, right.keyCount), child.keyCount);\n        if (this.height > 1) {\n            for (let i = 0; i <= right.keyCount; i++) {\n                child.children[child.keyCount + i] = right.children[i];\n            }\n        }\n        child.keyCount += right.keyCount;\n        remove(this.keys, this.keyCount, index);\n        this.children.splice(index + 1, 1);\n        this.keyCount -= 1;\n    }\n    deleteMax() {\n        if (this.height === 0) {\n            this.keyCount -= 1;\n            return;\n        }\n        const child = this.children[this.keyCount];\n        child.deleteMax();\n        this.balance(this.keyCount);\n    }\n    deleteAt(index) {\n        if (this.height === 0) {\n            remove(this.keys, this.keyCount, index);\n            this.keyCount -= 1;\n            return;\n        }\n        const max = this.children[index].max();\n        this.keys[index] = max;\n        this.children[index].deleteMax();\n        this.balance(index);\n    }\n    *[Symbol.iterator]() {\n        if (this.height > 0) {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield* this.children[i];\n                yield this.keys[i];\n            }\n            yield* this.children[this.keyCount];\n        }\n        else {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield this.keys[i];\n            }\n        }\n    }\n}\nclass BTree {\n    order;\n    root;\n    size = 0;\n    constructor(order) {\n        this.order = order;\n        this.root = new BTreeNode(order, new Int32Array(order - 1), 0, 0, new Array(order));\n    }\n    has(value) {\n        // TODO(btree): benchmark this non-recursive version\n        let node = this.root;\n        while (true) {\n            const index = node.search(value);\n            if (index >= 0) {\n                return true;\n            }\n            node = node.children[~index];\n            if (!node) {\n                return false;\n            }\n        }\n    }\n    add(value) {\n        const split = this.root.add(value);\n        if (typeof split === 'object') {\n            const keys = new Int32Array(this.order - 1);\n            keys[0] = split.key;\n            const children = new Array(this.order);\n            children[0] = this.root;\n            children[1] = split.child;\n            this.root = new BTreeNode(this.order, keys, 1, this.root.height + 1, children);\n        }\n        if (split) {\n            this.size += 1;\n        }\n        return !!split;\n    }\n    delete(value) {\n        const deleted = this.root.delete(value);\n        if (deleted) {\n            if (this.root.height > 0 && this.root.keyCount === 0) {\n                this.root = this.root.children[0];\n            }\n            this.size -= 1;\n        }\n        return deleted;\n    }\n    clear() {\n        this.root.keyCount = 0;\n        this.root.height = 0;\n        // immediately release all references\n        this.root.children = new Array(this.order);\n        this.size = 0;\n    }\n    [Symbol.iterator]() {\n        return this.root[Symbol.iterator]();\n    }\n}\n\n// EXTERNAL MODULE: ../../libraries/stream-extra/esm/index.js + 16 modules\nvar stream_extra_esm = __webpack_require__(6261);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/mobx@6.7.0/node_modules/mobx/dist/mobx.esm.js\nvar mobx_esm = __webpack_require__(6323);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/mobx-react-lite@3.4.0_jofyzmwkboewm6mjrhi25mngky/node_modules/mobx-react-lite/es/index.js + 16 modules\nvar es = __webpack_require__(6779);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/next@13.0.3_biqbaboplfbrettd7655fr4n2y/node_modules/next/head.js\nvar head = __webpack_require__(3591);\nvar head_default = /*#__PURE__*/__webpack_require__.n(head);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ./src/components/index.ts + 16 modules\nvar components = __webpack_require__(4347);\n// EXTERNAL MODULE: ./src/state/index.ts + 1 modules\nvar state = __webpack_require__(2344);\n// EXTERNAL MODULE: ./src/utils/index.ts + 4 modules\nvar utils = __webpack_require__(5155);\n;// CONCATENATED MODULE: ./src/pages/logcat.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LINE_HEIGHT = 32;\nconst useClasses = (0,makeStyles_esm/* makeStyles */.Z)({\n    grid: {\n        height: \"100%\",\n        marginLeft: \"-16px\",\n        marginRight: \"-16px\"\n    },\n    header: {\n        textAlign: \"center\",\n        lineHeight: \"\".concat(LINE_HEIGHT, \"px\")\n    },\n    row: {\n        \"&:hover\": {\n            backgroundColor: \"#f3f2f1\"\n        }\n    },\n    selected: {\n        backgroundColor: \"#edebe9\"\n    },\n    code: {\n        fontFamily: \"monospace\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        lineHeight: LINE_HEIGHT + \"px\",\n        cursor: \"default\",\n        ...index_esm/* shorthands.overflow */.q5.overflow(\"hidden\")\n    }\n});\nconst logcat_state = (0,mobx_esm/* makeAutoObservable */.ky)({\n    logcat: undefined,\n    running: false,\n    buffer: [],\n    flushRequested: false,\n    list: [],\n    selection: new BTree(6),\n    count: 0,\n    stream: undefined,\n    stopSignal: undefined,\n    selectedCount: 0,\n    animationFrameId: undefined,\n    start () {\n        if (this.running) {\n            return;\n        }\n        // Logcat always starts from beginning,\n        // so don't append.\n        this.list = [];\n        this.running = true;\n        this.stream = this.logcat.binary();\n        this.stopSignal = new stream_extra_esm/* AbortController */.HS();\n        this.stream.pipeTo(new stream_extra_esm/* WritableStream */.Vj({\n            write: (chunk)=>{\n                this.buffer.push(chunk);\n                if (!this.flushRequested) {\n                    this.flushRequested = true;\n                    requestAnimationFrame(this.flush);\n                }\n            }\n        }), {\n            signal: this.stopSignal.signal\n        }).catch(()=>{});\n    },\n    flush () {\n        this.list.push(...this.buffer);\n        this.buffer = [];\n        this.flushRequested = false;\n    },\n    stop () {\n        this.running = false;\n        this.stopSignal.abort();\n    },\n    clear () {\n        this.list = [];\n        this.selection.clear();\n        this.selectedCount = 0;\n    },\n    get empty () {\n        return this.list.length === 0;\n    },\n    get commandBar () {\n        return [\n            this.running ? {\n                key: \"stop\",\n                text: \"Stop\",\n                iconProps: {\n                    iconName: utils/* Icons.Stop */.PJ.Stop\n                },\n                onClick: ()=>this.stop()\n            } : {\n                key: \"start\",\n                text: \"Start\",\n                disabled: this.logcat === undefined,\n                iconProps: {\n                    iconName: utils/* Icons.Play */.PJ.Play\n                },\n                onClick: ()=>this.start()\n            },\n            {\n                key: \"clear\",\n                text: \"Clear\",\n                disabled: this.empty,\n                iconProps: {\n                    iconName: utils/* Icons.Delete */.PJ.Delete\n                },\n                onClick: ()=>this.clear()\n            },\n            {\n                key: \"copyAll\",\n                text: \"Copy Rows\",\n                disabled: this.selectedCount === 0,\n                iconProps: {\n                    iconName: utils/* Icons.Copy */.PJ.Copy\n                },\n                onClick: ()=>{\n                    let text = \"\";\n                    for (const index of this.selection){\n                        text += (0,esm/* formatAndroidLogEntry */.oo)(this.list[index], esm/* LogcatFormat.Brief */.vj.Brief) + \"\\n\";\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, \"\");\n                    navigator.clipboard.writeText(text);\n                }\n            },\n            {\n                key: \"copyText\",\n                text: \"Copy Messages\",\n                disabled: this.selectedCount === 0,\n                iconProps: {\n                    iconName: utils/* Icons.Copy */.PJ.Copy\n                },\n                onClick: ()=>{\n                    let text = \"\";\n                    for (const index of this.selection){\n                        text += this.list[index].message + \"\\n\";\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, \"\");\n                    navigator.clipboard.writeText(text);\n                }\n            }\n        ];\n    },\n    get columns () {\n        return [\n            {\n                width: 40,\n                title: \"\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const [checked, setChecked] = (0,react.useState)(false);\n                    (0,react.useEffect)(()=>{\n                        setChecked(this.selection.has(rowIndex));\n                    }, [\n                        rowIndex\n                    ]);\n                    const handleChange = (0,utils/* useStableCallback */.R9)((e, checked)=>{\n                        if (checked === undefined) {\n                            return;\n                        }\n                        if (checked) {\n                            this.selection.add(rowIndex);\n                            setChecked(true);\n                        } else {\n                            this.selection.delete(rowIndex);\n                            setChecked(false);\n                        }\n                        (0,mobx_esm/* runInAction */.z)(()=>{\n                            // Trigger mobx\n                            this.selectedCount = this.selection.size;\n                        });\n                    });\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(Stack/* Stack */.K, {\n                        className: className,\n                        verticalAlign: \"center\",\n                        horizontalAlign: \"center\",\n                        ...rest,\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(Checkbox/* Checkbox */.X, {\n                            checked: checked,\n                            onChange: handleChange\n                        })\n                    });\n                }\n            },\n            {\n                width: 200,\n                title: \"Time\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    if (!item.timeString) {\n                        item.timeString = new Date(item.second * 1000).toISOString();\n                    }\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: item.timeString\n                    });\n                }\n            },\n            {\n                width: 60,\n                title: \"PID\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: item.pid\n                    });\n                }\n            },\n            {\n                width: 60,\n                title: \"TID\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: item.tid\n                    });\n                }\n            },\n            {\n                width: 80,\n                title: \"Priority\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: esm/* AndroidLogPriority */.As[item.priority]\n                    });\n                }\n            },\n            {\n                width: 300,\n                title: \"Tag\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: item.tag\n                    });\n                }\n            },\n            {\n                width: 300,\n                flexGrow: 1,\n                title: \"Message\",\n                CellComponent: (param)=>{\n                    let { rowIndex , columnIndex , className , ...rest } = param;\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                        className: (0,mergeClasses_esm/* mergeClasses */.z)(classes.code, className),\n                        ...rest,\n                        children: item.message\n                    });\n                }\n            }\n        ];\n    }\n}, {\n    buffer: false,\n    list: mobx_esm/* observable.shallow */.LO.shallow,\n    flush: mobx_esm/* action.bound */.aD.bound\n});\n(0,mobx_esm/* autorun */.EH)(()=>{\n    if (state/* GlobalState.device */.q.device) {\n        (0,mobx_esm/* runInAction */.z)(()=>{\n            logcat_state.logcat = new esm/* Logcat */.J(state/* GlobalState.device */.q.device);\n        });\n    } else {\n        (0,mobx_esm/* runInAction */.z)(()=>{\n            logcat_state.logcat = undefined;\n            if (logcat_state.running) {\n                logcat_state.stop();\n            }\n        });\n    }\n});\nconst Header = (0,es/* observer */.Pi)(function Header(param) {\n    let { className , columnIndex , ...rest } = param;\n    const classes = useClasses();\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: (0,mergeClasses_esm/* mergeClasses */.z)(className, classes.header),\n        ...rest,\n        children: logcat_state.columns[columnIndex].title\n    });\n});\nconst Row = function Row(param) {\n    let { className , rowIndex , ...rest } = param;\n    const item = logcat_state.list[rowIndex];\n    const classes = useClasses();\n    const handleClick = (0,utils/* useStableCallback */.R9)(()=>{\n        (0,mobx_esm/* runInAction */.z)(()=>{});\n    });\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: (0,mergeClasses_esm/* mergeClasses */.z)(className, classes.row),\n        onClick: handleClick,\n        ...rest\n    });\n};\nconst LogcatPage = ()=>{\n    const classes = useClasses();\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(Stack/* Stack */.K, {\n        ...utils/* RouteStackProps */.LE,\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)((head_default()), {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"title\", {\n                    children: \"Logcat - Android Web Toolbox\"\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(components/* CommandBar */.X3, {\n                items: logcat_state.commandBar\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(StackItem/* StackItem */.v, {\n                grow: true,\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(components/* Grid */.rj, {\n                    className: classes.grid,\n                    rowCount: logcat_state.list.length,\n                    rowHeight: LINE_HEIGHT,\n                    columns: logcat_state.columns,\n                    HeaderComponent: Header,\n                    RowComponent: Row\n                })\n            })\n        ]\n    });\n};\n/* harmony default export */ var logcat = ((0,es/* observer */.Pi)(LogcatPage));\n\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [774,888,179], function() { return __webpack_exec__(1481); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__unused_webpack_exports","__webpack_require__","window","__NEXT_P","__webpack_exports__","r","d","logcat","jsx_runtime","Stack","Checkbox","StackItem","makeStyles_esm","index_esm","mergeClasses_esm","esm","insert","array","length","value","index","set","subarray","remove","BTreeNode","order","mid","minKeyCount","keys","keyCount","height","children","split","child","middleKey","rightChildren","rightKeys","Int32Array","splice","key","search","start","end","has","add","delete","deleteAt","deleted","balance","max","left","i","right","deleteMax","Symbol","iterator","BTree","root","size","node","clear","stream_extra_esm","mobx_esm","es","head","head_default","n","react","components","state","utils","useClasses","Z","grid","marginLeft","marginRight","header","textAlign","lineHeight","concat","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","q5","overflow","logcat_state","ky","undefined","running","buffer","flushRequested","list","selection","count","stream","stopSignal","selectedCount","animationFrameId","binary","HS","pipeTo","Vj","write","chunk","requestAnimationFrame","flush","signal","catch","stop","abort","empty","commandBar","text","iconProps","iconName","PJ","Stop","onClick","disabled","Play","Delete","Copy","oo","vj","Brief","replace","navigator","clipboard","writeText","message","columns","width","title","CellComponent","rowIndex","columnIndex","className","rest","param","checked","setChecked","useState","useEffect","handleChange","R9","e","z","jsx","K","verticalAlign","horizontalAlign","X","onChange","item","timeString","Date","second","toISOString","classes","pid","tid","As","priority","tag","flexGrow","LO","shallow","aD","bound","EH","q","device","J","Header","Pi","Row","handleClick","LogcatPage","jsxs","LE","X3","items","v","grow","rj","rowCount","rowHeight","HeaderComponent","RowComponent","O","s","_N_E"],"sourceRoot":""}