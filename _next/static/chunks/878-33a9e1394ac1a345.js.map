{"version":3,"file":"static/chunks/878-33a9e1394ac1a345.js","mappings":"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A,aAAA,CAAAA,cAAA,gBACAA,aAAA,CAAAA,cAAA,gBAhBUA,aAAY,CAAAA,cAAZ,QAiBX,+BAAAH,uBAAA,CAAAC,mBAAA,CAAAC,mBAAA,eAAAA,oBAAAE,CAAA,CAAAH,oBAAA,qBAAAI,eAAA,CCxBD,GAK6E,IAC3EA,gBAAO,CAAAC,MACL,CACDC,WAAA,iBACQC,QACP,CACDD,WAAA,mFACME,MACL,CAAYF,WACL,CACL,MACA,OACA,MACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACD,KACF,EACSG,SACR,CACDH,WAAA,wCACWI,WACV,CACDJ,WAAA,gBACKK,KACJ,CAAYL,WACJ,CACN,OACA,MACA,MACA,MACA,KACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,aACA,cACA,eACA,SACA,MACA,MACA,MACA,QACA,UACA,IACA,MACA,MACA,UACA,KACA,MACA,MACA,OACA,KACA,MACA,MACA,QACA,MACA,SACA,SACA,MACA,MACA,MACA,KACA,SACA,OACA,SACA,MACA,MACA,MACA,IACA,MACA,KACA,QACA,MACA,MACA,OACA,KACA,YACA,MACA,MACA,IACA,MACA,MACA,KACA,MACA,WACA,MACA,UACA,UACA,YACA,KACA,SACA,MACA,IACA,MACA,OACA,aACA,MACA,MACA,KACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QACA,OACA,MACA,OACA,KACA,OACA,MACA,SACA,MACA,IACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,IACA,MACA,OACA,WACA,SACA,KACA,SACA,WACA,QACA,OACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,OACA,YACA,IACA,MACA,QACA,MACA,OACA,OACA,OACA,OACA,QACA,KACA,KACA,MACA,KACA,UACA,MACA,SACA,OACA,OACA,MACA,KACA,KACA,MACA,IACA,OACA,KACA,MACA,KACA,MACA,KACA,MACA,OACA,OACA,OACA,QACA,MACA,WACA,MACA,MACA,MACA,OACA,OACA,IACA,OACA,QACA,MACA,aACA,aACA,SACA,OACA,OACA,KACA,QACA,MACA,WACA,QACA,MACA,MACA,MACA,MACA,UACA,MACA,MACA,OACA,MACA,KACA,KACA,MACA,MACA,UACA,MACA,OACA,QACA,OACA,MACA,OACA,OACA,OACA,MACD,MACF,EACQM,QACP,CACDN,WAAA,SAEIO,IACH,CACDP,WAAA,SAEDQ,cAAU,GACVC,OAAA,GACAC,gBAAM,GAAAC,KACJ,CACDX,WAAA,8BACKY,KACJ,CACDZ,WAAA,uBACMa,MACL,CACDb,WAAA,iCACIc,IACH,CACDd,WAAA,wEAEDe,gBAAU,GACVC,OAAM,GAAAC,KACJ,CACDjB,WAAA,sBAEDkB,KAAA,GACAC,YAAM,GAAAC,KACJ,CACDpB,WAAA,sBACMqB,MACL,CACDrB,WAAA,iBACKsB,KACJ,CACDtB,WAAA,yCAEDuB,aAAY,GACZC,SAAM,GAAAC,KACJ,CACDzB,WAAA,kBACa0B,aACF,CACX1B,WAAA,UAED2B,OAAO,GAAAC,MACL,CAAY5B,WACL,CACL,MACA,MACA,QACA,OACA,MACA,KACA,OACA,MACA,MACA,MACA,MACA,OACA,OACA,QACA,SACA,MACA,UACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,IACA,MACD,IACF,EACI6B,IACH,CACD7B,WAAA,SACI8B,IACH,CACD9B,WAAA,SAED+B,SAAK,GAAAC,IACH,CAEDhC,WAAA,gBACOiC,OACN,CACDjC,WAAA,6CAEDkC,OAAK,GAAAC,IACH,CACDnC,WAAA,SACMoC,MACL,CAAYpC,WACL,CACL,MACA,MACA,MACA,MACA,MACA,OACA,MACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACD,MACF,EAEDqC,SAAA,GACAC,eAAM,GAAAC,KACJ,CACDvC,WAAA,uBACQwC,QACP,CACDxC,WAAA,kBACKyC,KACJ,CACDzC,WAAA,uBACK0C,KACJ,CACD1C,WAAA,qCACa2C,aACF,CACX3C,WAAA,yBACI4C,IACH,CACD5C,WAAA,SACI6C,IACH,CACD7C,WAAA,UAED8C,QAAA,GAAaC,YACX,CACD/C,WAAA,wCACIgD,IACH,CACDhD,WAAA,2CAEDiD,aAAY,GACZC,SAAQ,GACRC,KAAA,CAAO,EAAEC,QACP,CAAYpD,WACL,CACL,MACA,MACA,MACA,QACA,MACA,MACA,QACA,MACA,KACA,MACA,MACA,MACA,QACA,MACA,KACA,MACA,SACA,SACA,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACD,MACF,EACIqD,IACH,CACDrD,WAAA,iEAEDsD,YAAa,GACbC,UAAQ,GAAAC,OACN,CAAYxD,WACN,CACJ,KACA,MACA,MACA,MACA,QACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,KACA,MACA,OACA,MACA,OACA,MACA,KACD,SACF,EACMyD,MACL,CAAYzD,WACL,CACL,MACA,MACA,OACA,OACA,MACA,MACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,KACA,MACA,OACA,OACA,KACA,MACD,MACF,EAED0D,SAAM,GAAAC,KACJ,CACD3D,WAAA,yCACK4D,KACJ,CACD5D,WAAA,uBACK6D,KACJ,CACD7D,WAAA,6BACW8D,WACV,CACD9D,WAAA,uBACK+D,KACJ,CACD/D,WAAA,0CACKgE,KACJ,CACDhE,WAAA,uBACIiE,IACH,CACDjE,WAAA,sBACIkE,IACH,CACDlE,WAAA,SACImE,IACH,CACDnE,WAAA,QACD,iBAAAP,uBAAA,CAAAC,mBAAA,CAAAC,mBAAA,eAAAA,oBAAAE,CAAA,CAAAH,oBAAA,sBAAA0E,oBAAA,QCviBIC,qBDuiBJC,8CAAA3E,oBAAA,MC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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/next@13.0.3_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/path-browserify/index.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.8.2_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-file-type-icons/src/FileIconType.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.8.2_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-file-type-icons/src/FileTypeIconMap.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.8.2_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-file-type-icons/src/getFileTypeIconProps.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.8.2_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-file-type-icons/src/initializeFileTypeIcons.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupSpacer.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/getNativeElementProps.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Check/Check.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Check/Check.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Check/Check.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowCheck.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowCheck.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/src/utilities/dragdrop/DragDropHelper.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowFields.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/src/utilities/selection/SelectionZone.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/List/List.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/List/src/components/List/utils/scroll.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/List/List.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedListSection.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/src/utilities/decorators/withViewport.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/src/utilities/groupedList/GroupedListUtility.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/AutoScroll.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/src/dom/getRect.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/src/selection/Selection.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/src/selection/Selection.types.ts","webpack://_N_E/<anon>"],"sourcesContent":["(function(){\"use strict\";var e={114:function(e){function assertPath(e){if(typeof e!==\"string\"){throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}}function normalizeStringPosix(e,r){var t=\"\";var i=0;var n=-1;var a=0;var f;for(var l=0;l<=e.length;++l){if(l<e.length)f=e.charCodeAt(l);else if(f===47)break;else f=47;if(f===47){if(n===l-1||a===1){}else if(n!==l-1&&a===2){if(t.length<2||i!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){var s=t.lastIndexOf(\"/\");if(s!==t.length-1){if(s===-1){t=\"\";i=0}else{t=t.slice(0,s);i=t.length-1-t.lastIndexOf(\"/\")}n=l;a=0;continue}}else if(t.length===2||t.length===1){t=\"\";i=0;n=l;a=0;continue}}if(r){if(t.length>0)t+=\"/..\";else t=\"..\";i=2}}else{if(t.length>0)t+=\"/\"+e.slice(n+1,l);else t=e.slice(n+1,l);i=l-n-1}n=l;a=0}else if(f===46&&a!==-1){++a}else{a=-1}}return t}function _format(e,r){var t=r.dir||r.root;var i=r.base||(r.name||\"\")+(r.ext||\"\");if(!t){return i}if(t===r.root){return t+i}return t+e+i}var r={resolve:function resolve(){var e=\"\";var r=false;var t;for(var i=arguments.length-1;i>=-1&&!r;i--){var n;if(i>=0)n=arguments[i];else{if(t===undefined)t=\"\";n=t}assertPath(n);if(n.length===0){continue}e=n+\"/\"+e;r=n.charCodeAt(0)===47}e=normalizeStringPosix(e,!r);if(r){if(e.length>0)return\"/\"+e;else return\"/\"}else if(e.length>0){return e}else{return\".\"}},normalize:function normalize(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0)===47;var t=e.charCodeAt(e.length-1)===47;e=normalizeStringPosix(e,!r);if(e.length===0&&!r)e=\".\";if(e.length>0&&t)e+=\"/\";if(r)return\"/\"+e;return e},isAbsolute:function isAbsolute(e){assertPath(e);return e.length>0&&e.charCodeAt(0)===47},join:function join(){if(arguments.length===0)return\".\";var e;for(var t=0;t<arguments.length;++t){var i=arguments[t];assertPath(i);if(i.length>0){if(e===undefined)e=i;else e+=\"/\"+i}}if(e===undefined)return\".\";return r.normalize(e)},relative:function relative(e,t){assertPath(e);assertPath(t);if(e===t)return\"\";e=r.resolve(e);t=r.resolve(t);if(e===t)return\"\";var i=1;for(;i<e.length;++i){if(e.charCodeAt(i)!==47)break}var n=e.length;var a=n-i;var f=1;for(;f<t.length;++f){if(t.charCodeAt(f)!==47)break}var l=t.length;var s=l-f;var o=a<s?a:s;var u=-1;var h=0;for(;h<=o;++h){if(h===o){if(s>o){if(t.charCodeAt(f+h)===47){return t.slice(f+h+1)}else if(h===0){return t.slice(f+h)}}else if(a>o){if(e.charCodeAt(i+h)===47){u=h}else if(h===0){u=0}}break}var c=e.charCodeAt(i+h);var v=t.charCodeAt(f+h);if(c!==v)break;else if(c===47)u=h}var g=\"\";for(h=i+u+1;h<=n;++h){if(h===n||e.charCodeAt(h)===47){if(g.length===0)g+=\"..\";else g+=\"/..\"}}if(g.length>0)return g+t.slice(f+u);else{f+=u;if(t.charCodeAt(f)===47)++f;return t.slice(f)}},_makeLong:function _makeLong(e){return e},dirname:function dirname(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0);var t=r===47;var i=-1;var n=true;for(var a=e.length-1;a>=1;--a){r=e.charCodeAt(a);if(r===47){if(!n){i=a;break}}else{n=false}}if(i===-1)return t?\"/\":\".\";if(t&&i===1)return\"//\";return e.slice(0,i)},basename:function basename(e,r){if(r!==undefined&&typeof r!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(e);var t=0;var i=-1;var n=true;var a;if(r!==undefined&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var f=r.length-1;var l=-1;for(a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(s===47){if(!n){t=a+1;break}}else{if(l===-1){n=false;l=a+1}if(f>=0){if(s===r.charCodeAt(f)){if(--f===-1){i=a}}else{f=-1;i=l}}}}if(t===i)i=l;else if(i===-1)i=e.length;return e.slice(t,i)}else{for(a=e.length-1;a>=0;--a){if(e.charCodeAt(a)===47){if(!n){t=a+1;break}}else if(i===-1){n=false;i=a+1}}if(i===-1)return\"\";return e.slice(t,i)}},extname:function extname(e){assertPath(e);var r=-1;var t=0;var i=-1;var n=true;var a=0;for(var f=e.length-1;f>=0;--f){var l=e.charCodeAt(f);if(l===47){if(!n){t=f+1;break}continue}if(i===-1){n=false;i=f+1}if(l===46){if(r===-1)r=f;else if(a!==1)a=1}else if(r!==-1){a=-1}}if(r===-1||i===-1||a===0||a===1&&r===i-1&&r===t+1){return\"\"}return e.slice(r,i)},format:function format(e){if(e===null||typeof e!==\"object\"){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e)}return _format(\"/\",e)},parse:function parse(e){assertPath(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return r;var t=e.charCodeAt(0);var i=t===47;var n;if(i){r.root=\"/\";n=1}else{n=0}var a=-1;var f=0;var l=-1;var s=true;var o=e.length-1;var u=0;for(;o>=n;--o){t=e.charCodeAt(o);if(t===47){if(!s){f=o+1;break}continue}if(l===-1){s=false;l=o+1}if(t===46){if(a===-1)a=o;else if(u!==1)u=1}else if(a!==-1){u=-1}}if(a===-1||l===-1||u===0||u===1&&a===l-1&&a===f+1){if(l!==-1){if(f===0&&i)r.base=r.name=e.slice(1,l);else r.base=r.name=e.slice(f,l)}}else{if(f===0&&i){r.name=e.slice(1,a);r.base=e.slice(1,l)}else{r.name=e.slice(f,a);r.base=e.slice(f,l)}r.ext=e.slice(a,l)}if(f>0)r.dir=e.slice(0,f-1);else if(i)r.dir=\"/\";return r},sep:\"/\",delimiter:\":\",win32:null,posix:null};r.posix=r;e.exports=r}};var r={};function __nccwpck_require__(t){var i=r[t];if(i!==undefined){return i.exports}var n=r[t]={exports:{}};var a=true;try{e[t](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(114);module.exports=t})();","/**\n * Enumerates special file type icons that do not map to any file extensions.\n * For example, the 'pptx' icon maps to the extensions 'ppt', 'pptm', 'pptx',\n * but the 'folder' icon does not map to any extensions and should be obtained\n * via this enum.\n */\n\nexport enum FileIconType {\n  docset = 1, // Start at 1 so it will evaluate as \"truthy\"\n  folder = 2,\n  genericFile = 3,\n  listItem = 4,\n  sharedFolder = 5,\n  multiple = 6,\n  stream = 7,\n  news = 8,\n  desktopFolder = 9,\n  documentsFolder = 10,\n  picturesFolder = 11,\n  linkedFolder = 12,\n  list = 13,\n  form = 14,\n  sway = 15,\n  playlist = 16,\n}\n\nexport type FileIconTypeInput = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;\n","/**\n * Enumeration of icon file names, and what extensions they map to.\n * Please keep items alphabetical. Items without extensions may require specific logic in the code to map.\n * Always use getFileTypeIconProps to get the most up-to-date icon at the right pixel density.\n */\nexport const FileTypeIconMap: { [key: string]: { extensions?: string[] } } = {\n  accdb: {\n    extensions: ['accdb', 'mdb'],\n  },\n  archive: {\n    extensions: ['7z', 'ace', 'arc', 'arj', 'dmg', 'gz', 'iso', 'lzh', 'pkg', 'rar', 'sit', 'tgz', 'tar', 'z'],\n  },\n  audio: {\n    extensions: [\n      'aif',\n      'aiff',\n      'aac',\n      'alac',\n      'amr',\n      'ape',\n      'au',\n      'awb',\n      'dct',\n      'dss',\n      'dvf',\n      'flac',\n      'gsm',\n      'm4a',\n      'm4p',\n      'mid',\n      'mmf',\n      'mp3',\n      'oga',\n      'ra',\n      'rm',\n      'wav',\n      'wma',\n      'wv',\n    ],\n  },\n  calendar: {\n    extensions: ['ical', 'icalendar', 'ics', 'ifb', 'vcs'],\n  },\n  classifier: {\n    extensions: ['classifier'],\n  },\n  code: {\n    extensions: [\n      'abap',\n      'ada',\n      'adp',\n      'ahk',\n      'as',\n      'as3',\n      'asc',\n      'ascx',\n      'asm',\n      'asp',\n      'awk',\n      'bash',\n      'bash_login',\n      'bash_logout',\n      'bash_profile',\n      'bashrc',\n      'bat',\n      'bib',\n      'bsh',\n      'build',\n      'builder',\n      'c',\n      'cbl',\n      'c++',\n      'capfile',\n      'cc',\n      'cfc',\n      'cfm',\n      'cfml',\n      'cl',\n      'clj',\n      'cls',\n      'cmake',\n      'cmd',\n      'coffee',\n      'config',\n      'cpp',\n      'cpt',\n      'cpy',\n      'cs',\n      'cshtml',\n      'cson',\n      'csproj',\n      'css',\n      'ctp',\n      'cxx',\n      'd',\n      'ddl',\n      'di',\n      'disco',\n      'dml',\n      'dtd',\n      'dtml',\n      'el',\n      'emakefile',\n      'erb',\n      'erl',\n      'f',\n      'f90',\n      'f95',\n      'fs',\n      'fsi',\n      'fsscript',\n      'fsx',\n      'gemfile',\n      'gemspec',\n      'gitconfig',\n      'go',\n      'groovy',\n      'gvy',\n      'h',\n      'h++',\n      'haml',\n      'handlebars',\n      'hbs',\n      'hcp',\n      'hh',\n      'hpp',\n      'hrl',\n      'hs',\n      'htc',\n      'hxx',\n      'idl',\n      'iim',\n      'inc',\n      'inf',\n      'ini',\n      'inl',\n      'ipp',\n      'irbrc',\n      'jade',\n      'jav',\n      'java',\n      'js',\n      'json',\n      'jsp',\n      'jsproj',\n      'jsx',\n      'l',\n      'less',\n      'lhs',\n      'lisp',\n      'log',\n      'lst',\n      'ltx',\n      'lua',\n      'm',\n      'mak',\n      'make',\n      'manifest',\n      'master',\n      'md',\n      'markdn',\n      'markdown',\n      'mdown',\n      'mkdn',\n      'ml',\n      'mli',\n      'mll',\n      'mly',\n      'mm',\n      'mud',\n      'nfo',\n      'opml',\n      'osascript',\n      'p',\n      'pas',\n      'patch',\n      'php',\n      'php2',\n      'php3',\n      'php4',\n      'php5',\n      'phtml',\n      'pl',\n      'pm',\n      'pod',\n      'pp',\n      'profile',\n      'ps1',\n      'ps1xml',\n      'psd1',\n      'psm1',\n      'pss',\n      'pt',\n      'py',\n      'pyw',\n      'r',\n      'rake',\n      'rb',\n      'rbx',\n      'rc',\n      'rdf',\n      're',\n      'reg',\n      'rest',\n      'resw',\n      'resx',\n      'rhtml',\n      'rjs',\n      'rprofile',\n      'rpy',\n      'rss',\n      'rst',\n      'ruby',\n      'rxml',\n      's',\n      'sass',\n      'scala',\n      'scm',\n      'sconscript',\n      'sconstruct',\n      'script',\n      'scss',\n      'sgml',\n      'sh',\n      'shtml',\n      'sml',\n      'svn-base',\n      'swift',\n      'sql',\n      'sty',\n      'tcl',\n      'tex',\n      'textile',\n      'tld',\n      'tli',\n      'tmpl',\n      'tpl',\n      'vb',\n      'vi',\n      'vim',\n      'vmg',\n      'webpart',\n      'wsp',\n      'wsdl',\n      'xhtml',\n      'xoml',\n      'xsd',\n      'xslt',\n      'yaml',\n      'yaws',\n      'yml',\n      'zsh',\n    ],\n  },\n  contact: {\n    extensions: ['vcf'],\n  },\n  /*  css: {},  not broken out yet, snapping to 'code' for now */\n  csv: {\n    extensions: ['csv'],\n  },\n  desktopfolder: {},\n  docset: {},\n  documentsfolder: {},\n  docx: {\n    extensions: ['doc', 'docm', 'docx', 'docb'],\n  },\n  dotx: {\n    extensions: ['dot', 'dotm', 'dotx'],\n  },\n  email: {\n    extensions: ['eml', 'msg', 'oft', 'ost', 'pst'],\n  },\n  exe: {\n    extensions: ['application', 'appref-ms', 'apk', 'app', 'appx', 'exe', 'ipa', 'msi', 'xap'],\n  },\n  favoritesfolder: {},\n  folder: {},\n  font: {\n    extensions: ['ttf', 'otf', 'woff'],\n  },\n  form: {},\n  genericfile: {},\n  html: {\n    extensions: ['htm', 'html', 'mht'],\n  },\n  ipynb: {\n    extensions: ['nnb', 'ipynb'],\n  },\n  link: {\n    extensions: ['lnk', 'link', 'url', 'website', 'webloc'],\n  },\n  linkedfolder: {},\n  listitem: {},\n  loop: {\n    extensions: ['fluid', 'loop'],\n  },\n  officescript: {\n    extensions: ['osts'],\n  },\n  splist: {},\n  model: {\n    extensions: [\n      '3ds',\n      '3mf',\n      'blend',\n      'cool',\n      'dae',\n      'df',\n      'dwfx',\n      'dwg',\n      'dxf',\n      'fbx',\n      'glb',\n      'gltf',\n      'holo',\n      'layer',\n      'layout',\n      'max',\n      'mcworld',\n      'mtl',\n      'obj',\n      'off',\n      'ply',\n      'skp',\n      'stp',\n      'stl',\n      't',\n      'thl',\n      'x',\n    ],\n  },\n  mpp: {\n    extensions: ['mpp'],\n  },\n  mpt: {\n    extensions: ['mpt'],\n  },\n  multiple: {},\n  one: {\n    // This represents a single Fluid Note, or a partial exported section/page of a notebook.\n    extensions: ['note', 'one'],\n  },\n  onetoc: {\n    extensions: ['ms-one-stub', 'onetoc', 'onetoc2', 'onepkg'], // This represents a complete, logical notebook.\n  },\n  pbiapp: {},\n  pdf: {\n    extensions: ['pdf'],\n  },\n  photo: {\n    extensions: [\n      'arw',\n      'bmp',\n      'cr2',\n      'crw',\n      'dic',\n      'dicm',\n      'dcm',\n      'dcm30',\n      'dcr',\n      'dds',\n      'dib',\n      'dng',\n      'erf',\n      'gif',\n      'heic',\n      'heif',\n      'ico',\n      'jfi',\n      'jfif',\n      'jif',\n      'jpe',\n      'jpeg',\n      'jpg',\n      'jxr',\n      'kdc',\n      'mrw',\n      'nef',\n      'orf',\n      'pct',\n      'pict',\n      'png',\n      'pns',\n      'psb',\n      'psd',\n      'raw',\n      'tga',\n      'tif',\n      'tiff',\n      'wdp',\n    ],\n  },\n  photo360: {},\n  picturesfolder: {},\n  potx: {\n    extensions: ['pot', 'potm', 'potx'],\n  },\n  powerbi: {\n    extensions: ['pbids', 'pbix'],\n  },\n  ppsx: {\n    extensions: ['pps', 'ppsm', 'ppsx'],\n  },\n  pptx: {\n    extensions: ['ppt', 'pptm', 'pptx', 'sldx', 'sldm'],\n  },\n  presentation: {\n    extensions: ['odp', 'gslides', 'key'],\n  },\n  pub: {\n    extensions: ['pub'],\n  },\n  spo: {\n    extensions: ['aspx'],\n  },\n  sponews: {},\n  spreadsheet: {\n    extensions: ['odc', 'ods', 'gsheet', 'numbers', 'tsv'],\n  },\n  rtf: {\n    extensions: ['epub', 'gdoc', 'odt', 'rtf', 'wri', 'pages'],\n  },\n  sharedfolder: {},\n  playlist: {},\n  sway: {},\n  sysfile: {\n    extensions: [\n      'bak',\n      'bin',\n      'cab',\n      'cache',\n      'cat',\n      'cer',\n      'class',\n      'dat',\n      'db',\n      'dbg',\n      'dl_',\n      'dll',\n      'ithmb',\n      'jar',\n      'kb',\n      'ldt',\n      'lrprev',\n      'pkpass',\n      'ppa',\n      'ppam',\n      'pdb',\n      'rom',\n      'thm',\n      'thmx',\n      'vsl',\n      'xla',\n      'xlam',\n      'xlb',\n      'xll',\n    ],\n  },\n  txt: {\n    extensions: ['dif', 'diff', 'readme', 'out', 'plist', 'properties', 'text', 'txt'],\n  },\n  vaultclosed: {},\n  vaultopen: {},\n  vector: {\n    extensions: [\n      'ai',\n      'ait',\n      'cvs',\n      'dgn',\n      'gdraw',\n      'pd',\n      'emf',\n      'eps',\n      'fig',\n      'ind',\n      'indd',\n      'indl',\n      'indt',\n      'indb',\n      'ps',\n      'svg',\n      'svgz',\n      'wmf',\n      'oxps',\n      'xps',\n      'xd',\n      'sketch',\n    ],\n  },\n  video: {\n    extensions: [\n      '3g2',\n      '3gp',\n      '3gp2',\n      '3gpp',\n      'asf',\n      'avi',\n      'dvr-ms',\n      'flv',\n      'm1v',\n      'm4v',\n      'mkv',\n      'mod',\n      'mov',\n      'mm4p',\n      'mp2',\n      'mp2v',\n      'mp4',\n      'mp4v',\n      'mpa',\n      'mpe',\n      'mpeg',\n      'mpg',\n      'mpv',\n      'mpv2',\n      'mts',\n      'ogg',\n      'qt',\n      'swf',\n      'ts',\n      'vob',\n      'webm',\n      'wlmp',\n      'wm',\n      'wmv',\n      'wmx',\n    ],\n  },\n  video360: {},\n  vsdx: {\n    extensions: ['vdx', 'vsd', 'vsdm', 'vsdx', 'vsw', 'vdw'],\n  },\n  vssx: {\n    extensions: ['vss', 'vssm', 'vssx'],\n  },\n  vstx: {\n    extensions: ['vst', 'vstm', 'vstx', 'vsx'],\n  },\n  whiteboard: {\n    extensions: ['whiteboard', 'wbtx'],\n  },\n  xlsx: {\n    extensions: ['xlc', 'xls', 'xlsb', 'xlsm', 'xlsx', 'xlw'],\n  },\n  xltx: {\n    extensions: ['xlt', 'xltm', 'xltx'],\n  },\n  xml: {\n    extensions: ['xaml', 'xml', 'xsl'],\n  },\n  xsn: {\n    extensions: ['xsn'],\n  },\n  zip: {\n    extensions: ['zip'],\n  },\n};\n","import { FileTypeIconMap } from './FileTypeIconMap';\nimport { FileIconType } from './FileIconType';\nimport type { FileIconTypeInput } from './FileIconType';\n\nlet _extensionToIconName: { [key: string]: string };\n\nconst GENERIC_FILE = 'genericfile';\nconst FOLDER = 'folder';\nconst SHARED_FOLDER = 'sharedfolder';\nconst DOCSET_FOLDER = 'docset';\nconst LIST_ITEM = 'listitem';\nconst LIST = 'splist';\nconst MULTIPLE_ITEMS = 'multiple';\nconst NEWS = 'sponews';\nconst STREAM = 'video';\nconst DESKTOP_FOLDER = 'desktopfolder';\nconst DOCUMENTS_FOLDER = 'documentfolder';\nconst PICTURES_FOLDER = 'picturesfolder';\nconst LINKED_FOLDER = 'linkedfolder';\nconst FORM = 'form';\nconst SWAY = 'sway';\nconst PLAYLIST = 'playlist';\n\nexport const DEFAULT_ICON_SIZE: FileTypeIconSize = 16;\nexport type FileTypeIconSize = 16 | 20 | 24 | 32 | 40 | 48 | 64 | 96;\nexport type ImageFileType = 'svg' | 'png';\n\nexport interface IFileTypeIconOptions {\n  /**\n   * The file extension, such as .pptx, for which you need an icon.\n   * For file type icons that are not associated with a file\n   * extension, such as folder, use the type property.\n   */\n  extension?: string;\n  /**\n   * The type of file type icon you need. Use this property for\n   * file type icons that are not associated with a file extension,\n   * such as folder.\n   */\n  type?: FileIconTypeInput;\n  /**\n   * The size of the icon in pixels.\n   * @default 16\n   */\n  size?: FileTypeIconSize;\n  /**\n   * The type of image file to use. Can be svg or png.\n   * @default 'svg'\n   */\n  imageFileType?: ImageFileType;\n}\n\n/**\n * This function returns properties for a file type icon given the IFileTypeIconOptions.\n * It accounts for different device pixel ratios. For example,\n * `getFileTypeIconProps({ extension: 'doc', size: 16, imageFileType: 'png' })`\n * will return `{ iconName: 'docx16_2x_png' }` if the `devicePixelRatio` is 2.\n * @param options\n */\nexport function getFileTypeIconProps(options: IFileTypeIconOptions): { iconName: string; 'aria-label'?: string } {\n  // First, obtain the base name of the icon using the extension or type.\n  let iconBaseName: string;\n  const { extension, type, size, imageFileType } = options;\n\n  iconBaseName = getFileTypeIconNameFromExtensionOrType(extension, type);\n  // Next, obtain the suffix using the icon size, user's device pixel ration, and\n  // preference for svg or png\n  let _size: FileTypeIconSize = size || DEFAULT_ICON_SIZE;\n  let suffix: string = getFileTypeIconSuffix(_size, imageFileType);\n\n  return { iconName: iconBaseName + suffix, 'aria-label': extension };\n}\n\nexport function getFileTypeIconNameFromExtensionOrType(\n  extension: string | undefined,\n  type: FileIconType | undefined,\n): string {\n  let iconBaseName: string | undefined;\n  if (extension) {\n    if (!_extensionToIconName) {\n      _extensionToIconName = {};\n\n      for (const iconName in FileTypeIconMap) {\n        if (FileTypeIconMap.hasOwnProperty(iconName)) {\n          const extensions = FileTypeIconMap[iconName].extensions;\n\n          if (extensions) {\n            for (let i = 0; i < extensions.length; i++) {\n              _extensionToIconName[extensions[i]] = iconName;\n            }\n          }\n        }\n      }\n    }\n\n    // Strip periods, force lowercase.\n    extension = extension.replace('.', '').toLowerCase();\n    return _extensionToIconName[extension] || GENERIC_FILE;\n  } else if (type) {\n    switch (type) {\n      case FileIconType.docset:\n        iconBaseName = DOCSET_FOLDER;\n        break;\n      case FileIconType.folder:\n        iconBaseName = FOLDER;\n        break;\n      case FileIconType.listItem:\n        iconBaseName = LIST_ITEM;\n        break;\n      case FileIconType.sharedFolder:\n        iconBaseName = SHARED_FOLDER;\n        break;\n      case FileIconType.stream:\n        iconBaseName = STREAM;\n        break;\n      case FileIconType.multiple:\n        iconBaseName = MULTIPLE_ITEMS;\n        break;\n      case FileIconType.news:\n        iconBaseName = NEWS;\n        break;\n      case FileIconType.desktopFolder:\n        iconBaseName = DESKTOP_FOLDER;\n        break;\n      case FileIconType.documentsFolder:\n        iconBaseName = DOCUMENTS_FOLDER;\n        break;\n      case FileIconType.picturesFolder:\n        iconBaseName = PICTURES_FOLDER;\n        break;\n      case FileIconType.linkedFolder:\n        iconBaseName = LINKED_FOLDER;\n        break;\n      case FileIconType.list:\n        iconBaseName = LIST;\n        break;\n      case FileIconType.form:\n        iconBaseName = FORM;\n        break;\n      case FileIconType.sway:\n        iconBaseName = SWAY;\n        break;\n      case FileIconType.playlist:\n        iconBaseName = PLAYLIST;\n        break;\n    }\n  }\n  return iconBaseName || GENERIC_FILE;\n}\n\nexport function getFileTypeIconSuffix(size: FileTypeIconSize, imageFileType: ImageFileType = 'svg'): string {\n  let devicePixelRatio: number = window.devicePixelRatio;\n  let devicePixelRatioSuffix = ''; // Default is 1x\n\n  // SVGs scale well, so you can generally use the default image.\n  // 1.5x is a special case where SVGs need a different image.\n  if (imageFileType === 'svg' && devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n    // Currently missing 1.5x SVGs at size 20, snap to 1x for now\n    if (size !== 20) {\n      devicePixelRatioSuffix = '_1.5x';\n    }\n  } else if (imageFileType === 'png') {\n    // To look good, PNGs should use a different image for higher device pixel ratios\n    if (devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n      // Currently missing 1.5x icons for size 20, snap to 2x for now\n      devicePixelRatioSuffix = size === 20 ? '_2x' : '_1.5x';\n    } else if (devicePixelRatio > 1.5 && devicePixelRatio <= 2) {\n      devicePixelRatioSuffix = '_2x';\n    } else if (devicePixelRatio > 2 && devicePixelRatio <= 3) {\n      devicePixelRatioSuffix = '_3x';\n    } else if (devicePixelRatio > 3) {\n      devicePixelRatioSuffix = '_4x';\n    }\n  }\n\n  return size + devicePixelRatioSuffix + '_' + imageFileType;\n}\n","import * as React from 'react';\nimport { registerIcons } from '@fluentui/style-utilities';\nimport { FileTypeIconMap } from './FileTypeIconMap';\nimport type { IIconOptions } from '@fluentui/style-utilities';\n\nconst PNG_SUFFIX = '_png';\nconst SVG_SUFFIX = '_svg';\n\nexport const DEFAULT_BASE_URL = 'https://spoppe-b.azureedge.net/files/fabric-cdn-prod_20221015.001/assets/item-types/';\nexport const ICON_SIZES: number[] = [16, 20, 24, 32, 40, 48, 64, 96];\n\nexport function initializeFileTypeIcons(baseUrl: string = DEFAULT_BASE_URL, options?: Partial<IIconOptions>): void {\n  ICON_SIZES.forEach((size: number) => {\n    _initializeIcons(baseUrl, size, options);\n  });\n}\n\nfunction _initializeIcons(baseUrl: string, size: number, options?: Partial<IIconOptions>): void {\n  const iconTypes: string[] = Object.keys(FileTypeIconMap);\n  const fileTypeIcons: { [key: string]: JSX.Element } = {};\n\n  iconTypes.forEach((type: string) => {\n    const baseUrlSizeType = baseUrl + size + '/' + type;\n    fileTypeIcons[type + size + PNG_SUFFIX] = <img src={baseUrlSizeType + '.png'} alt=\"\" />;\n    fileTypeIcons[type + size + SVG_SUFFIX] = <img src={baseUrlSizeType + '.svg'} alt=\"\" />;\n\n    // For high resolution screens, register additional versions\n    // Apply height=100% and width=100% to force image to fit into containing element\n\n    // SVGs scale well, so you can generally use the default image.\n    // 1.5x is a special case where both SVGs and PNGs need a different image.\n\n    fileTypeIcons[type + size + '_1.5x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_1.5x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_1.5x' + SVG_SUFFIX] = (\n      <img src={baseUrl + size + '_1.5x/' + type + '.svg'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n\n    fileTypeIcons[type + size + '_2x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_2x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_3x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_3x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_4x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_4x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n  });\n\n  registerIcons(\n    {\n      fontFace: {},\n      style: {\n        width: size,\n        height: size,\n        overflow: 'hidden',\n      },\n      icons: fileTypeIcons,\n      mergeImageProps: true,\n    },\n    options,\n  );\n}\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport type {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\nimport { composeRenderFunction } from '../../Utilities';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => {\n      let finalOnRenderItem = this._onRenderItem;\n\n      if (item.onRender) {\n        finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n      }\n\n      if (onRenderItem) {\n        finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n      }\n\n      return (\n        <li className={this._classNames.listItem} key={item.key || String(index)}>\n          {finalOnRenderItem(item)}\n          {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={item}\n            />\n          )}\n        </li>\n      );\n    });\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item?: IBreadcrumbItem) => {\n    if (!item) {\n      return null;\n    }\n\n    const { as, href, onClick, isCurrentItem, text, onRenderContent, ...additionalProps } = item;\n\n    let finalOnRenderContent = defaultOnRenderCrumbContent;\n\n    if (onRenderContent) {\n      finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n    }\n\n    if (this.props.onRenderItemContent) {\n      finalOnRenderContent = composeRenderFunction(this.props.onRenderItemContent, finalOnRenderContent);\n    }\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n\nfunction defaultOnRenderCrumbContent(item?: IBreadcrumbItem): JSX.Element | null {\n  return item ? <>{item.text}</> : null;\n}\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxMedium,\n  ScreenWidthMaxSmall,\n  ScreenWidthMinMedium,\n  getFocusStyle,\n  getScreenSelector,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IRawStyle } from '../../Styling';\nimport type { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item',\n};\n\nconst SingleLineTextStyle: IRawStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n};\n\nconst overflowButtonFontSize = 16;\nconst chevronSmallFontSize = 8;\nconst itemLineHeight = 36;\nconst itemFontSize = 18;\n\nconst MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nconst MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\n\nexport const getStyles = (props: IBreadcrumbStyleProps): IBreadcrumbStyles => {\n  const { className, theme } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  const itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  const itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  const itemTextColor = palette.neutralSecondary;\n  const itemTextFontWeight = FontWeights.regular;\n  const itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  const itemLastChildTextColor = palette.neutralPrimary;\n  const itemLastChildTextFontWeight = FontWeights.semibold;\n  const chevronButtonColor = palette.neutralSecondary;\n  const overflowButtonColor = palette.neutralSecondary;\n\n  const lastChildItemStyles: IRawStyle = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor,\n  };\n\n  const itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Highlight',\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor,\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor,\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none',\n    },\n  };\n\n  const commonItemStyles: IRawStyle = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight,\n  };\n\n  const overflowButtonHighContrastFocus = {\n    left: 1,\n    right: 1,\n    top: 1,\n    bottom: 1,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        margin: '11px 0 1px',\n      },\n      className,\n    ],\n\n    list: [\n      classNames.list,\n      {\n        whiteSpace: 'nowrap',\n        padding: 0,\n        margin: 0,\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n\n    listItem: [\n      classNames.listItem,\n      {\n        listStyleType: 'none',\n        margin: '0',\n        padding: '0',\n        display: 'flex',\n        position: 'relative',\n        alignItems: 'center',\n        selectors: {\n          '&:last-child .ms-Breadcrumb-itemLink': {\n            ...lastChildItemStyles,\n            [HighContrastSelector]: {\n              MsHighContrastAdjust: 'auto',\n              forcedColorAdjust: 'auto',\n            },\n          },\n          '&:last-child .ms-Breadcrumb-item': lastChildItemStyles,\n        },\n      },\n    ],\n\n    chevron: [\n      classNames.chevron,\n      {\n        color: chevronButtonColor,\n        fontSize: fonts.small.fontSize,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n          [MediumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n          [MinimumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n        },\n      },\n    ],\n\n    overflow: [\n      classNames.overflow,\n      {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n\n    overflowButton: [\n      classNames.overflowButton,\n      getFocusStyle(theme, { highContrastStyle: overflowButtonHighContrastFocus }),\n      SingleLineTextStyle,\n      {\n        fontSize: overflowButtonFontSize,\n        color: overflowButtonColor,\n        height: '100%',\n        cursor: 'pointer',\n        selectors: {\n          ...itemStateSelectors,\n          [MinimumScreenSelector]: {\n            padding: '4px 6px',\n          },\n          [MediumScreenSelector]: {\n            fontSize: fonts.mediumPlus.fontSize,\n          },\n        },\n      },\n    ],\n\n    itemLink: [\n      classNames.itemLink,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':focus': {\n            color: palette.neutralDark,\n          },\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            outline: `none`,\n          },\n          ...itemStateSelectors,\n        },\n      },\n    ],\n\n    item: [\n      classNames.item,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':hover': {\n            cursor: 'default',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { BreadcrumbBase } from './Breadcrumb.base';\nimport { getStyles } from './Breadcrumb.styles';\nimport type { IBreadcrumbProps, IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\nexport const Breadcrumb: React.FunctionComponent<IBreadcrumbProps> = styled<\n  IBreadcrumbProps,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles\n>(BreadcrumbBase, getStyles, undefined, { scope: 'Breadcrumb' });\n","import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { SelectionMode } from '../../Selection';\nimport { ScrollToMode } from '../../List';\nimport type { ISelection, ISelectionZoneProps } from '../../Selection';\nimport type { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject, IComponentAs } from '../../Utilities';\nimport type { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport type { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport type { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport type { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport type { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport type { IList, IListProps } from '../../List';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n  IDetailsColumnFieldProps,\n} from './DetailsColumn.types';\nimport { IFocusZoneProps } from '../../FocusZone';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n\n  /**\n   * Use to programatically resize and/or reorder columns in the DetailsList.\n   * @param column - column to resize/reorder.\n   * @param options - includes width which is desired width in pixels the column should be resized\n   * to and newColumnIndex which is desired index position where the column should be moved to.\n   */\n  updateColumn: (column: IColumn, options: { width?: number; newColumnIndex?: number }) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** Column definitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list constrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * Render function which is composed around rendering every cell.\n   */\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /**\n   * Accessible label describing or summarizing the list.\n   * @deprecated use `ariaLabelForGrid`\n   */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\". */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   * @deprecated using the application role in this case is an antipattern, and heavily discouraged.\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n\n  /**\n   * Properties to pass through to the FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be used as the column description.\n   * WARNING: grid column descriptions are often ignored by screen readers, so any necessary information\n   * should go directly in the column content\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** If true, column header will render an icon indicating column is sortable while unsorted */\n  showSortIconWhenUnsorted?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list could be sorted by this column but isn't currently.\n   * This will be read after the main column header label.\n   */\n  sortableAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n  groupedListAs?: IComponentAs<IGroupedListProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n\nexport type {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n","import * as React from 'react';\nimport type { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n","import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { SelectionMode } from '../../Selection';\nimport type { IList, IListProps } from '../../List';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../DragDrop';\nimport type { ISelection } from '../../Selection';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines an element's nesting depth in the current set of treeitems */\n  ariaLevel?: number;\n\n  /** Defines the number of items in the current set of treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header. */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group?: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n  /** Override which allows the caller to provide a custom renderer for just the name. */\n  onRenderName?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n","import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = React.forwardRef<HTMLDivElement, ICheckProps>(\n  (props, ref) => {\n    const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <div className={classNames.root} ref={ref}>\n        <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n        <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n      </div>\n    );\n  },\n);\nCheckBase.displayName = 'CheckBase';\n","import { HighContrastSelector, getGlobalClassNames, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL } from '../../Utilities';\nimport type { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport type { IStyle } from '../../Styling';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    // inline-flex prevents the check from shifting with custom line height styles\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n        top: '-1px', // the check is slightly lower than center compared to the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n","import {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { GlobalClassNames as LinkGlobalClassNames } from '../../components/Link/Link.styles';\nimport type { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport type { IStyle } from '../../Styling';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder, linkHovered: focusedLinkColor } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n          color: focusedLinkColor,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [HighContrastSelector]: {\n              background: 'Highlight',\n              selectors: {\n                [`.${classNames.cell}`]: {\n                  color: 'HighlightText',\n                },\n                [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                  forcedColorAdjust: 'none',\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n\n              [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                color: focusedLinkColor,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          '.ms-GroupSpacer': {\n            flexShrink: 0,\n            flexGrow: 0,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n","import {\n  getFocusStyle,\n  focusClear,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\nimport type { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ICellStyleProps } from './DetailsRow.types';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getDetailsHeaderStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../../components/Check/Check.styles';\nimport type { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getDetailsRowCheckStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n","import * as React from 'react';\nimport { css, styled, classNamesFunction, composeRenderFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getDetailsRowCheckStyles } from './DetailsRowCheck.styles';\nimport { SelectionMode } from '../../Selection';\nimport type {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport type { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    selectionMode,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  const checkRole = selectionMode === SelectionMode.single ? 'radio' : 'checkbox';\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role={checkRole}\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getDetailsRowCheckStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n","import { EventGroup, getDocument } from '../../Utilities';\nimport type {\n  IDragDropHelper,\n  IDragDropTarget,\n  IDragDropOptions,\n  IDragDropEvent,\n  IDragDropContext,\n} from './interfaces';\nimport type { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction, composeRenderFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription?: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    const hasInnerButton =\n      column.columnActionsMode !== ColumnActionsMode.disabled &&\n      (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n    const accNameDescription = {\n      'aria-label': column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : undefined,\n      'aria-labelledby': column.ariaLabel || column.isIconOnly ? undefined : `${parentId}-${column.key}-name`,\n      'aria-describedby':\n        !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleDescription()\n          ? `${parentId}-${column.key}-tooltip`\n          : undefined,\n    };\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          {...(!hasInnerButton && accNameDescription)}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          // when the column is not disabled and has no inner button, this node should be in the focus order\n          data-is-focusable={\n            !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n          }\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  className={classNames.cellTitle}\n                  // this node should only be focusable when it is a button\n                  data-is-focusable={\n                    hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n                  }\n                  role={hasInnerButton ? 'button' : undefined}\n                  {...(hasInnerButton && accNameDescription)}\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown ? 'menu' : undefined}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {(column.isSorted || column.showSortIconWhenUnsorted) && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSorted ? (column.isSortedDescending ? 'SortDown' : 'SortUp') : 'Sort'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleDescription(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel ||\n      column.sortableAriaLabel\n    );\n  }\n\n  private _renderAccessibleDescription(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n        hidden\n      >\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {((column.isSorted || column.showSortIconWhenUnsorted) &&\n          (column.isSorted\n            ? column.isSortedDescending\n              ? column.sortDescendingAriaLabel\n              : column.sortAscendingAriaLabel\n            : column.sortableAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n","import { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nimport type { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getDetailsColumnStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getDetailsColumnStyles } from './DetailsColumn.styles';\nimport type { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getDetailsColumnStyles, undefined, { scope: 'DetailsColumn' });\n\nexport type { IDetailsColumnProps };\n","import * as React from 'react';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { DetailsListLayoutMode, ColumnDragEndLocation } from './DetailsList.types';\nimport { SelectionMode } from '../../Selection';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IColumn, IColumnReorderOptions } from './DetailsList.types';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { ISelection } from '../../Selection';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeader {\n  /** sets focus into the header */\n  focus: () => boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\n  /** Theme from the Higher Order Component */\n  theme?: ITheme;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\n\n  /** Ref to the component itself */\n  componentRef?: IRefObject<IDetailsHeader>;\n\n  /** Layout mode - fixedColumns or justified */\n  layoutMode: DetailsListLayoutMode;\n\n  /** Callback for when column sizing has changed */\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\n\n  /** Callback for when column is resized */\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\n\n  /** Callback for when column is automatically resized */\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\n\n  /** Callback for when the column is clicked */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the column needs to show a context menu */\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback to render a tooltip for the column header */\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\n\n  /** Whether to collapse for all visibility */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /** Whether or not all is collapsed */\n  isAllCollapsed?: boolean;\n\n  /** Callback for when collapse all is toggled */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** ariaLabel for the entire header */\n  ariaLabel?: string;\n\n  /** ariaLabel for expand/collapse group button */\n  ariaLabelForToggleAllGroupsButton?: string;\n\n  /** ariaLabel for the header checkbox that selects or deselects everything */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** ariaLabel for the selection column */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Select all button visibility */\n  selectAllVisibility?: SelectAllVisibility;\n\n  /** Column reordering options */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Column reordering options */\n  columnReorderProps?: IColumnReorderHeaderProps;\n\n  /** Minimum pixels to be moved before dragging is registered */\n  minimumPixelsForDrag?: number;\n\n  /** Overriding class name */\n  className?: string;\n\n  /** If provided, can be used to render a custom checkbox */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum SelectAllVisibility {\n  none = 0,\n  hidden = 1,\n  visible = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderState {\n  columnResizeDetails?: IColumnResizeDetails;\n  isAllSelected?: boolean;\n  isSizing?: boolean;\n  isAllCollapsed?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnResizeDetails {\n  columnIndex: number;\n  originX?: number;\n  columnMinWidth: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\n  /** Callback to notify the column dragEnd event to List\n   * Need this to check whether the dragEnd has happened on\n   * corresponding list or outside of the list\n   */\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDropHintDetails {\n  originX: number; // X index of dropHint Element relative to header\n  startX: number; // start index of the range for the current drophint\n  endX: number; // end index of the range for the current drophint\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\n  Pick<IDetailsHeaderProps, 'className'> & {\n    /** Whether to hide select all checkbox */\n    isSelectAllHidden?: boolean;\n\n    /** Whether the \"select all\" checkbox is checked */\n    isAllSelected?: boolean;\n\n    /** Is column being resized */\n    isResizingColumn?: boolean;\n\n    /** Are all columns collapsed */\n    isAllCollapsed?: boolean;\n\n    /** Whether the header is sizing */\n    isSizing?: boolean;\n\n    /** Whether checkbox is hidden  */\n    isCheckboxHidden?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderStyles {\n  root: IStyle;\n  check: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellWrapperPadded: IStyle;\n  cellIsCheck: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsActionable: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsEmpty: IStyle;\n  cellSizer: IStyle;\n  cellSizerStart: IStyle;\n  cellSizerEnd: IStyle;\n  cellIsResizing: IStyle;\n  cellIsGroupExpander: IStyle;\n  collapseButton: IStyle;\n  checkTooltip: IStyle;\n  sizingOverlay: IStyle;\n  dropHintCircleStyle: IStyle;\n  dropHintCaretStyle: IStyle;\n  dropHintLineStyle: IStyle;\n  dropHintStyle: IStyle;\n  accessibleLabel: IStyle;\n}\n","import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const showGroupExpander =\n      groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { getDetailsHeaderStyles } from './DetailsHeader.styles';\nimport type {\n  IDetailsHeaderProps,\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n} from './DetailsHeader.types';\n\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles\n>(DetailsHeaderBase, getDetailsHeaderStyles, undefined, { scope: 'DetailsHeader' });\n\nexport type { IDetailsHeaderProps, IDetailsHeaderBaseProps };\n","import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { getId } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      isGridRow,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        isSelected={isSelected}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        onRenderField={onRenderField}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    const hasRowHeader = columns.some(column => {\n      return !!column.isRowHeader;\n    });\n    const ariaLabelledby = `${id}-checkbox` + (hasRowHeader ? ` ${id}-header` : '');\n\n    // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n    const groupedListRowProps = isGridRow\n      ? {}\n      : {\n          'aria-level': (groupNestingDepth && groupNestingDepth + 1) || undefined,\n          'aria-posinset': ariaPositionInSet,\n          'aria-setsize': ariaSetSize,\n        };\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        {...groupedListRowProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? ariaLabelledby : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\nimport type {\n  IDetailsRowProps,\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles,\n} from './DetailsRow.types';\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n\nexport type { IDetailsRowProps, IDetailsRowBaseProps };\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { SelectionMode } from './interfaces';\nimport type { ISelection, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_SPAN_ATTRIBUTE_NAME = 'data-selection-span';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  children?: React.ReactNode;\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Determines if elements within the selection zone that DO NOT have the 'data-selection-toggle' or\n   * 'data-selection-all-toggle' attribute are clickable and can alter the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnSurfaceClick?: boolean;\n\n  /**\n   * Determines if pressing the Escape clears the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnEscapePress?: boolean;\n\n  /**\n   * Allows the default toggle behavior to be overridden.\n   * When set to `true` users do not have press a modifier key (e.g., ctrl or meta)\n   * to toggle values.\n   *\n   * @default false\n   */\n  toggleWithoutModifierPressed?: boolean;\n\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    toggleWithoutModifierPressed: false,\n    selectionMode: SelectionMode.multiple,\n    selectionClearedOnEscapePress: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n        const span = this._getItemSpan(itemRoot);\n\n        if (span === undefined) {\n          if (isToggleModifierPressed) {\n            // set anchor only.\n            selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n            if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n              selection.setModal(true);\n              this._setIsTouch(false);\n            }\n          } else {\n            if (this.props.isSelectedOnFocus) {\n              this._onItemSurfaceClick('focus', index);\n            }\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    const { toggleWithoutModifierPressed } = this.props;\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed &&\n          !toggleWithoutModifierPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot), this._getItemSpan(itemRoot));\n\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n        const span = this._getItemSpan(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick('click', index, span);\n            } else {\n              this._onToggleClick(ev, index, span);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          if (span === undefined) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n          }\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick('click', index, span);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection, selectionClearedOnEscapePress } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    // eslint-disable-next-line deprecation/deprecation\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed and the component is configured to clear on escape press,\n    // clear selection (if any are selected.)\n    if (selectionClearedOnEscapePress && isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n      const span = this._getItemSpan(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled && span === undefined) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index, span);\n          }\n          break;\n        } else if (\n          // eslint-disable-next-line deprecation/deprecation\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' ||\n            target.tagName === 'A' ||\n            target.tagName === 'INPUT' ||\n            target.tagName === 'SUMMARY')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          // eslint-disable-next-line deprecation/deprecation\n          if (ev.which === KeyCodes.enter) {\n            if (span === undefined) {\n              // Items should be invokable even if selection is disabled.\n              this._onInvokeClick(ev, index);\n              ev.preventDefault();\n            }\n            return;\n            // eslint-disable-next-line deprecation/deprecation\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index, span);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n    span?: number,\n  ): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (\n      this.props.enterModalOnTouch &&\n      this._isTouch &&\n      (span !== undefined ? !selection.isRangeSelected(index, span) : !selection.isIndexSelected(index)) &&\n      selection.setModal\n    ) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (span !== undefined) {\n        selection.toggleRangeSelected(index, span);\n      } else {\n        selection.toggleIndexSelected(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      if (span === undefined || span === 1) {\n        const isSelected = selection.isIndexSelected(index);\n        const isModal = selection.isModal && selection.isModal();\n        selection.setAllSelected(false);\n        selection.setIndexSelected(index, !isSelected, true);\n        if (isModal && selection.setModal) {\n          // Since the above call to setAllSelected(false) clears modal state,\n          // restore it. This occurs because the SelectionMode of the Selection\n          // may differ from the SelectionZone.\n          selection.setModal(true);\n        }\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(type: 'focus' | 'click', index: number, span?: number): void {\n    const { selection, toggleWithoutModifierPressed } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        if (span !== undefined) {\n          selection.selectToRange?.(index, span, !isToggleModifierPressed);\n        } else {\n          selection.selectToIndex(index, !isToggleModifierPressed);\n        }\n      } else if (type === 'click' && (isToggleModifierPressed || toggleWithoutModifierPressed)) {\n        if (span !== undefined) {\n          selection.toggleRangeSelected(index, span);\n        } else {\n          selection.toggleIndexSelected(index);\n        }\n      } else {\n        this._clearAndSelectIndex(index, span);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index, span);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n    span?: number,\n  ): void {\n    const { selection } = this.props;\n\n    if (span !== undefined) {\n      if (selection.isRangeSelected(index, span)) {\n        return;\n      }\n    } else {\n      // Only do work if item is not selected.\n      if (selection.isIndexSelected(index)) {\n        return;\n      }\n    }\n\n    this._clearAndSelectIndex(index, span);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number, span?: number): void {\n    const { selection, selectionClearedOnSurfaceClick = true } = this.props;\n    const isAlreadySingleSelected =\n      (span === undefined || span === 1) && selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      if (span !== undefined) {\n        selection.setRangeSelected?.(index, span, true, true);\n      } else {\n        selection.setIndexSelected(index, true, true);\n      }\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    const indexValue = parseInt(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME) ?? '', 10);\n\n    return isNaN(indexValue) ? -1 : indexValue;\n  }\n\n  private _getItemSpan(itemRoot: HTMLElement): number | undefined {\n    const spanValue = parseInt(itemRoot.getAttribute(SELECTION_SPAN_ATTRIBUTE_NAME) ?? '', 10);\n\n    return isNaN(spanValue) ? undefined : spanValue;\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      const value = element.getAttribute(attributeName);\n      if (value === 'false') {\n        isToggle = false;\n        break;\n      }\n      isToggle = value === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return (\n      element.tagName === 'INPUT' ||\n      element.tagName === 'TEXTAREA' ||\n      element.getAttribute('contenteditable') === 'true' ||\n      element.getAttribute('contenteditable') === ''\n    );\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element) || element.hasAttribute('data-selection-index')) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n","import { getGlobalClassNames, AnimationVariables } from '../../Styling';\nimport type { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle, AnimationVariables, FontWeights, IconFontSizes } from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\nimport type { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * @deprecated Use `size` instead. Will be removed at \\>= 2.0.0.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render.\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * @deprecated Use `SpinnerSize` instead. Will be removed at \\>= 2.0.0.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \\>= 2.0.0.\n   */\n  normal = 0,\n\n  /**\n   * @deprecated Use `SpinnerSize.large` instead. Will be removed at \\>= 2.0.0.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport type { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaLevel,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderTitle = this.props.onRenderTitle\n      ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle)\n      : this._onRenderTitle;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        role=\"row\"\n        aria-level={ariaLevel}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        data-selection-index={group.startIndex}\n        data-selection-span={group.count}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              data-selection-disabled={true}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    const onRenderName = props.onRenderName\n      ? composeRenderFunction(props.onRenderName, this._onRenderName)\n      : this._onRenderName;\n\n    return (\n      <div\n        className={this._classNames.title}\n        id={this._id}\n        onClick={this._onHeaderClick}\n        role=\"gridcell\"\n        aria-colspan={this.props.ariaColSpan}\n        data-selection-invoke={true}\n      >\n        {onRenderName(props)}\n      </div>\n    );\n  };\n\n  private _onRenderName = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport type { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n\nexport type { IGroupHeaderProps };\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n\nexport type { IGroupShowAllProps };\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n\nexport type { IGroupShowAllProps };\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport type { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n\nexport type { IGroupFooterProps };\n","import * as React from 'react';\nimport { List } from './List';\nimport type { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Method to call when trying to render an item conditionally.\n   *\n   * When this method returns `null` the cell will be skipped in the render.\n   *\n   * This prop is mutually exclusive with `onRenderCell` and when `onRenderCellConditional` is set,\n   * `onRenderCell` will not be called.\n   *\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCellConditional?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode | null;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n","export const getScrollHeight = (el?: HTMLElement | Window): number => {\n  if (el === undefined) {\n    return 0;\n  }\n\n  let scrollHeight = 0;\n  if ('scrollHeight' in el) {\n    scrollHeight = el.scrollHeight;\n  } else if ('document' in el) {\n    scrollHeight = el.document.documentElement.scrollHeight;\n  }\n\n  // No need to round as scrollHeight is already rounded for us.\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight\n  return scrollHeight;\n};\n\nexport const getScrollYPosition = (el?: HTMLElement | Window): number => {\n  if (el === undefined) {\n    return 0;\n  }\n\n  let scrollPos = 0;\n  if ('scrollTop' in el) {\n    scrollPos = el.scrollTop;\n  } else if ('scrollY' in el) {\n    scrollPos = el.scrollY;\n  }\n\n  // Round this value to an integer as it may be fractional.\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY\n  return Math.ceil(scrollPos);\n};\n\nexport const setScrollYPosition = (el: HTMLElement | Window, pos: number): void => {\n  if ('scrollTop' in el) {\n    el.scrollTop = pos;\n  } else if ('scrollY' in el) {\n    el.scrollTo(el.scrollX, pos);\n  }\n};\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  canUseDOM,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nimport { getScrollHeight, getScrollYPosition, setScrollYPosition } from './utils/scroll';\nimport type { IRectangle, IRenderFunction } from '../../Utilities';\nimport type {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n  hasMounted: boolean;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    onRenderCellConditional: undefined,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n      hasMounted: false,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(this.props, itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollPosition = getScrollYPosition(this._scrollElement);\n          const scrollWindow = {\n            top: scrollPosition,\n            bottom: scrollPosition + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              setScrollYPosition(this._scrollElement, scrollTop);\n              return;\n            case ScrollToMode.bottom:\n              setScrollYPosition(this._scrollElement, scrollBottom - scrollRect.height);\n              return;\n            case ScrollToMode.center:\n              setScrollYPosition(this._scrollElement, (scrollTop + scrollBottom - scrollRect.height) / 2);\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          setScrollYPosition(this._scrollElement, scrollTop);\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState({ hasMounted: true });\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollTop = 0;\n\n    if (!this.props.getPageHeight) {\n      const heightsChanged = this._updatePageMeasurements(this.state.pages!);\n      if (heightsChanged) {\n        this._materializedRect = null;\n        this.setState(this._updatePages(this.props, this.state));\n      }\n    }\n\n    this._measureVersion++;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        if (heightsChanged) {\n          this._materializedRect = null;\n          this._onAsyncScroll();\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.className !== this.props.className) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n        'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version ||\n      !previousState.hasMounted\n    ) {\n      if (!canUseDOM()) {\n        return previousState;\n      }\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page,\n        pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, onRenderCellConditional, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      const renderCell = onRenderCellConditional ?? onRenderCell;\n\n      const cell =\n        renderCell?.(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined) ?? null;\n\n      if (!onRenderCellConditional || cell) {\n        cells.push(\n          <div\n            role={cellRole}\n            className={'ms-List-cell'}\n            key={itemKey}\n            data-list-index={index}\n            data-automationid=\"ListCell\"\n          >\n            {cell}\n          </div>,\n        );\n      }\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(props, itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    props: IListProps,\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = props;\n\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount,\n        height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex,\n      itemCount: count,\n      items,\n      style,\n      top: 0,\n      height: 0,\n      data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = getScrollHeight(this._scrollElement);\n    const scrollTop = getScrollYPosition(this._scrollElement);\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top,\n    bottom: top + height,\n    height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n","import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaLevel: group?.level ? group.level + 1 : 1,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n","import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n      items,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport type { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n\nexport type { IGroupedListProps };\n","import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent - decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n","import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n","import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeComponentAs, composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    isSelectedOnFocus = true,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount =\n    (isHeaderVisible ? 1 : 0) +\n    (props.onRenderDetailsFooter ? 1 : 0) +\n    GetGroupCount(groups) +\n    (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaLevel: undefined,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaLevel: undefined,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      // add tabindex=\"0\" to first row if no header exists, to ensure the focuszone is in the tab order\n      const rowFocusZoneProps = isHeaderVisible || index > 0 ? {} : { tabIndex: 0 };\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n        isGridRow: true,\n        focusZoneProps: rowFocusZoneProps,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const FinalGroupedList =\n    groups && groupProps?.groupedListAs ? composeComponentAs(groupProps.groupedListAs, GroupedList) : GroupedList;\n\n  const list = groups ? (\n    <FinalGroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef, isSelectedOnFocus],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? 0 : rowCount}\n        aria-colcount={colCount}\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              isSelectedOnFocus={isSelectedOnFocus}\n              selectionClearedOnEscapePress={isSelectedOnFocus}\n              toggleWithoutModifierPressed={!isSelectedOnFocus}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, skipViewportMeasures } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (skipViewportMeasures) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getDetailsListStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getDetailsListStyles } from './DetailsList.styles';\nimport type { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getDetailsListStyles, undefined, {\n  scope: 'DetailsList',\n});\n\nexport type { IDetailsListProps };\n","import {\n  keyframes,\n  getGlobalClassNames,\n  hiddenContentStyle,\n  HighContrastSelector,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nimport type { IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper',\n};\n\nconst BACKGROUND_OFF_SCREEN_POSITION = '100%';\n\nconst shimmerAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '100%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nconst shimmerAnimationRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '0%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nexport function getStyles(props: IShimmerStyleProps): IShimmerStyles {\n  const {\n    isDataLoaded,\n    className,\n    theme,\n    transitionAnimationInterval,\n    shimmerColor,\n    shimmerWaveColor,\n    improveCSSPerformance,\n  } = props;\n\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const isRTL = getRTL(theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        position: 'relative',\n        height: 'auto',\n      },\n      className,\n    ],\n    shimmerWrapper: [\n      classNames.shimmerWrapper,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        transform: 'translateZ(0)',\n        backgroundColor: shimmerColor || semanticColors.disabledBackground,\n        transition: `opacity ${transitionAnimationInterval}ms`,\n        selectors: {\n          [HighContrastSelector]: {\n            background: `WindowText\n                        linear-gradient(\n                          to right,\n                          transparent 0%,\n                          Window 50%,\n                          transparent 100%)\n                        0 0 / 90% 100%\n                        no-repeat`,\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      isDataLoaded && {\n        opacity: '0',\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n      },\n      improveCSSPerformance\n        ? {\n            selectors: {\n              '> div:last-child': {\n                transform: 'translateZ(0)',\n              },\n            },\n          }\n        : {\n            selectors: {\n              '> *': {\n                transform: 'translateZ(0)',\n              },\n            },\n          },\n    ],\n    shimmerGradient: [\n      classNames.shimmerGradient,\n      {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        background: `${shimmerColor || semanticColors.disabledBackground}\n                      linear-gradient(\n                        to right,\n                        ${shimmerColor || semanticColors.disabledBackground} 0%,\n                        ${shimmerWaveColor || semanticColors.bodyDivider} 50%,\n                        ${shimmerColor || semanticColors.disabledBackground} 100%)\n                      0 0 / 90% 100%\n                      no-repeat`,\n        transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n        animationDuration: '2s',\n        animationTimingFunction: 'ease-in-out',\n        animationDirection: 'normal',\n        animationIterationCount: 'infinite',\n        animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation(),\n      },\n    ],\n    dataWrapper: [\n      classNames.dataWrapper,\n      {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        opacity: '0',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        transition: `opacity ${transitionAnimationInterval}ms`,\n      },\n      isDataLoaded && {\n        opacity: '1',\n        position: 'static',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n","import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * Shimmer component props.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerProps extends React.AllHTMLAttributes<HTMLElement>, React.RefAttributes<HTMLElement> {\n  /**\n   * Sets the width value of the shimmer wave wrapper.\n   * @defaultvalue 100%\n   */\n  width?: number | string;\n\n  /**\n   * Controls when the shimmer is swapped with actual data through an animated transition.\n   * @defaultvalue false\n   */\n  isDataLoaded?: boolean;\n\n  /**\n   * Elements to render in one line of the Shimmer.\n   */\n  shimmerElements?: IShimmerElement[];\n\n  /**\n   * Custom elements when necessary to build complex placeholder skeletons.\n   */\n  customElementsGroup?: React.ReactNode;\n\n  /**\n   * Localized string of the status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>;\n\n  /**\n   * Additional CSS class(es) to apply to the Shimmer container.\n   */\n  className?: string;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Defines an object with possible colors to pass for Shimmer customization used on different backgrounds.\n   */\n  shimmerColors?: IShimmerColors;\n\n  /**\n   * Only use if `customElementsGroup` has a single parent `div`. If a custom element is not provided, defaults to true.\n   */\n  improveCSSPerformance?: boolean;\n}\n\n/**\n * Shimmer Elements Interface representing all common properties between Gap, Circle and Line.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerElement {\n  /**\n   * Represents the possible type of the shimmer elements: Gap, Circle, Line.\n   * Required for every element you intend to use.\n   */\n  type: ShimmerElementType;\n\n  /**\n   * Sets the height of the element (ICircle, ILine, IGap) in pixels.\n   * Read more details for each specific element.\n   */\n  height?: number;\n\n  /**\n   * Sets the width value of the element (ILine, IGap) in pixels.\n   * Read more details for each specific element.\n   */\n  width?: number | string;\n\n  /**\n   * Sets vertical alignment of the element (ICircle, ILine).\n   * @defaultvalue center\n   */\n  verticalAlign?: 'top' | 'center' | 'bottom';\n}\n\n/**\n * Line element interface\n * {@docCategory Shimmer}\n */\nexport interface ILine extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer line in pixels.\n   * @defaultvalue 16px\n   */\n  height?: number;\n\n  /**\n   * Line width value.\n   * @defaultvalue 100%\n   */\n  width?: number | string;\n}\n\n/**\n * Circle element interface\n * {@docCategory Shimmer}\n */\nexport interface ICircle extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer circle in pixels.\n   * Minimum supported 10px.\n   * @defaultvalue 24px\n   */\n  height?: number;\n}\n\n/**\n * Gap element interface\n * {@docCategory Shimmer}\n */\nexport interface IGap extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer gap in pixels.\n   * @defaultvalue 16px\n   */\n  height?: number;\n\n  /**\n   * Gap width value.\n   * @defaultvalue 10px\n   */\n  width?: number | string;\n}\n\n/**\n * Defines props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerStyleProps {\n  /** Boolean flag to trigger fadeIn/fadeOut transition animation when content is loaded. */\n  isDataLoaded?: boolean;\n\n  /** Optional CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Interval in milliseconds for the adeIn/fadeOut transition animation. */\n  transitionAnimationInterval?: number;\n\n  /** Color to be used as the main background color of Shimmer when not animating. */\n  shimmerColor?: string;\n\n  /** Tip color of the shimmer wave which gradually gets from and to `shimmerColor`. */\n  shimmerWaveColor?: string;\n\n  /** Boolean flag to apply a more efficient CSS selector */\n  improveCSSPerformance?: boolean;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerStyles {\n  /** Refers to the root wrapper element. */\n  root?: IStyle;\n\n  /** Refers to wrapper element of the shimmer only. */\n  shimmerWrapper?: IStyle;\n\n  /** Refers to gradient element of the shimmer animation only. */\n  shimmerGradient?: IStyle;\n\n  /** Refers to wrapper element of the children only. */\n  dataWrapper?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n\n/**\n * Describes the possible types for shimmer elements used.\n * {@docCategory Shimmer}\n */\nexport enum ShimmerElementType {\n  /**\n   * Line element type\n   */\n  line = 1,\n\n  /**\n   * Circle element type\n   */\n  circle = 2,\n\n  /**\n   * Gap element type\n   */\n  gap = 3,\n}\n\n/**\n * Describes the default heights for shimmer elements when omitted in implementation.\n * {@docCategory Shimmer}\n */\nexport enum ShimmerElementsDefaultHeights {\n  /**\n   * Default height of the line element when not provided by user: 16px\n   */\n  line = 16,\n\n  /**\n   * Default height of the gap element when not provided by user: 16px\n   */\n  gap = 16,\n\n  /**\n   * Default height of the circle element when not provided by user: 24px\n   */\n  circle = 24,\n}\n\n/**\n * Interface describing the possible color customizations of Shimmer.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerColors {\n  /**\n   * Defines the main background color which is the color you see when the wave is not animating.\n   * @defaultvalue theme.palette.neutralLight\n   */\n  shimmer?: string;\n\n  /**\n   * Defines the tip color of the shimmer wave which gradually gets from and to `shimmer` color.\n   * @defaultvalue theme.palette.neutralLighter\n   */\n  shimmerWave?: string;\n\n  /**\n   * Defines the background color of the space in between and around shimmer elements (borders, gaps and\n   * rounded corners).\n   * @defaultvalue theme.palette.white\n   */\n  background?: string;\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerLineProps, IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\n\nconst getClassNames = classNamesFunction<IShimmerLineStyleProps, IShimmerLineStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerLineBase: React.FunctionComponent<IShimmerLineProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, width = '100%', borderStyle, theme } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div\n      style={{ width: width, minWidth: typeof width === 'number' ? `${width}px` : 'auto' }}\n      className={classNames.root}\n    >\n      <svg width=\"2\" height=\"2\" className={classNames.topLeftCorner}>\n        <path d=\"M0 2 A 2 2, 0, 0, 1, 2 0 L 0 0 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.topRightCorner}>\n        <path d=\"M0 0 A 2 2, 0, 0, 1, 2 2 L 2 0 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.bottomRightCorner}>\n        <path d=\"M2 0 A 2 2, 0, 0, 1, 0 2 L 2 2 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.bottomLeftCorner}>\n        <path d=\"M2 2 A 2 2, 0, 0, 1, 0 0 L 0 2 Z\" />\n      </svg>\n    </div>\n  );\n};\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerLine-root',\n  topLeftCorner: 'ms-ShimmerLine-topLeftCorner',\n  topRightCorner: 'ms-ShimmerLine-topRightCorner',\n  bottomLeftCorner: 'ms-ShimmerLine-bottomLeftCorner',\n  bottomRightCorner: 'ms-ShimmerLine-bottomRightCorner',\n};\n\nexport function getStyles(props: IShimmerLineStyleProps): IShimmerLineStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  const sharedCornerStyles: IRawStyle = {\n    position: 'absolute',\n    fill: semanticColors.bodyBackground,\n  };\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        height: `${height}px`,\n        boxSizing: 'content-box',\n        position: 'relative',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        borderWidth: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Window',\n            selectors: {\n              '> *': {\n                fill: 'Window',\n              },\n            },\n          },\n        },\n      },\n      borderStyles,\n    ],\n    topLeftCorner: [\n      globalClassNames.topLeftCorner,\n      {\n        top: '0',\n        left: '0',\n      },\n      sharedCornerStyles,\n    ],\n    topRightCorner: [\n      globalClassNames.topRightCorner,\n      {\n        top: '0',\n        right: '0',\n      },\n      sharedCornerStyles,\n    ],\n    bottomRightCorner: [\n      globalClassNames.bottomRightCorner,\n      {\n        bottom: '0',\n        right: '0',\n      },\n      sharedCornerStyles,\n    ],\n    bottomLeftCorner: [\n      globalClassNames.bottomLeftCorner,\n      {\n        bottom: '0',\n        left: '0',\n      },\n      sharedCornerStyles,\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerLineBase } from './ShimmerLine.base';\nimport { getStyles } from './ShimmerLine.styles';\nimport type { IShimmerLineProps, IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\n\nexport const ShimmerLine: React.FunctionComponent<IShimmerLineProps> = styled<\n  IShimmerLineProps,\n  IShimmerLineStyleProps,\n  IShimmerLineStyles\n>(ShimmerLineBase, getStyles, undefined, {\n  scope: 'ShimmerLine',\n});\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerGapProps, IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\n\nconst getClassNames = classNamesFunction<IShimmerGapStyleProps, IShimmerGapStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerGapBase: React.FunctionComponent<IShimmerGapProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, width = '10px', borderStyle, theme } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div\n      style={{ width: width, minWidth: typeof width === 'number' ? `${width}px` : 'auto' }}\n      className={classNames.root}\n    />\n  );\n};\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerGap-root',\n};\n\nexport function getStyles(props: IShimmerGapStyleProps): IShimmerGapStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        height: `${height}px`,\n        boxSizing: 'content-box',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Window',\n            borderColor: 'Window',\n          },\n        },\n      },\n      borderStyles,\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerGapBase } from './ShimmerGap.base';\nimport { getStyles } from './ShimmerGap.styles';\nimport type { IShimmerGapProps, IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\n\nexport const ShimmerGap: React.FunctionComponent<IShimmerGapProps> = styled<\n  IShimmerGapProps,\n  IShimmerGapStyleProps,\n  IShimmerGapStyles\n>(ShimmerGapBase, getStyles, undefined, {\n  scope: 'ShimmerGap',\n});\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerCircle-root',\n  svg: 'ms-ShimmerCircle-svg',\n};\n\nexport function getStyles(props: IShimmerCircleStyleProps): IShimmerCircleStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        width: `${height}px`,\n        height: `${height}px`,\n        minWidth: `${height}px`, // Fix for IE11 flex items\n        boxSizing: 'content-box',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Window',\n          },\n        },\n      },\n      borderStyles,\n    ],\n    svg: [\n      globalClassNames.svg,\n      {\n        display: 'block',\n        fill: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            fill: 'Window',\n          },\n        },\n      },\n    ],\n  };\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerCircleProps, IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerCircleStyleProps, IShimmerCircleStyles>();\n\nexport const ShimmerCircleBase: React.FunctionComponent<IShimmerCircleProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, borderStyle, theme } = props;\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div className={classNames.root}>\n      <svg viewBox=\"0 0 10 10\" width={height} height={height} className={classNames.svg}>\n        <path d=\"M0,0 L10,0 L10,10 L0,10 L0,0 Z M0,5 C0,7.76142375 2.23857625,10 5,10 C7.76142375,10 10,7.76142375 10,5 C10,2.23857625 7.76142375,2.22044605e-16 5,0 C2.23857625,-2.22044605e-16 0,2.23857625 0,5 L0,5 Z\" />\n      </svg>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { getStyles } from './ShimmerCircle.styles';\nimport { ShimmerCircleBase } from './ShimmerCircle.base';\nimport type { IShimmerCircleProps, IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\n\nexport const ShimmerCircle: React.FunctionComponent<IShimmerCircleProps> = styled<\n  IShimmerCircleProps,\n  IShimmerCircleStyleProps,\n  IShimmerCircleStyles\n>(ShimmerCircleBase, getStyles, undefined, { scope: 'ShimmerCircle' });\n","import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport type { IRawStyle } from '../../../Styling';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport type { IShimmerElement } from '../Shimmer.types';\nimport type { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport type { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport type { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n","import { getGlobalClassNames } from '../../../Styling';\nimport type { IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerElementsGroup-root',\n};\n\nexport function getStyles(props: IShimmerElementsGroupStyleProps): IShimmerElementsGroupStyles {\n  const { flexWrap, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: flexWrap ? 'wrap' : 'nowrap',\n        position: 'relative',\n      },\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerElementsGroupBase } from './ShimmerElementsGroup.base';\nimport { getStyles } from './ShimmerElementsGroup.styles';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\n\nexport const ShimmerElementsGroup: React.FunctionComponent<IShimmerElementsGroupProps> = styled<\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles\n>(ShimmerElementsGroupBase, getStyles, undefined, { scope: 'ShimmerElementsGroup' });\n","import * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nconst COMPONENT_NAME = 'Shimmer';\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerBase: React.FunctionComponent<IShimmerProps> = React.forwardRef<HTMLDivElement, IShimmerProps>(\n  (props, ref) => {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n      isDataLoaded = false,\n      improveCSSPerformance,\n    } = props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames: { [key in keyof IShimmerStyles]: string } = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n      improveCSSPerformance: improveCSSPerformance || !customElementsGroup,\n    });\n\n    const internalState = useConst({\n      lastTimeoutId: 0,\n    });\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    const [contentLoaded, setContentLoaded] = React.useState(isDataLoaded);\n\n    const divStyleProp = { width: width ? width : '100%' };\n\n    React.useEffect(() => {\n      if (isDataLoaded !== contentLoaded) {\n        if (isDataLoaded) {\n          internalState.lastTimeoutId = setTimeout(() => {\n            setContentLoaded(true);\n          }, TRANSITION_ANIMATION_INTERVAL);\n\n          return () => clearTimeout(internalState.lastTimeoutId);\n        } else {\n          setContentLoaded(false);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n\n    return (\n      <div {...divProps} className={classNames.root} ref={ref}>\n        {!contentLoaded && (\n          <div style={divStyleProp} className={classNames.shimmerWrapper}>\n            <div className={classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nShimmerBase.displayName = COMPONENT_NAME;\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './Shimmer.styles';\nimport { ShimmerBase } from './Shimmer.base';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nexport const Shimmer: React.FunctionComponent<IShimmerProps> = styled<\n  IShimmerProps,\n  IShimmerStyleProps,\n  IShimmerStyles\n>(ShimmerBase, getStyles, undefined, {\n  scope: 'Shimmer',\n});\n","import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDetailsRowProps } from './DetailsRow.types';\nimport type { IShimmerElement } from '../../Shimmer';\nimport type {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n","import type { IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles } from './ShimmeredDetailsList.types';\n\nexport const getShimmeredDetailsListStyles = (props: IShimmeredDetailsListStyleProps): IShimmeredDetailsListStyles => {\n  const { theme } = props;\n  const { palette } = theme;\n\n  return {\n    root: {\n      position: 'relative',\n      selectors: {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          // eslint-disable-next-line @fluentui/max-len\n          backgroundImage: `linear-gradient(to bottom, transparent 30%, ${palette.whiteTranslucent40} 65%,${palette.white} 100%)`,\n        },\n      },\n    },\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ShimmeredDetailsListBase } from './ShimmeredDetailsList.base';\nimport { getShimmeredDetailsListStyles } from './ShimmeredDetailsList.styles';\nimport type {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\n\nexport const ShimmeredDetailsList: React.FunctionComponent<IShimmeredDetailsListProps> = styled<\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles\n>(ShimmeredDetailsListBase, getShimmeredDetailsListStyles, undefined, { scope: 'ShimmeredDetailsList' });\n","import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport type { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity!: number;\n  private _isVerticalScroll!: boolean;\n  private _timeoutId?: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n","import * as React from 'react';\n\nimport {\n  Async,\n  EventGroup,\n  AutoScroll,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\nimport type { Point, IRectangle } from '../../Utilities';\nimport type {\n  IMarqueeSelectionProps,\n  IMarqueeSelectionStyleProps,\n  IMarqueeSelectionStyles,\n} from './MarqueeSelection.types';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: Point;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends React.Component<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: Point | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent?: HTMLElement;\n  private _scrollableSurface?: HTMLElement;\n  private _scrollTop: number;\n  private _scrollLeft: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      dragRect: undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n    const targetScrollbarHeight = targetElement.offsetHeight - targetElement.clientHeight;\n\n    if (targetScrollbarWidth || targetScrollbarHeight) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (\n      !this._isTouch &&\n      isEnabled &&\n      !this._isDragStartInSelection(ev) &&\n      (!onShouldStartSelection || onShouldStartSelection(ev))\n    ) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._scrollLeft = this._scrollableSurface.scrollLeft;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left:\n        this._rootRect.left +\n        (this._scrollableSurface ? this._scrollLeft - this._scrollableSurface.scrollLeft : this._scrollLeft),\n      top:\n        this._rootRect.top +\n        (this._scrollableSurface ? this._scrollTop - this._scrollableSurface.scrollTop : this._scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height,\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top)),\n            }\n          : {\n              left: this._lastMouseEvent!.clientX - rootRect.left,\n              top: this._lastMouseEvent!.clientY - rootRect.top,\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined,\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: Point): boolean {\n    return (\n      !!point.top &&\n      rectangle.top < point.top &&\n      rectangle.bottom! > point.top &&\n      !!point.left &&\n      rectangle.left < point.left &&\n      rectangle.right! > point.left\n    );\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height,\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n","import { HighContrastSelector } from '../../Styling';\nimport type { IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\n\nexport const getStyles = (props: IMarqueeSelectionStyleProps): IMarqueeSelectionStyles => {\n  const { theme, className } = props;\n  const { palette } = theme;\n\n  return {\n    root: [\n      className,\n      {\n        position: 'relative',\n        cursor: 'default',\n      },\n    ],\n    dragMask: [\n      {\n        position: 'absolute',\n        background: 'rgba(255, 0, 0, 0)',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n    box: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        border: `1px solid ${palette.themePrimary}`,\n        pointerEvents: 'none',\n        zIndex: 10,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Highlight',\n          },\n        },\n      },\n    ],\n    boxFill: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        backgroundColor: palette.themePrimary,\n        opacity: 0.1,\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MarqueeSelectionBase } from './MarqueeSelection.base';\nimport { getStyles } from './MarqueeSelection.styles';\nimport type {\n  IMarqueeSelectionProps,\n  IMarqueeSelectionStyleProps,\n  IMarqueeSelectionStyles,\n} from './MarqueeSelection.types';\n\nexport const MarqueeSelection: React.FunctionComponent<IMarqueeSelectionProps> =\n  // TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit\n  // with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not\n  // in IMarqueeSelectionProps.\n  styled<IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>(\n    MarqueeSelectionBase,\n    getStyles,\n    undefined,\n    {\n      scope: 'MarqueeSelection',\n    },\n  );\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","import type { IRectangle } from '../IRectangle';\n\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as { getBoundingClientRect?: unknown }).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n","import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\nimport type { IObjectWithKey, ISelection } from './Selection.types';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  onItemsChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count!: number;\n  public readonly mode!: SelectionMode;\n\n  private _getKey!: (item: TItem, index?: number) => string | number;\n  private _canSelectItem!: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items!: TItem[];\n  private _selectedItems!: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected!: boolean;\n  private _exemptedIndices!: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap!: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _onItemsChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const {\n      onSelectionChanged,\n      onItemsChanged,\n      getKey,\n      canSelectItem = () => true,\n      items,\n      selectionMode = SelectionMode.multiple,\n    } = options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    let haveItemsChanged = false;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (const key of Object.keys(this._keyToIndexMap)) {\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public getItemIndex(key: string): number {\n    const index = this._keyToIndexMap[key];\n\n    return index ?? -1;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public setRangeSelected(fromIndex: number, count: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    fromIndex = Math.min(Math.max(0, fromIndex), this._items.length - 1);\n\n    // Clamp the range.\n    count = Math.min(Math.max(0, count), this._items.length - fromIndex);\n\n    // No-op on out of bounds selections.\n    if (fromIndex < 0 || fromIndex >= this._items.length || count === 0) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = fromIndex;\n    const endIndex = fromIndex + count - 1;\n\n    const newAnchorIndex = anchorIndex >= endIndex ? startIndex : endIndex;\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, isSelected, shouldAnchor ? startIndex === newAnchorIndex : false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToRange(fromIndex: number, count: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      if (count === 1) {\n        this.setIndexSelected(fromIndex, true, true);\n      }\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(fromIndex, anchorIndex);\n    const endIndex = Math.max(fromIndex + count - 1, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n","/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\nexport const SELECTION_ITEMS_CHANGE = 'items-change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Item utility methods.\n  getItemIndex?(key: string): number;\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n  setRangeSelected?(fromIndex: number, count: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n  selectToRange?(index: number, count: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[878],{\n\n/***/ 8126:\n/***/ (function(module) {\n\nvar __dirname = \"/\";\n(function(){\"use strict\";var e={114:function(e){function assertPath(e){if(typeof e!==\"string\"){throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}}function normalizeStringPosix(e,r){var t=\"\";var i=0;var n=-1;var a=0;var f;for(var l=0;l<=e.length;++l){if(l<e.length)f=e.charCodeAt(l);else if(f===47)break;else f=47;if(f===47){if(n===l-1||a===1){}else if(n!==l-1&&a===2){if(t.length<2||i!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){var s=t.lastIndexOf(\"/\");if(s!==t.length-1){if(s===-1){t=\"\";i=0}else{t=t.slice(0,s);i=t.length-1-t.lastIndexOf(\"/\")}n=l;a=0;continue}}else if(t.length===2||t.length===1){t=\"\";i=0;n=l;a=0;continue}}if(r){if(t.length>0)t+=\"/..\";else t=\"..\";i=2}}else{if(t.length>0)t+=\"/\"+e.slice(n+1,l);else t=e.slice(n+1,l);i=l-n-1}n=l;a=0}else if(f===46&&a!==-1){++a}else{a=-1}}return t}function _format(e,r){var t=r.dir||r.root;var i=r.base||(r.name||\"\")+(r.ext||\"\");if(!t){return i}if(t===r.root){return t+i}return t+e+i}var r={resolve:function resolve(){var e=\"\";var r=false;var t;for(var i=arguments.length-1;i>=-1&&!r;i--){var n;if(i>=0)n=arguments[i];else{if(t===undefined)t=\"\";n=t}assertPath(n);if(n.length===0){continue}e=n+\"/\"+e;r=n.charCodeAt(0)===47}e=normalizeStringPosix(e,!r);if(r){if(e.length>0)return\"/\"+e;else return\"/\"}else if(e.length>0){return e}else{return\".\"}},normalize:function normalize(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0)===47;var t=e.charCodeAt(e.length-1)===47;e=normalizeStringPosix(e,!r);if(e.length===0&&!r)e=\".\";if(e.length>0&&t)e+=\"/\";if(r)return\"/\"+e;return e},isAbsolute:function isAbsolute(e){assertPath(e);return e.length>0&&e.charCodeAt(0)===47},join:function join(){if(arguments.length===0)return\".\";var e;for(var t=0;t<arguments.length;++t){var i=arguments[t];assertPath(i);if(i.length>0){if(e===undefined)e=i;else e+=\"/\"+i}}if(e===undefined)return\".\";return r.normalize(e)},relative:function relative(e,t){assertPath(e);assertPath(t);if(e===t)return\"\";e=r.resolve(e);t=r.resolve(t);if(e===t)return\"\";var i=1;for(;i<e.length;++i){if(e.charCodeAt(i)!==47)break}var n=e.length;var a=n-i;var f=1;for(;f<t.length;++f){if(t.charCodeAt(f)!==47)break}var l=t.length;var s=l-f;var o=a<s?a:s;var u=-1;var h=0;for(;h<=o;++h){if(h===o){if(s>o){if(t.charCodeAt(f+h)===47){return t.slice(f+h+1)}else if(h===0){return t.slice(f+h)}}else if(a>o){if(e.charCodeAt(i+h)===47){u=h}else if(h===0){u=0}}break}var c=e.charCodeAt(i+h);var v=t.charCodeAt(f+h);if(c!==v)break;else if(c===47)u=h}var g=\"\";for(h=i+u+1;h<=n;++h){if(h===n||e.charCodeAt(h)===47){if(g.length===0)g+=\"..\";else g+=\"/..\"}}if(g.length>0)return g+t.slice(f+u);else{f+=u;if(t.charCodeAt(f)===47)++f;return t.slice(f)}},_makeLong:function _makeLong(e){return e},dirname:function dirname(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0);var t=r===47;var i=-1;var n=true;for(var a=e.length-1;a>=1;--a){r=e.charCodeAt(a);if(r===47){if(!n){i=a;break}}else{n=false}}if(i===-1)return t?\"/\":\".\";if(t&&i===1)return\"//\";return e.slice(0,i)},basename:function basename(e,r){if(r!==undefined&&typeof r!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(e);var t=0;var i=-1;var n=true;var a;if(r!==undefined&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var f=r.length-1;var l=-1;for(a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(s===47){if(!n){t=a+1;break}}else{if(l===-1){n=false;l=a+1}if(f>=0){if(s===r.charCodeAt(f)){if(--f===-1){i=a}}else{f=-1;i=l}}}}if(t===i)i=l;else if(i===-1)i=e.length;return e.slice(t,i)}else{for(a=e.length-1;a>=0;--a){if(e.charCodeAt(a)===47){if(!n){t=a+1;break}}else if(i===-1){n=false;i=a+1}}if(i===-1)return\"\";return e.slice(t,i)}},extname:function extname(e){assertPath(e);var r=-1;var t=0;var i=-1;var n=true;var a=0;for(var f=e.length-1;f>=0;--f){var l=e.charCodeAt(f);if(l===47){if(!n){t=f+1;break}continue}if(i===-1){n=false;i=f+1}if(l===46){if(r===-1)r=f;else if(a!==1)a=1}else if(r!==-1){a=-1}}if(r===-1||i===-1||a===0||a===1&&r===i-1&&r===t+1){return\"\"}return e.slice(r,i)},format:function format(e){if(e===null||typeof e!==\"object\"){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e)}return _format(\"/\",e)},parse:function parse(e){assertPath(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return r;var t=e.charCodeAt(0);var i=t===47;var n;if(i){r.root=\"/\";n=1}else{n=0}var a=-1;var f=0;var l=-1;var s=true;var o=e.length-1;var u=0;for(;o>=n;--o){t=e.charCodeAt(o);if(t===47){if(!s){f=o+1;break}continue}if(l===-1){s=false;l=o+1}if(t===46){if(a===-1)a=o;else if(u!==1)u=1}else if(a!==-1){u=-1}}if(a===-1||l===-1||u===0||u===1&&a===l-1&&a===f+1){if(l!==-1){if(f===0&&i)r.base=r.name=e.slice(1,l);else r.base=r.name=e.slice(f,l)}}else{if(f===0&&i){r.name=e.slice(1,a);r.base=e.slice(1,l)}else{r.name=e.slice(f,a);r.base=e.slice(f,l)}r.ext=e.slice(a,l)}if(f>0)r.dir=e.slice(0,f-1);else if(i)r.dir=\"/\";return r},sep:\"/\",delimiter:\":\",win32:null,posix:null};r.posix=r;e.exports=r}};var r={};function __nccwpck_require__(t){var i=r[t];if(i!==undefined){return i.exports}var n=r[t]={exports:{}};var a=true;try{e[t](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(114);module.exports=t})();\n\n/***/ }),\n\n/***/ 5593:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"I\": function() { return /* binding */ FileIconType; }\n/* harmony export */ });\n/**\n * Enumerates special file type icons that do not map to any file extensions.\n * For example, the 'pptx' icon maps to the extensions 'ppt', 'pptm', 'pptx',\n * but the 'folder' icon does not map to any extensions and should be obtained\n * via this enum.\n */\nvar FileIconType;\n(function (FileIconType) {\n    FileIconType[FileIconType[\"docset\"] = 1] = \"docset\";\n    FileIconType[FileIconType[\"folder\"] = 2] = \"folder\";\n    FileIconType[FileIconType[\"genericFile\"] = 3] = \"genericFile\";\n    FileIconType[FileIconType[\"listItem\"] = 4] = \"listItem\";\n    FileIconType[FileIconType[\"sharedFolder\"] = 5] = \"sharedFolder\";\n    FileIconType[FileIconType[\"multiple\"] = 6] = \"multiple\";\n    FileIconType[FileIconType[\"stream\"] = 7] = \"stream\";\n    FileIconType[FileIconType[\"news\"] = 8] = \"news\";\n    FileIconType[FileIconType[\"desktopFolder\"] = 9] = \"desktopFolder\";\n    FileIconType[FileIconType[\"documentsFolder\"] = 10] = \"documentsFolder\";\n    FileIconType[FileIconType[\"picturesFolder\"] = 11] = \"picturesFolder\";\n    FileIconType[FileIconType[\"linkedFolder\"] = 12] = \"linkedFolder\";\n    FileIconType[FileIconType[\"list\"] = 13] = \"list\";\n    FileIconType[FileIconType[\"form\"] = 14] = \"form\";\n    FileIconType[FileIconType[\"sway\"] = 15] = \"sway\";\n    FileIconType[FileIconType[\"playlist\"] = 16] = \"playlist\";\n})(FileIconType || (FileIconType = {}));\n\n\n/***/ }),\n\n/***/ 8345:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": function() { return /* binding */ FileTypeIconMap; }\n/* harmony export */ });\n/**\n * Enumeration of icon file names, and what extensions they map to.\n * Please keep items alphabetical. Items without extensions may require specific logic in the code to map.\n * Always use getFileTypeIconProps to get the most up-to-date icon at the right pixel density.\n */\nvar FileTypeIconMap = {\n    accdb: {\n        extensions: ['accdb', 'mdb'],\n    },\n    archive: {\n        extensions: ['7z', 'ace', 'arc', 'arj', 'dmg', 'gz', 'iso', 'lzh', 'pkg', 'rar', 'sit', 'tgz', 'tar', 'z'],\n    },\n    audio: {\n        extensions: [\n            'aif',\n            'aiff',\n            'aac',\n            'alac',\n            'amr',\n            'ape',\n            'au',\n            'awb',\n            'dct',\n            'dss',\n            'dvf',\n            'flac',\n            'gsm',\n            'm4a',\n            'm4p',\n            'mid',\n            'mmf',\n            'mp3',\n            'oga',\n            'ra',\n            'rm',\n            'wav',\n            'wma',\n            'wv',\n        ],\n    },\n    calendar: {\n        extensions: ['ical', 'icalendar', 'ics', 'ifb', 'vcs'],\n    },\n    classifier: {\n        extensions: ['classifier'],\n    },\n    code: {\n        extensions: [\n            'abap',\n            'ada',\n            'adp',\n            'ahk',\n            'as',\n            'as3',\n            'asc',\n            'ascx',\n            'asm',\n            'asp',\n            'awk',\n            'bash',\n            'bash_login',\n            'bash_logout',\n            'bash_profile',\n            'bashrc',\n            'bat',\n            'bib',\n            'bsh',\n            'build',\n            'builder',\n            'c',\n            'cbl',\n            'c++',\n            'capfile',\n            'cc',\n            'cfc',\n            'cfm',\n            'cfml',\n            'cl',\n            'clj',\n            'cls',\n            'cmake',\n            'cmd',\n            'coffee',\n            'config',\n            'cpp',\n            'cpt',\n            'cpy',\n            'cs',\n            'cshtml',\n            'cson',\n            'csproj',\n            'css',\n            'ctp',\n            'cxx',\n            'd',\n            'ddl',\n            'di',\n            'disco',\n            'dml',\n            'dtd',\n            'dtml',\n            'el',\n            'emakefile',\n            'erb',\n            'erl',\n            'f',\n            'f90',\n            'f95',\n            'fs',\n            'fsi',\n            'fsscript',\n            'fsx',\n            'gemfile',\n            'gemspec',\n            'gitconfig',\n            'go',\n            'groovy',\n            'gvy',\n            'h',\n            'h++',\n            'haml',\n            'handlebars',\n            'hbs',\n            'hcp',\n            'hh',\n            'hpp',\n            'hrl',\n            'hs',\n            'htc',\n            'hxx',\n            'idl',\n            'iim',\n            'inc',\n            'inf',\n            'ini',\n            'inl',\n            'ipp',\n            'irbrc',\n            'jade',\n            'jav',\n            'java',\n            'js',\n            'json',\n            'jsp',\n            'jsproj',\n            'jsx',\n            'l',\n            'less',\n            'lhs',\n            'lisp',\n            'log',\n            'lst',\n            'ltx',\n            'lua',\n            'm',\n            'mak',\n            'make',\n            'manifest',\n            'master',\n            'md',\n            'markdn',\n            'markdown',\n            'mdown',\n            'mkdn',\n            'ml',\n            'mli',\n            'mll',\n            'mly',\n            'mm',\n            'mud',\n            'nfo',\n            'opml',\n            'osascript',\n            'p',\n            'pas',\n            'patch',\n            'php',\n            'php2',\n            'php3',\n            'php4',\n            'php5',\n            'phtml',\n            'pl',\n            'pm',\n            'pod',\n            'pp',\n            'profile',\n            'ps1',\n            'ps1xml',\n            'psd1',\n            'psm1',\n            'pss',\n            'pt',\n            'py',\n            'pyw',\n            'r',\n            'rake',\n            'rb',\n            'rbx',\n            'rc',\n            'rdf',\n            're',\n            'reg',\n            'rest',\n            'resw',\n            'resx',\n            'rhtml',\n            'rjs',\n            'rprofile',\n            'rpy',\n            'rss',\n            'rst',\n            'ruby',\n            'rxml',\n            's',\n            'sass',\n            'scala',\n            'scm',\n            'sconscript',\n            'sconstruct',\n            'script',\n            'scss',\n            'sgml',\n            'sh',\n            'shtml',\n            'sml',\n            'svn-base',\n            'swift',\n            'sql',\n            'sty',\n            'tcl',\n            'tex',\n            'textile',\n            'tld',\n            'tli',\n            'tmpl',\n            'tpl',\n            'vb',\n            'vi',\n            'vim',\n            'vmg',\n            'webpart',\n            'wsp',\n            'wsdl',\n            'xhtml',\n            'xoml',\n            'xsd',\n            'xslt',\n            'yaml',\n            'yaws',\n            'yml',\n            'zsh',\n        ],\n    },\n    contact: {\n        extensions: ['vcf'],\n    },\n    /*  css: {},  not broken out yet, snapping to 'code' for now */\n    csv: {\n        extensions: ['csv'],\n    },\n    desktopfolder: {},\n    docset: {},\n    documentsfolder: {},\n    docx: {\n        extensions: ['doc', 'docm', 'docx', 'docb'],\n    },\n    dotx: {\n        extensions: ['dot', 'dotm', 'dotx'],\n    },\n    email: {\n        extensions: ['eml', 'msg', 'oft', 'ost', 'pst'],\n    },\n    exe: {\n        extensions: ['application', 'appref-ms', 'apk', 'app', 'appx', 'exe', 'ipa', 'msi', 'xap'],\n    },\n    favoritesfolder: {},\n    folder: {},\n    font: {\n        extensions: ['ttf', 'otf', 'woff'],\n    },\n    form: {},\n    genericfile: {},\n    html: {\n        extensions: ['htm', 'html', 'mht'],\n    },\n    ipynb: {\n        extensions: ['nnb', 'ipynb'],\n    },\n    link: {\n        extensions: ['lnk', 'link', 'url', 'website', 'webloc'],\n    },\n    linkedfolder: {},\n    listitem: {},\n    loop: {\n        extensions: ['fluid', 'loop'],\n    },\n    officescript: {\n        extensions: ['osts'],\n    },\n    splist: {},\n    model: {\n        extensions: [\n            '3ds',\n            '3mf',\n            'blend',\n            'cool',\n            'dae',\n            'df',\n            'dwfx',\n            'dwg',\n            'dxf',\n            'fbx',\n            'glb',\n            'gltf',\n            'holo',\n            'layer',\n            'layout',\n            'max',\n            'mcworld',\n            'mtl',\n            'obj',\n            'off',\n            'ply',\n            'skp',\n            'stp',\n            'stl',\n            't',\n            'thl',\n            'x',\n        ],\n    },\n    mpp: {\n        extensions: ['mpp'],\n    },\n    mpt: {\n        extensions: ['mpt'],\n    },\n    multiple: {},\n    one: {\n        // This represents a single Fluid Note, or a partial exported section/page of a notebook.\n        extensions: ['note', 'one'],\n    },\n    onetoc: {\n        extensions: ['ms-one-stub', 'onetoc', 'onetoc2', 'onepkg'], // This represents a complete, logical notebook.\n    },\n    pbiapp: {},\n    pdf: {\n        extensions: ['pdf'],\n    },\n    photo: {\n        extensions: [\n            'arw',\n            'bmp',\n            'cr2',\n            'crw',\n            'dic',\n            'dicm',\n            'dcm',\n            'dcm30',\n            'dcr',\n            'dds',\n            'dib',\n            'dng',\n            'erf',\n            'gif',\n            'heic',\n            'heif',\n            'ico',\n            'jfi',\n            'jfif',\n            'jif',\n            'jpe',\n            'jpeg',\n            'jpg',\n            'jxr',\n            'kdc',\n            'mrw',\n            'nef',\n            'orf',\n            'pct',\n            'pict',\n            'png',\n            'pns',\n            'psb',\n            'psd',\n            'raw',\n            'tga',\n            'tif',\n            'tiff',\n            'wdp',\n        ],\n    },\n    photo360: {},\n    picturesfolder: {},\n    potx: {\n        extensions: ['pot', 'potm', 'potx'],\n    },\n    powerbi: {\n        extensions: ['pbids', 'pbix'],\n    },\n    ppsx: {\n        extensions: ['pps', 'ppsm', 'ppsx'],\n    },\n    pptx: {\n        extensions: ['ppt', 'pptm', 'pptx', 'sldx', 'sldm'],\n    },\n    presentation: {\n        extensions: ['odp', 'gslides', 'key'],\n    },\n    pub: {\n        extensions: ['pub'],\n    },\n    spo: {\n        extensions: ['aspx'],\n    },\n    sponews: {},\n    spreadsheet: {\n        extensions: ['odc', 'ods', 'gsheet', 'numbers', 'tsv'],\n    },\n    rtf: {\n        extensions: ['epub', 'gdoc', 'odt', 'rtf', 'wri', 'pages'],\n    },\n    sharedfolder: {},\n    playlist: {},\n    sway: {},\n    sysfile: {\n        extensions: [\n            'bak',\n            'bin',\n            'cab',\n            'cache',\n            'cat',\n            'cer',\n            'class',\n            'dat',\n            'db',\n            'dbg',\n            'dl_',\n            'dll',\n            'ithmb',\n            'jar',\n            'kb',\n            'ldt',\n            'lrprev',\n            'pkpass',\n            'ppa',\n            'ppam',\n            'pdb',\n            'rom',\n            'thm',\n            'thmx',\n            'vsl',\n            'xla',\n            'xlam',\n            'xlb',\n            'xll',\n        ],\n    },\n    txt: {\n        extensions: ['dif', 'diff', 'readme', 'out', 'plist', 'properties', 'text', 'txt'],\n    },\n    vaultclosed: {},\n    vaultopen: {},\n    vector: {\n        extensions: [\n            'ai',\n            'ait',\n            'cvs',\n            'dgn',\n            'gdraw',\n            'pd',\n            'emf',\n            'eps',\n            'fig',\n            'ind',\n            'indd',\n            'indl',\n            'indt',\n            'indb',\n            'ps',\n            'svg',\n            'svgz',\n            'wmf',\n            'oxps',\n            'xps',\n            'xd',\n            'sketch',\n        ],\n    },\n    video: {\n        extensions: [\n            '3g2',\n            '3gp',\n            '3gp2',\n            '3gpp',\n            'asf',\n            'avi',\n            'dvr-ms',\n            'flv',\n            'm1v',\n            'm4v',\n            'mkv',\n            'mod',\n            'mov',\n            'mm4p',\n            'mp2',\n            'mp2v',\n            'mp4',\n            'mp4v',\n            'mpa',\n            'mpe',\n            'mpeg',\n            'mpg',\n            'mpv',\n            'mpv2',\n            'mts',\n            'ogg',\n            'qt',\n            'swf',\n            'ts',\n            'vob',\n            'webm',\n            'wlmp',\n            'wm',\n            'wmv',\n            'wmx',\n        ],\n    },\n    video360: {},\n    vsdx: {\n        extensions: ['vdx', 'vsd', 'vsdm', 'vsdx', 'vsw', 'vdw'],\n    },\n    vssx: {\n        extensions: ['vss', 'vssm', 'vssx'],\n    },\n    vstx: {\n        extensions: ['vst', 'vstm', 'vstx', 'vsx'],\n    },\n    whiteboard: {\n        extensions: ['whiteboard', 'wbtx'],\n    },\n    xlsx: {\n        extensions: ['xlc', 'xls', 'xlsb', 'xlsm', 'xlsx', 'xlw'],\n    },\n    xltx: {\n        extensions: ['xlt', 'xltm', 'xltx'],\n    },\n    xml: {\n        extensions: ['xaml', 'xml', 'xsl'],\n    },\n    xsn: {\n        extensions: ['xsn'],\n    },\n    zip: {\n        extensions: ['zip'],\n    },\n};\n\n\n/***/ }),\n\n/***/ 7232:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EX\": function() { return /* binding */ getFileTypeIconProps; }\n/* harmony export */ });\n/* unused harmony exports DEFAULT_ICON_SIZE, getFileTypeIconNameFromExtensionOrType, getFileTypeIconSuffix */\n/* harmony import */ var _FileTypeIconMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8345);\n/* harmony import */ var _FileIconType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5593);\n\n\nvar _extensionToIconName;\nvar GENERIC_FILE = 'genericfile';\nvar FOLDER = 'folder';\nvar SHARED_FOLDER = 'sharedfolder';\nvar DOCSET_FOLDER = 'docset';\nvar LIST_ITEM = 'listitem';\nvar LIST = 'splist';\nvar MULTIPLE_ITEMS = 'multiple';\nvar NEWS = 'sponews';\nvar STREAM = 'video';\nvar DESKTOP_FOLDER = 'desktopfolder';\nvar DOCUMENTS_FOLDER = 'documentfolder';\nvar PICTURES_FOLDER = 'picturesfolder';\nvar LINKED_FOLDER = 'linkedfolder';\nvar FORM = 'form';\nvar SWAY = 'sway';\nvar PLAYLIST = 'playlist';\nvar DEFAULT_ICON_SIZE = 16;\n/**\n * This function returns properties for a file type icon given the IFileTypeIconOptions.\n * It accounts for different device pixel ratios. For example,\n * `getFileTypeIconProps({ extension: 'doc', size: 16, imageFileType: 'png' })`\n * will return `{ iconName: 'docx16_2x_png' }` if the `devicePixelRatio` is 2.\n * @param options\n */\nfunction getFileTypeIconProps(options) {\n    // First, obtain the base name of the icon using the extension or type.\n    var iconBaseName;\n    var extension = options.extension, type = options.type, size = options.size, imageFileType = options.imageFileType;\n    iconBaseName = getFileTypeIconNameFromExtensionOrType(extension, type);\n    // Next, obtain the suffix using the icon size, user's device pixel ration, and\n    // preference for svg or png\n    var _size = size || DEFAULT_ICON_SIZE;\n    var suffix = getFileTypeIconSuffix(_size, imageFileType);\n    return { iconName: iconBaseName + suffix, 'aria-label': extension };\n}\nfunction getFileTypeIconNameFromExtensionOrType(extension, type) {\n    var iconBaseName;\n    if (extension) {\n        if (!_extensionToIconName) {\n            _extensionToIconName = {};\n            for (var iconName in _FileTypeIconMap__WEBPACK_IMPORTED_MODULE_0__/* .FileTypeIconMap */ .$) {\n                if (_FileTypeIconMap__WEBPACK_IMPORTED_MODULE_0__/* .FileTypeIconMap.hasOwnProperty */ .$.hasOwnProperty(iconName)) {\n                    var extensions = _FileTypeIconMap__WEBPACK_IMPORTED_MODULE_0__/* .FileTypeIconMap */ .$[iconName].extensions;\n                    if (extensions) {\n                        for (var i = 0; i < extensions.length; i++) {\n                            _extensionToIconName[extensions[i]] = iconName;\n                        }\n                    }\n                }\n            }\n        }\n        // Strip periods, force lowercase.\n        extension = extension.replace('.', '').toLowerCase();\n        return _extensionToIconName[extension] || GENERIC_FILE;\n    }\n    else if (type) {\n        switch (type) {\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.docset */ .I.docset:\n                iconBaseName = DOCSET_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.folder */ .I.folder:\n                iconBaseName = FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.listItem */ .I.listItem:\n                iconBaseName = LIST_ITEM;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.sharedFolder */ .I.sharedFolder:\n                iconBaseName = SHARED_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.stream */ .I.stream:\n                iconBaseName = STREAM;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.multiple */ .I.multiple:\n                iconBaseName = MULTIPLE_ITEMS;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.news */ .I.news:\n                iconBaseName = NEWS;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.desktopFolder */ .I.desktopFolder:\n                iconBaseName = DESKTOP_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.documentsFolder */ .I.documentsFolder:\n                iconBaseName = DOCUMENTS_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.picturesFolder */ .I.picturesFolder:\n                iconBaseName = PICTURES_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.linkedFolder */ .I.linkedFolder:\n                iconBaseName = LINKED_FOLDER;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.list */ .I.list:\n                iconBaseName = LIST;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.form */ .I.form:\n                iconBaseName = FORM;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.sway */ .I.sway:\n                iconBaseName = SWAY;\n                break;\n            case _FileIconType__WEBPACK_IMPORTED_MODULE_1__/* .FileIconType.playlist */ .I.playlist:\n                iconBaseName = PLAYLIST;\n                break;\n        }\n    }\n    return iconBaseName || GENERIC_FILE;\n}\nfunction getFileTypeIconSuffix(size, imageFileType) {\n    if (imageFileType === void 0) { imageFileType = 'svg'; }\n    var devicePixelRatio = window.devicePixelRatio;\n    var devicePixelRatioSuffix = ''; // Default is 1x\n    // SVGs scale well, so you can generally use the default image.\n    // 1.5x is a special case where SVGs need a different image.\n    if (imageFileType === 'svg' && devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n        // Currently missing 1.5x SVGs at size 20, snap to 1x for now\n        if (size !== 20) {\n            devicePixelRatioSuffix = '_1.5x';\n        }\n    }\n    else if (imageFileType === 'png') {\n        // To look good, PNGs should use a different image for higher device pixel ratios\n        if (devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n            // Currently missing 1.5x icons for size 20, snap to 2x for now\n            devicePixelRatioSuffix = size === 20 ? '_2x' : '_1.5x';\n        }\n        else if (devicePixelRatio > 1.5 && devicePixelRatio <= 2) {\n            devicePixelRatioSuffix = '_2x';\n        }\n        else if (devicePixelRatio > 2 && devicePixelRatio <= 3) {\n            devicePixelRatioSuffix = '_3x';\n        }\n        else if (devicePixelRatio > 3) {\n            devicePixelRatioSuffix = '_4x';\n        }\n    }\n    return size + devicePixelRatioSuffix + '_' + imageFileType;\n}\n\n\n/***/ }),\n\n/***/ 4906:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mg\": function() { return /* binding */ initializeFileTypeIcons; }\n/* harmony export */ });\n/* unused harmony exports DEFAULT_BASE_URL, ICON_SIZES */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3370);\n/* harmony import */ var _fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3349);\n/* harmony import */ var _FileTypeIconMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8345);\n\n\n\nvar PNG_SUFFIX = '_png';\nvar SVG_SUFFIX = '_svg';\nvar DEFAULT_BASE_URL = 'https://spoppe-b.azureedge.net/files/fabric-cdn-prod_20221015.001/assets/item-types/';\nvar ICON_SIZES = [16, 20, 24, 32, 40, 48, 64, 96];\nfunction initializeFileTypeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = DEFAULT_BASE_URL; }\n    ICON_SIZES.forEach(function (size) {\n        _initializeIcons(baseUrl, size, options);\n    });\n}\nfunction _initializeIcons(baseUrl, size, options) {\n    var iconTypes = Object.keys(_FileTypeIconMap__WEBPACK_IMPORTED_MODULE_2__/* .FileTypeIconMap */ .$);\n    var fileTypeIcons = {};\n    iconTypes.forEach(function (type) {\n        var baseUrlSizeType = baseUrl + size + '/' + type;\n        fileTypeIcons[type + size + PNG_SUFFIX] = react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrlSizeType + '.png', alt: \"\" });\n        fileTypeIcons[type + size + SVG_SUFFIX] = react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrlSizeType + '.svg', alt: \"\" });\n        // For high resolution screens, register additional versions\n        // Apply height=100% and width=100% to force image to fit into containing element\n        // SVGs scale well, so you can generally use the default image.\n        // 1.5x is a special case where both SVGs and PNGs need a different image.\n        fileTypeIcons[type + size + '_1.5x' + PNG_SUFFIX] = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrl + size + '_1.5x/' + type + '.png', height: \"100%\", width: \"100%\", alt: \"\" }));\n        fileTypeIcons[type + size + '_1.5x' + SVG_SUFFIX] = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrl + size + '_1.5x/' + type + '.svg', height: \"100%\", width: \"100%\", alt: \"\" }));\n        fileTypeIcons[type + size + '_2x' + PNG_SUFFIX] = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrl + size + '_2x/' + type + '.png', height: \"100%\", width: \"100%\", alt: \"\" }));\n        fileTypeIcons[type + size + '_3x' + PNG_SUFFIX] = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrl + size + '_3x/' + type + '.png', height: \"100%\", width: \"100%\", alt: \"\" }));\n        fileTypeIcons[type + size + '_4x' + PNG_SUFFIX] = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: baseUrl + size + '_4x/' + type + '.png', height: \"100%\", width: \"100%\", alt: \"\" }));\n    });\n    (0,_fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__/* .registerIcons */ .fm)({\n        fontFace: {},\n        style: {\n            width: size,\n            height: size,\n            overflow: 'hidden',\n        },\n        icons: fileTypeIcons,\n        mergeImageProps: true,\n    }, options);\n}\n\n\n/***/ }),\n\n/***/ 7201:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"a\": function() { return /* binding */ Breadcrumb; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/rtl.js\nvar rtl = __webpack_require__(327);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/initializeComponentRef.js\nvar initializeComponentRef = __webpack_require__(6651);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-focus@8.8.10_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js\nvar FocusZone = __webpack_require__(711);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-focus@8.8.10_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js\nvar FocusZone_types = __webpack_require__(3788);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Link/Link.js + 2 modules\nvar Link = __webpack_require__(6857);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/Icon.js + 2 modules\nvar Icon = __webpack_require__(8415);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.js + 1 modules\nvar IconButton = __webpack_require__(1197);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/common/DirectionalHint.js\nvar DirectionalHint = __webpack_require__(1937);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/ResizeGroup/ResizeGroup.js + 2 modules\nvar ResizeGroup = __webpack_require__(7799);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Tooltip/TooltipHost.js + 7 modules\nvar TooltipHost = __webpack_require__(5169);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Tooltip/TooltipHost.types.js\nvar TooltipHost_types = __webpack_require__(7177);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js\nvar composeRenderFunction = __webpack_require__(8796);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Breadcrumb/Breadcrumb.base.js\n\n\n\n\n\n\n\n\n\n\n\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar OVERFLOW_KEY = 'overflow';\nvar nullFunction = function () { return null; };\nvar nonActionableItemProps = {\n    styles: function (props) {\n        var theme = props.theme;\n        return {\n            root: {\n                selectors: {\n                    '&.is-disabled': {\n                        color: theme.semanticColors.bodyText,\n                    },\n                },\n            },\n        };\n    },\n};\n/**\n * {@docCategory Breadcrumb}\n */\nvar BreadcrumbBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(BreadcrumbBase, _super);\n    function BreadcrumbBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._focusZone = react.createRef();\n        /**\n         * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n         */\n        _this._onReduceData = function (data) {\n            var renderedItems = data.renderedItems, renderedOverflowItems = data.renderedOverflowItems;\n            var overflowIndex = data.props.overflowIndex;\n            var movedItem = renderedItems[overflowIndex];\n            if (!movedItem) {\n                return undefined;\n            }\n            renderedItems = (0,tslib_es6/* __spreadArray */.ev)([], renderedItems);\n            renderedItems.splice(overflowIndex, 1);\n            renderedOverflowItems = (0,tslib_es6/* __spreadArray */.ev)((0,tslib_es6/* __spreadArray */.ev)([], renderedOverflowItems), [movedItem]);\n            return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, data), { renderedItems: renderedItems, renderedOverflowItems: renderedOverflowItems });\n        };\n        /**\n         * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n         * point.\n         */\n        _this._onGrowData = function (data) {\n            var renderedItems = data.renderedItems, renderedOverflowItems = data.renderedOverflowItems;\n            var _a = data.props, overflowIndex = _a.overflowIndex, maxDisplayedItems = _a.maxDisplayedItems;\n            renderedOverflowItems = (0,tslib_es6/* __spreadArray */.ev)([], renderedOverflowItems);\n            var movedItem = renderedOverflowItems.pop();\n            if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n                return undefined;\n            }\n            renderedItems = (0,tslib_es6/* __spreadArray */.ev)([], renderedItems);\n            renderedItems.splice(overflowIndex, 0, movedItem);\n            return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, data), { renderedItems: renderedItems, renderedOverflowItems: renderedOverflowItems });\n        };\n        _this._onRenderBreadcrumb = function (data) {\n            var _a = data.props, ariaLabel = _a.ariaLabel, _b = _a.dividerAs, DividerType = _b === void 0 ? Icon/* Icon */.J : _b, onRenderItem = _a.onRenderItem, overflowAriaLabel = _a.overflowAriaLabel, overflowIndex = _a.overflowIndex, onRenderOverflowIcon = _a.onRenderOverflowIcon, overflowButtonAs = _a.overflowButtonAs;\n            var renderedOverflowItems = data.renderedOverflowItems, renderedItems = data.renderedItems;\n            var contextualItems = renderedOverflowItems.map(function (item) {\n                var isActionable = !!(item.onClick || item.href);\n                return {\n                    text: item.text,\n                    name: item.text,\n                    key: item.key,\n                    onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n                    href: item.href,\n                    disabled: !isActionable,\n                    itemProps: isActionable ? undefined : nonActionableItemProps,\n                };\n            });\n            // Find index of last rendered item so the divider icon\n            // knows not to render on that item\n            var lastItemIndex = renderedItems.length - 1;\n            var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n            var itemElements = renderedItems.map(function (item, index) {\n                var finalOnRenderItem = _this._onRenderItem;\n                if (item.onRender) {\n                    finalOnRenderItem = (0,composeRenderFunction/* composeRenderFunction */.k)(item.onRender, finalOnRenderItem);\n                }\n                if (onRenderItem) {\n                    finalOnRenderItem = (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderItem, finalOnRenderItem);\n                }\n                return (react.createElement(\"li\", { className: _this._classNames.listItem, key: item.key || String(index) },\n                    finalOnRenderItem(item),\n                    (index !== lastItemIndex || (hasOverflowItems && index === overflowIndex - 1)) && (react.createElement(DividerType, { className: _this._classNames.chevron, iconName: (0,rtl/* getRTL */.zg)(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight', item: item }))));\n            });\n            if (hasOverflowItems) {\n                var iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n                var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n                var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton/* IconButton */.h;\n                itemElements.splice(overflowIndex, 0, react.createElement(\"li\", { className: _this._classNames.overflow, key: OVERFLOW_KEY },\n                    react.createElement(OverflowButton, { className: _this._classNames.overflowButton, iconProps: iconProps, role: \"button\", \"aria-haspopup\": \"true\", ariaLabel: overflowAriaLabel, onRenderMenuIcon: onRenderMenuIcon, menuProps: {\n                            items: contextualItems,\n                            directionalHint: DirectionalHint/* DirectionalHint.bottomLeftEdge */.b.bottomLeftEdge,\n                        } }),\n                    overflowIndex !== lastItemIndex + 1 && (react.createElement(DividerType, { className: _this._classNames.chevron, iconName: (0,rtl/* getRTL */.zg)(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight', item: renderedOverflowItems[renderedOverflowItems.length - 1] }))));\n            }\n            var nativeProps = (0,properties/* getNativeProps */.pq)(_this.props, properties/* htmlElementProperties */.iY, [\n                'className',\n            ]);\n            return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ className: _this._classNames.root, role: \"navigation\", \"aria-label\": ariaLabel }, nativeProps),\n                react.createElement(FocusZone/* FocusZone */.k, (0,tslib_es6/* __assign */.pi)({ componentRef: _this._focusZone, direction: FocusZone_types/* FocusZoneDirection.horizontal */.U.horizontal }, _this.props.focusZoneProps),\n                    react.createElement(\"ol\", { className: _this._classNames.list }, itemElements))));\n        };\n        _this._onRenderItem = function (item) {\n            if (!item) {\n                return null;\n            }\n            var as = item.as, href = item.href, onClick = item.onClick, isCurrentItem = item.isCurrentItem, text = item.text, onRenderContent = item.onRenderContent, additionalProps = (0,tslib_es6/* __rest */._T)(item, [\"as\", \"href\", \"onClick\", \"isCurrentItem\", \"text\", \"onRenderContent\"]);\n            var finalOnRenderContent = defaultOnRenderCrumbContent;\n            if (onRenderContent) {\n                finalOnRenderContent = (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderContent, finalOnRenderContent);\n            }\n            if (_this.props.onRenderItemContent) {\n                finalOnRenderContent = (0,composeRenderFunction/* composeRenderFunction */.k)(_this.props.onRenderItemContent, finalOnRenderContent);\n            }\n            if (onClick || href) {\n                return (react.createElement(Link/* Link */.r, (0,tslib_es6/* __assign */.pi)({}, additionalProps, { as: as, className: _this._classNames.itemLink, href: href, \"aria-current\": isCurrentItem ? 'page' : undefined, \n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick: _this._onBreadcrumbClicked.bind(_this, item) }),\n                    react.createElement(TooltipHost/* TooltipHost */.G, (0,tslib_es6/* __assign */.pi)({ content: text, overflowMode: TooltipHost_types/* TooltipOverflowMode.Parent */.y.Parent }, _this.props.tooltipHostProps), finalOnRenderContent(item))));\n            }\n            else {\n                var Tag = as || 'span';\n                return (react.createElement(Tag, (0,tslib_es6/* __assign */.pi)({}, additionalProps, { className: _this._classNames.item }),\n                    react.createElement(TooltipHost/* TooltipHost */.G, (0,tslib_es6/* __assign */.pi)({ content: text, overflowMode: TooltipHost_types/* TooltipOverflowMode.Parent */.y.Parent }, _this.props.tooltipHostProps), finalOnRenderContent(item))));\n            }\n        };\n        _this._onBreadcrumbClicked = function (item, ev) {\n            if (item.onClick) {\n                item.onClick(ev, item);\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._validateProps(props);\n        return _this;\n    }\n    /**\n     * Sets focus to the first breadcrumb link.\n     */\n    BreadcrumbBase.prototype.focus = function () {\n        if (this._focusZone.current) {\n            this._focusZone.current.focus();\n        }\n    };\n    BreadcrumbBase.prototype.render = function () {\n        this._validateProps(this.props);\n        var _a = this.props, _b = _a.onReduceData, onReduceData = _b === void 0 ? this._onReduceData : _b, _c = _a.onGrowData, onGrowData = _c === void 0 ? this._onGrowData : _c, overflowIndex = _a.overflowIndex, maxDisplayedItems = _a.maxDisplayedItems, items = _a.items, className = _a.className, theme = _a.theme, styles = _a.styles;\n        var renderedItems = (0,tslib_es6/* __spreadArray */.ev)([], items);\n        var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n        var breadcrumbData = {\n            props: this.props,\n            renderedItems: renderedItems,\n            renderedOverflowItems: renderedOverflowItems,\n        };\n        this._classNames = getClassNames(styles, {\n            className: className,\n            theme: theme,\n        });\n        return (react.createElement(ResizeGroup/* ResizeGroup */.N, { onRenderData: this._onRenderBreadcrumb, onReduceData: onReduceData, onGrowData: onGrowData, data: breadcrumbData }));\n    };\n    /**\n     * Validate incoming props\n     * @param props - Props to validate\n     */\n    BreadcrumbBase.prototype._validateProps = function (props) {\n        var maxDisplayedItems = props.maxDisplayedItems, overflowIndex = props.overflowIndex, items = props.items;\n        if (overflowIndex < 0 ||\n            (maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1) ||\n            (items.length > 0 && overflowIndex > items.length - 1)) {\n            throw new Error('Breadcrumb: overflowIndex out of range');\n        }\n    };\n    BreadcrumbBase.defaultProps = {\n        items: [],\n        maxDisplayedItems: 999,\n        overflowIndex: 0,\n    };\n    return BreadcrumbBase;\n}(react.Component));\n\nfunction defaultOnRenderCrumbContent(item) {\n    return item ? react.createElement(react.Fragment, null, item.text) : null;\n}\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/setFocusVisibility.js\nvar setFocusVisibility = __webpack_require__(4573);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Breadcrumb/Breadcrumb.styles.js\n\n\n\nvar GlobalClassNames = {\n    root: 'ms-Breadcrumb',\n    list: 'ms-Breadcrumb-list',\n    listItem: 'ms-Breadcrumb-listItem',\n    chevron: 'ms-Breadcrumb-chevron',\n    overflow: 'ms-Breadcrumb-overflow',\n    overflowButton: 'ms-Breadcrumb-overflowButton',\n    itemLink: 'ms-Breadcrumb-itemLink',\n    item: 'ms-Breadcrumb-item',\n};\nvar SingleLineTextStyle = {\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n};\nvar overflowButtonFontSize = 16;\nvar chevronSmallFontSize = 8;\nvar itemLineHeight = 36;\nvar itemFontSize = 18;\nvar MinimumScreenSelector = (0,lib/* getScreenSelector */.sK)(0, lib/* ScreenWidthMaxSmall */.mV);\nvar MediumScreenSelector = (0,lib/* getScreenSelector */.sK)(lib/* ScreenWidthMinMedium */.dd, lib/* ScreenWidthMaxMedium */.yp);\nvar getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var className = props.className, theme = props.theme;\n    var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GlobalClassNames, theme);\n    // Tokens\n    var itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n    var itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n    var itemTextColor = palette.neutralSecondary;\n    var itemTextFontWeight = lib/* FontWeights.regular */.lq.regular;\n    var itemTextHoveredOrPressedColor = palette.neutralPrimary;\n    var itemLastChildTextColor = palette.neutralPrimary;\n    var itemLastChildTextFontWeight = lib/* FontWeights.semibold */.lq.semibold;\n    var chevronButtonColor = palette.neutralSecondary;\n    var overflowButtonColor = palette.neutralSecondary;\n    var lastChildItemStyles = {\n        fontWeight: itemLastChildTextFontWeight,\n        color: itemLastChildTextColor,\n    };\n    var itemStateSelectors = {\n        ':hover': {\n            color: itemTextHoveredOrPressedColor,\n            backgroundColor: itemBackgroundHoveredColor,\n            cursor: 'pointer',\n            selectors: (_a = {},\n                _a[lib/* HighContrastSelector */.qJ] = {\n                    color: 'Highlight',\n                    backgroundColor: 'transparent',\n                },\n                _a),\n        },\n        ':active': {\n            backgroundColor: itemBackgroundPressedColor,\n            color: itemTextHoveredOrPressedColor,\n        },\n        '&:active:hover': {\n            color: itemTextHoveredOrPressedColor,\n            backgroundColor: itemBackgroundPressedColor,\n        },\n        '&:active, &:hover, &:active:hover': {\n            textDecoration: 'none',\n        },\n    };\n    var commonItemStyles = {\n        color: itemTextColor,\n        padding: '0 8px',\n        lineHeight: itemLineHeight,\n        fontSize: itemFontSize,\n        fontWeight: itemTextFontWeight,\n    };\n    var overflowButtonHighContrastFocus = {\n        left: 1,\n        right: 1,\n        top: 1,\n        bottom: 1,\n    };\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            {\n                margin: '11px 0 1px',\n            },\n            className,\n        ],\n        list: [\n            classNames.list,\n            {\n                whiteSpace: 'nowrap',\n                padding: 0,\n                margin: 0,\n                display: 'flex',\n                alignItems: 'stretch',\n            },\n        ],\n        listItem: [\n            classNames.listItem,\n            {\n                listStyleType: 'none',\n                margin: '0',\n                padding: '0',\n                display: 'flex',\n                position: 'relative',\n                alignItems: 'center',\n                selectors: {\n                    '&:last-child .ms-Breadcrumb-itemLink': (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, lastChildItemStyles), (_b = {}, _b[lib/* HighContrastSelector */.qJ] = {\n                        MsHighContrastAdjust: 'auto',\n                        forcedColorAdjust: 'auto',\n                    }, _b)),\n                    '&:last-child .ms-Breadcrumb-item': lastChildItemStyles,\n                },\n            },\n        ],\n        chevron: [\n            classNames.chevron,\n            {\n                color: chevronButtonColor,\n                fontSize: fonts.small.fontSize,\n                selectors: (_c = {},\n                    _c[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ color: 'WindowText' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _c[MediumScreenSelector] = {\n                        fontSize: chevronSmallFontSize,\n                    },\n                    _c[MinimumScreenSelector] = {\n                        fontSize: chevronSmallFontSize,\n                    },\n                    _c),\n            },\n        ],\n        overflow: [\n            classNames.overflow,\n            {\n                position: 'relative',\n                display: 'flex',\n                alignItems: 'center',\n            },\n        ],\n        overflowButton: [\n            classNames.overflowButton,\n            (0,lib/* getFocusStyle */.GL)(theme, { highContrastStyle: overflowButtonHighContrastFocus }),\n            SingleLineTextStyle,\n            {\n                fontSize: overflowButtonFontSize,\n                color: overflowButtonColor,\n                height: '100%',\n                cursor: 'pointer',\n                selectors: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, itemStateSelectors), (_d = {}, _d[MinimumScreenSelector] = {\n                    padding: '4px 6px',\n                }, _d[MediumScreenSelector] = {\n                    fontSize: fonts.mediumPlus.fontSize,\n                }, _d)),\n            },\n        ],\n        itemLink: [\n            classNames.itemLink,\n            (0,lib/* getFocusStyle */.GL)(theme),\n            SingleLineTextStyle,\n            (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, commonItemStyles), { selectors: (0,tslib_es6/* __assign */.pi)((_e = { ':focus': {\n                            color: palette.neutralDark,\n                        } }, _e[\".\" + setFocusVisibility/* IsFocusVisibleClassName */.G$ + \" &:focus\"] = {\n                    outline: \"none\",\n                }, _e), itemStateSelectors) }),\n        ],\n        item: [\n            classNames.item,\n            (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, commonItemStyles), { selectors: {\n                    ':hover': {\n                        cursor: 'default',\n                    },\n                } }),\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Breadcrumb/Breadcrumb.js\n\n\n\nvar Breadcrumb = (0,styled/* styled */.z)(BreadcrumbBase, getStyles, undefined, { scope: 'Breadcrumb' });\n\n\n/***/ }),\n\n/***/ 5116:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Oh\": function() { return /* binding */ DetailsListLayoutMode; },\n/* harmony export */   \"_1\": function() { return /* binding */ ColumnActionsMode; },\n/* harmony export */   \"fQ\": function() { return /* binding */ ColumnDragEndLocation; },\n/* harmony export */   \"ov\": function() { return /* binding */ ConstrainMode; },\n/* harmony export */   \"tY\": function() { return /* binding */ CheckboxVisibility; }\n/* harmony export */ });\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nvar ColumnActionsMode;\n(function (ColumnActionsMode) {\n    /** Renders the column header as disabled. */\n    ColumnActionsMode[ColumnActionsMode[\"disabled\"] = 0] = \"disabled\";\n    /** Renders the column header as clickable. Default value. */\n    ColumnActionsMode[ColumnActionsMode[\"clickable\"] = 1] = \"clickable\";\n    /** Renders the column header as clickable and displays the dropdown chevron. */\n    ColumnActionsMode[ColumnActionsMode[\"hasDropdown\"] = 2] = \"hasDropdown\";\n})(ColumnActionsMode || (ColumnActionsMode = {}));\n/**\n * {@docCategory DetailsList}\n */\nvar ConstrainMode;\n(function (ConstrainMode) {\n    /** Lets the content grow which allows the page to manage scrolling. */\n    ConstrainMode[ConstrainMode[\"unconstrained\"] = 0] = \"unconstrained\";\n    /** Constrains the list to the given layout space. */\n    ConstrainMode[ConstrainMode[\"horizontalConstrained\"] = 1] = \"horizontalConstrained\";\n})(ConstrainMode || (ConstrainMode = {}));\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nvar ColumnDragEndLocation;\n(function (ColumnDragEndLocation) {\n    /** Drag ended outside of current list */\n    ColumnDragEndLocation[ColumnDragEndLocation[\"outside\"] = 0] = \"outside\";\n    /** Drag ended within current list */\n    ColumnDragEndLocation[ColumnDragEndLocation[\"surface\"] = 1] = \"surface\";\n    /** Drag ended on header */\n    ColumnDragEndLocation[ColumnDragEndLocation[\"header\"] = 2] = \"header\";\n})(ColumnDragEndLocation || (ColumnDragEndLocation = {}));\n/**\n * {@docCategory DetailsList}\n */\nvar DetailsListLayoutMode;\n(function (DetailsListLayoutMode) {\n    /**\n     * Lets the user resize columns and makes not attempt to fit them.\n     */\n    DetailsListLayoutMode[DetailsListLayoutMode[\"fixedColumns\"] = 0] = \"fixedColumns\";\n    /**\n     * Manages which columns are visible, tries to size them according to their min/max rules and drops\n     * off columns that can't fit and have isCollapsible set.\n     */\n    DetailsListLayoutMode[DetailsListLayoutMode[\"justified\"] = 1] = \"justified\";\n})(DetailsListLayoutMode || (DetailsListLayoutMode = {}));\n/**\n * {@docCategory DetailsList}\n */\nvar CheckboxVisibility;\n(function (CheckboxVisibility) {\n    /** Visible on hover. */\n    CheckboxVisibility[CheckboxVisibility[\"onHover\"] = 0] = \"onHover\";\n    /** Visible always. */\n    CheckboxVisibility[CheckboxVisibility[\"always\"] = 1] = \"always\";\n    /** Hide checkboxes. */\n    CheckboxVisibility[CheckboxVisibility[\"hidden\"] = 2] = \"hidden\";\n})(CheckboxVisibility || (CheckboxVisibility = {}));\n\n\n/***/ }),\n\n/***/ 6706:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"J\": function() { return /* binding */ ShimmeredDetailsList; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/css.js\nvar css = __webpack_require__(6799);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/selection/Selection.types.js\nvar Selection_types = __webpack_require__(8487);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/memoize.js\nvar memoize = __webpack_require__(9138);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/rtl.js\nvar rtl = __webpack_require__(327);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/KeyCodes.js\nvar KeyCodes = __webpack_require__(7218);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/useFocusRects.js + 1 modules\nvar useFocusRects = __webpack_require__(5723);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/initializeComponentRef.js\nvar initializeComponentRef = __webpack_require__(6651);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/Async.js\nvar Async = __webpack_require__(2598);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+dom-utilities@2.2.3/node_modules/@fluentui/dom-utilities/lib/elementContains.js\nvar elementContains = __webpack_require__(4430);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.types.js\nvar DetailsList_types = __webpack_require__(5116);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/EventGroup.js\nvar EventGroup = __webpack_require__(9720);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/getId.js\nvar getId = __webpack_require__(5561);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-focus@8.8.10_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js\nvar FocusZone = __webpack_require__(711);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-focus@8.8.10_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js\nvar FocusZone_types = __webpack_require__(3788);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/FontIcon.js\nvar FontIcon = __webpack_require__(7809);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/Icon.js + 2 modules\nvar Icon = __webpack_require__(8415);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Layer/Layer.js + 11 modules\nvar Layer = __webpack_require__(2137);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupSpacer.js\n\nvar SPACER_WIDTH = 36;\nvar GroupSpacer = function (props) {\n    var count = props.count, _a = props.indentWidth, indentWidth = _a === void 0 ? SPACER_WIDTH : _a, _b = props.role, role = _b === void 0 ? 'presentation' : _b;\n    var width = count * indentWidth;\n    return count > 0 ? (react.createElement(\"span\", { className: 'ms-GroupSpacer', style: { display: 'inline-block', width: width }, role: role })) : null;\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.types.js\n/**\n * {@docCategory GroupedList}\n */\nvar CollapseAllVisibility;\n(function (CollapseAllVisibility) {\n    CollapseAllVisibility[CollapseAllVisibility[\"hidden\"] = 0] = \"hidden\";\n    CollapseAllVisibility[CollapseAllVisibility[\"visible\"] = 1] = \"visible\";\n})(CollapseAllVisibility || (CollapseAllVisibility = {}));\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js\nvar composeRenderFunction = __webpack_require__(8796);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/getNativeElementProps.js\n\nvar nativeElementMap = {\n    label: properties/* labelProperties */.mp,\n    audio: properties/* audioProperties */.vF,\n    video: properties/* videoProperties */.NI,\n    ol: properties/* olProperties */.t$,\n    li: properties/* liProperties */.PT,\n    a: properties/* anchorProperties */.h2,\n    button: properties/* buttonProperties */.Yq,\n    input: properties/* inputProperties */.Gg,\n    textarea: properties/* textAreaProperties */.FI,\n    select: properties/* selectProperties */.bL,\n    option: properties/* optionProperties */.Qy,\n    table: properties/* tableProperties */.$B,\n    tr: properties/* trProperties */.PC,\n    th: properties/* thProperties */.fI,\n    td: properties/* tdProperties */.IX,\n    colGroup: properties/* colGroupProperties */.YG,\n    col: properties/* colProperties */.qi,\n    form: properties/* formProperties */.NX,\n    iframe: properties/* iframeProperties */.SZ,\n    img: properties/* imgProperties */.it,\n};\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getNativeElementProps(tagName, props, excludedPropNames) {\n    var allowedPropNames = (tagName && nativeElementMap[tagName]) || properties/* htmlElementProperties */.iY;\n    return (0,properties/* getNativeProps */.pq)(props, allowedPropNames, excludedPropNames);\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Check/Check.base.js\n\n\n\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar CheckBase = react.forwardRef(function (props, ref) {\n    var _a = props.checked, checked = _a === void 0 ? false : _a, className = props.className, theme = props.theme, styles = props.styles, _b = props.useFastIcons, useFastIcons = _b === void 0 ? true : _b;\n    var classNames = getClassNames(styles, { theme: theme, className: className, checked: checked });\n    var IconComponent = useFastIcons ? FontIcon/* FontIcon */.xu : Icon/* Icon */.J;\n    return (react.createElement(\"div\", { className: classNames.root, ref: ref },\n        react.createElement(IconComponent, { iconName: \"CircleRing\", className: classNames.circle }),\n        react.createElement(IconComponent, { iconName: \"StatusCircleCheckmark\", className: classNames.check })));\n});\nCheckBase.displayName = 'CheckBase';\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Check/Check.styles.js\n\n\n\nvar CheckGlobalClassNames = {\n    root: 'ms-Check',\n    circle: 'ms-Check-circle',\n    check: 'ms-Check-check',\n    /** Must be manually applied to the parent element of the check. */\n    checkHost: 'ms-Check-checkHost',\n};\nvar getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    // eslint-disable-next-line deprecation/deprecation\n    var _f = props.height, height = _f === void 0 ? props.checkBoxHeight || '18px' : _f, checked = props.checked, className = props.className, theme = props.theme;\n    var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var isRTL = (0,rtl/* getRTL */.zg)(theme);\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(CheckGlobalClassNames, theme);\n    var sharedCircleCheck = {\n        fontSize: height,\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: height,\n        height: height,\n        textAlign: 'center',\n        // inline-flex prevents the check from shifting with custom line height styles\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        verticalAlign: 'middle',\n    };\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            {\n                // lineHeight currently needs to be a string to output without 'px'\n                lineHeight: '1',\n                width: height,\n                height: height,\n                verticalAlign: 'top',\n                position: 'relative',\n                userSelect: 'none',\n                selectors: (_a = {\n                        ':before': {\n                            content: '\"\"',\n                            position: 'absolute',\n                            top: '1px',\n                            right: '1px',\n                            bottom: '1px',\n                            left: '1px',\n                            borderRadius: '50%',\n                            opacity: 1,\n                            background: semanticColors.bodyBackground,\n                        }\n                    },\n                    _a[\".\" + classNames.checkHost + \":hover &, .\" + classNames.checkHost + \":focus &, &:hover, &:focus\"] = {\n                        opacity: 1,\n                    },\n                    _a),\n            },\n            checked && [\n                'is-checked',\n                {\n                    selectors: {\n                        ':before': {\n                            background: palette.themePrimary,\n                            opacity: 1,\n                            selectors: (_b = {},\n                                _b[lib/* HighContrastSelector */.qJ] = {\n                                    background: 'Window',\n                                },\n                                _b),\n                        },\n                    },\n                },\n            ],\n            className,\n        ],\n        circle: [\n            classNames.circle,\n            sharedCircleCheck,\n            {\n                color: palette.neutralSecondary,\n                selectors: (_c = {},\n                    _c[lib/* HighContrastSelector */.qJ] = {\n                        color: 'WindowText',\n                    },\n                    _c),\n            },\n            checked && {\n                color: palette.white,\n            },\n        ],\n        check: [\n            classNames.check,\n            sharedCircleCheck,\n            {\n                opacity: 0,\n                color: palette.neutralSecondary,\n                fontSize: lib/* IconFontSizes.medium */.ld.medium,\n                left: isRTL ? '-0.5px' : '.5px',\n                top: '-1px',\n                selectors: (_d = {\n                        ':hover': {\n                            opacity: 1,\n                        }\n                    },\n                    _d[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({}, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _d),\n            },\n            checked && {\n                opacity: 1,\n                color: palette.white,\n                fontWeight: 900,\n                selectors: (_e = {},\n                    _e[lib/* HighContrastSelector */.qJ] = {\n                        border: 'none',\n                        color: 'WindowText',\n                    },\n                    _e),\n            },\n        ],\n        checkHost: classNames.checkHost,\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Check/Check.js\n\n\n\nvar Check = (0,styled/* styled */.z)(CheckBase, getStyles, undefined, {\n    scope: 'Check',\n}, true);\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/setFocusVisibility.js\nvar setFocusVisibility = __webpack_require__(4573);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Link/Link.styles.js\nvar Link_styles = __webpack_require__(2463);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.styles.js\n\n\n\n\nvar DetailsRowGlobalClassNames = {\n    root: 'ms-DetailsRow',\n    // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n    compact: 'ms-DetailsList--Compact',\n    cell: 'ms-DetailsRow-cell',\n    cellAnimation: 'ms-DetailsRow-cellAnimation',\n    cellCheck: 'ms-DetailsRow-cellCheck',\n    check: 'ms-DetailsRow-check',\n    cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n    listCellFirstChild: 'ms-List-cell:first-child',\n    isContentUnselectable: 'is-contentUnselectable',\n    isSelected: 'is-selected',\n    isCheckVisible: 'is-check-visible',\n    isRowHeader: 'is-row-header',\n    fields: 'ms-DetailsRow-fields',\n};\nvar IsFocusableSelector = \"[data-is-focusable='true']\";\nvar DEFAULT_CELL_STYLE_PROPS = {\n    cellLeftPadding: 12,\n    cellRightPadding: 8,\n    cellExtraRightPadding: 24,\n};\n// Source of default row heights to share.\nvar DEFAULT_ROW_HEIGHTS = {\n    rowHeight: 42,\n    compactRowHeight: 32,\n};\n// Constant values\nvar values = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, DEFAULT_ROW_HEIGHTS), { rowVerticalPadding: 11, compactRowVerticalPadding: 6 });\nvar getDetailsRowStyles = function (props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    var theme = props.theme, isSelected = props.isSelected, canSelect = props.canSelect, droppingClassName = props.droppingClassName, anySelected = props.anySelected, isCheckVisible = props.isCheckVisible, checkboxCellClassName = props.checkboxCellClassName, compact = props.compact, className = props.className, _q = props.cellStyleProps, cellStyleProps = _q === void 0 ? DEFAULT_CELL_STYLE_PROPS : _q, enableUpdateAnimations = props.enableUpdateAnimations, disabled = props.disabled;\n    var palette = theme.palette, fonts = theme.fonts;\n    var neutralPrimary = palette.neutralPrimary, white = palette.white, neutralSecondary = palette.neutralSecondary, neutralLighter = palette.neutralLighter, neutralLight = palette.neutralLight, neutralDark = palette.neutralDark, neutralQuaternaryAlt = palette.neutralQuaternaryAlt;\n    var _r = theme.semanticColors, focusBorder = _r.focusBorder, focusedLinkColor = _r.linkHovered;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(DetailsRowGlobalClassNames, theme);\n    var colors = {\n        // Default\n        defaultHeaderText: neutralPrimary,\n        defaultMetaText: neutralSecondary,\n        defaultBackground: white,\n        // Default Hover\n        defaultHoverHeaderText: neutralDark,\n        defaultHoverMetaText: neutralPrimary,\n        defaultHoverBackground: neutralLighter,\n        // Selected\n        selectedHeaderText: neutralDark,\n        selectedMetaText: neutralPrimary,\n        selectedBackground: neutralLight,\n        // Selected Hover\n        selectedHoverHeaderText: neutralDark,\n        selectedHoverMetaText: neutralPrimary,\n        selectedHoverBackground: neutralQuaternaryAlt,\n        // Focus\n        focusHeaderText: neutralDark,\n        focusMetaText: neutralPrimary,\n        focusBackground: neutralLight,\n        focusHoverBackground: neutralQuaternaryAlt,\n    };\n    var rowHighContrastFocus = {\n        top: 2,\n        right: 2,\n        bottom: 2,\n        left: 2,\n    };\n    // Selected row styles\n    var selectedStyles = [\n        (0,lib/* getFocusStyle */.GL)(theme, {\n            inset: -1,\n            borderColor: focusBorder,\n            outlineColor: white,\n            highContrastStyle: rowHighContrastFocus,\n        }),\n        classNames.isSelected,\n        {\n            color: colors.selectedMetaText,\n            background: colors.selectedBackground,\n            borderBottom: \"1px solid \" + white,\n            selectors: (_a = {\n                    '&:before': {\n                        position: 'absolute',\n                        display: 'block',\n                        top: -1,\n                        height: 1,\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        content: '',\n                        borderTop: \"1px solid \" + white,\n                    }\n                },\n                _a[\".\" + classNames.cell + \" > .\" + Link_styles/* GlobalClassNames.root */.W.root] = {\n                    color: focusedLinkColor,\n                    selectors: (_b = {},\n                        _b[lib/* HighContrastSelector */.qJ] = {\n                            color: 'HighlightText',\n                        },\n                        _b),\n                },\n                // Selected State hover\n                _a['&:hover'] = {\n                    background: colors.selectedHoverBackground,\n                    color: colors.selectedHoverMetaText,\n                    selectors: (_c = {},\n                        // Selected State hover meta cell\n                        _c[lib/* HighContrastSelector */.qJ] = {\n                            background: 'Highlight',\n                            selectors: (_d = {},\n                                _d[\".\" + classNames.cell] = {\n                                    color: 'HighlightText',\n                                },\n                                _d[\".\" + classNames.cell + \" > .\" + Link_styles/* GlobalClassNames.root */.W.root] = {\n                                    forcedColorAdjust: 'none',\n                                    color: 'HighlightText',\n                                },\n                                _d),\n                        },\n                        // Selected State hover Header cell\n                        _c[\".\" + classNames.isRowHeader] = {\n                            color: colors.selectedHoverHeaderText,\n                            selectors: (_e = {},\n                                _e[lib/* HighContrastSelector */.qJ] = {\n                                    color: 'HighlightText',\n                                },\n                                _e),\n                        },\n                        _c),\n                },\n                // Focus state\n                _a['&:focus'] = {\n                    background: colors.focusBackground,\n                    selectors: (_f = {},\n                        // Selected State hover meta cell\n                        _f[\".\" + classNames.cell] = {\n                            color: colors.focusMetaText,\n                            selectors: (_g = {},\n                                _g[lib/* HighContrastSelector */.qJ] = {\n                                    color: 'HighlightText',\n                                    selectors: {\n                                        '> a': {\n                                            color: 'HighlightText',\n                                        },\n                                    },\n                                },\n                                _g),\n                        },\n                        // Row header cell\n                        _f[\".\" + classNames.isRowHeader] = {\n                            color: colors.focusHeaderText,\n                            selectors: (_h = {},\n                                _h[lib/* HighContrastSelector */.qJ] = {\n                                    color: 'HighlightText',\n                                },\n                                _h),\n                        },\n                        // Ensure high-contrast mode overrides default focus background\n                        _f[lib/* HighContrastSelector */.qJ] = {\n                            background: 'Highlight',\n                        },\n                        _f),\n                },\n                _a[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({ background: 'Highlight', color: 'HighlightText' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()), { selectors: {\n                        a: {\n                            color: 'HighlightText',\n                        },\n                    } }),\n                // Focus and hover state\n                _a['&:focus:hover'] = {\n                    background: colors.focusHoverBackground,\n                },\n                _a),\n        },\n    ];\n    var cannotSelectStyles = [\n        classNames.isContentUnselectable,\n        {\n            userSelect: 'none',\n            cursor: 'default',\n        },\n    ];\n    var rootCompactStyles = {\n        minHeight: values.compactRowHeight,\n        border: 0,\n    };\n    var cellCompactStyles = {\n        minHeight: values.compactRowHeight,\n        paddingTop: values.compactRowVerticalPadding,\n        paddingBottom: values.compactRowVerticalPadding,\n        paddingLeft: cellStyleProps.cellLeftPadding + \"px\",\n    };\n    var defaultCellStyles = [\n        (0,lib/* getFocusStyle */.GL)(theme, { inset: -1 }),\n        classNames.cell,\n        {\n            display: 'inline-block',\n            position: 'relative',\n            boxSizing: 'border-box',\n            minHeight: values.rowHeight,\n            verticalAlign: 'top',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            paddingTop: values.rowVerticalPadding,\n            paddingBottom: values.rowVerticalPadding,\n            paddingLeft: cellStyleProps.cellLeftPadding + \"px\",\n            selectors: (_j = {\n                    '& > button': {\n                        maxWidth: '100%',\n                    }\n                },\n                _j[IsFocusableSelector] = (0,lib/* getFocusStyle */.GL)(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n                _j),\n        },\n        isSelected && {\n            selectors: (_k = {},\n                _k[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ background: 'Highlight', color: 'HighlightText' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                _k),\n        },\n        compact && cellCompactStyles,\n        disabled && { opacity: 0.5 },\n    ];\n    return {\n        root: [\n            classNames.root,\n            lib/* AnimationClassNames.fadeIn400 */.k4.fadeIn400,\n            droppingClassName,\n            theme.fonts.small,\n            isCheckVisible && classNames.isCheckVisible,\n            (0,lib/* getFocusStyle */.GL)(theme, { borderColor: focusBorder, outlineColor: white }),\n            {\n                borderBottom: \"1px solid \" + neutralLighter,\n                background: colors.defaultBackground,\n                color: colors.defaultMetaText,\n                // This ensures that the row always tries to consume is minimum width and does not compress.\n                display: 'inline-flex',\n                minWidth: '100%',\n                minHeight: values.rowHeight,\n                whiteSpace: 'nowrap',\n                padding: 0,\n                boxSizing: 'border-box',\n                verticalAlign: 'top',\n                textAlign: 'left',\n                selectors: (_l = {},\n                    _l[\".\" + classNames.listCellFirstChild + \" &:before\"] = {\n                        display: 'none',\n                    },\n                    _l['&:hover'] = {\n                        background: colors.defaultHoverBackground,\n                        color: colors.defaultHoverMetaText,\n                        selectors: (_m = {},\n                            _m[\".\" + classNames.isRowHeader] = {\n                                color: colors.defaultHoverHeaderText,\n                            },\n                            _m[\".\" + classNames.cell + \" > .\" + Link_styles/* GlobalClassNames.root */.W.root] = {\n                                color: focusedLinkColor,\n                            },\n                            _m),\n                    },\n                    _l[\"&:hover .\" + classNames.check] = {\n                        opacity: 1,\n                    },\n                    _l[\".\" + setFocusVisibility/* IsFocusVisibleClassName */.G$ + \" &:focus .\" + classNames.check] = {\n                        opacity: 1,\n                    },\n                    _l['.ms-GroupSpacer'] = {\n                        flexShrink: 0,\n                        flexGrow: 0,\n                    },\n                    _l),\n            },\n            isSelected && selectedStyles,\n            !canSelect && cannotSelectStyles,\n            compact && rootCompactStyles,\n            className,\n        ],\n        cellUnpadded: {\n            paddingRight: cellStyleProps.cellRightPadding + \"px\",\n        },\n        cellPadded: {\n            paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding + \"px\",\n            selectors: (_o = {},\n                _o[\"&.\" + classNames.cellCheck] = {\n                    paddingRight: 0,\n                },\n                _o),\n        },\n        cell: defaultCellStyles,\n        cellAnimation: enableUpdateAnimations && lib/* AnimationStyles.slideLeftIn40 */.Ic.slideLeftIn40,\n        cellMeasurer: [\n            classNames.cellMeasurer,\n            {\n                overflow: 'visible',\n                whiteSpace: 'nowrap',\n            },\n        ],\n        checkCell: [\n            defaultCellStyles,\n            classNames.cellCheck,\n            checkboxCellClassName,\n            {\n                padding: 0,\n                // Ensure that the check cell covers the top border of the cell.\n                // This ensures the click target does not leave a spot which would\n                // cause other items to be deselected.\n                paddingTop: 1,\n                marginTop: -1,\n                flexShrink: 0,\n            },\n        ],\n        checkCover: {\n            position: 'absolute',\n            top: -1,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            display: anySelected ? 'block' : 'none',\n        },\n        fields: [\n            classNames.fields,\n            {\n                display: 'flex',\n                alignItems: 'stretch',\n            },\n        ],\n        isRowHeader: [\n            classNames.isRowHeader,\n            {\n                color: colors.defaultHeaderText,\n                fontSize: fonts.medium.fontSize,\n            },\n            isSelected && {\n                color: colors.selectedHeaderText,\n                fontWeight: lib/* FontWeights.semibold */.lq.semibold,\n                selectors: (_p = {},\n                    _p[lib/* HighContrastSelector */.qJ] = {\n                        color: 'HighlightText',\n                    },\n                    _p),\n            },\n        ],\n        isMultiline: [\n            defaultCellStyles,\n            {\n                whiteSpace: 'normal',\n                wordBreak: 'break-word',\n                textOverflow: 'clip',\n            },\n        ],\n        check: [classNames.check],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.styles.js\n\n\n\n\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nvar GlobalClassNames = {\n    tooltipHost: 'ms-TooltipHost',\n    root: 'ms-DetailsHeader',\n    cell: 'ms-DetailsHeader-cell',\n    cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n    collapseButton: 'ms-DetailsHeader-collapseButton',\n    isCollapsed: 'is-collapsed',\n    isAllSelected: 'is-allSelected',\n    isSelectAllHidden: 'is-selectAllHidden',\n    isResizingColumn: 'is-resizingColumn',\n    cellSizer: 'ms-DetailsHeader-cellSizer',\n    isResizing: 'is-resizing',\n    dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n    dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n    dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n    cellTitle: 'ms-DetailsHeader-cellTitle',\n    cellName: 'ms-DetailsHeader-cellName',\n    filterChevron: 'ms-DetailsHeader-filterChevron',\n    gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n    checkTooltip: 'ms-DetailsHeader-checkTooltip',\n    check: 'ms-DetailsHeader-check',\n};\nvar HEADER_HEIGHT = 42;\nvar getCellStyles = function (props) {\n    var theme = props.theme, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n    var semanticColors = theme.semanticColors;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GlobalClassNames, theme);\n    return [\n        classNames.cell,\n        (0,lib/* getFocusStyle */.GL)(theme),\n        {\n            color: semanticColors.bodyText,\n            position: 'relative',\n            display: 'inline-block',\n            boxSizing: 'border-box',\n            padding: \"0 \" + cellStyleProps.cellRightPadding + \"px 0 \" + cellStyleProps.cellLeftPadding + \"px\",\n            lineHeight: 'inherit',\n            margin: '0',\n            height: HEADER_HEIGHT,\n            verticalAlign: 'top',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            textAlign: 'left',\n        },\n    ];\n};\nvar getDetailsHeaderStyles = function (props) {\n    var _a, _b, _c, _d;\n    var theme = props.theme, className = props.className, isAllSelected = props.isAllSelected, isResizingColumn = props.isResizingColumn, isSizing = props.isSizing, isAllCollapsed = props.isAllCollapsed, _e = props.cellStyleProps, cellStyleProps = _e === void 0 ? DEFAULT_CELL_STYLE_PROPS : _e;\n    var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GlobalClassNames, theme);\n    var colors = {\n        iconForegroundColor: semanticColors.bodySubtext,\n        headerForegroundColor: semanticColors.bodyText,\n        headerBackgroundColor: semanticColors.bodyBackground,\n        resizerColor: palette.neutralTertiaryAlt,\n    };\n    var cellSizerFadeInStyles = {\n        opacity: 1,\n        transition: 'opacity 0.3s linear',\n    };\n    var cellStyles = getCellStyles(props);\n    return {\n        root: [\n            classNames.root,\n            fonts.small,\n            {\n                display: 'inline-block',\n                background: colors.headerBackgroundColor,\n                position: 'relative',\n                minWidth: '100%',\n                verticalAlign: 'top',\n                height: HEADER_HEIGHT,\n                lineHeight: HEADER_HEIGHT,\n                whiteSpace: 'nowrap',\n                boxSizing: 'content-box',\n                paddingBottom: '1px',\n                paddingTop: '16px',\n                borderBottom: \"1px solid \" + semanticColors.bodyDivider,\n                cursor: 'default',\n                userSelect: 'none',\n                selectors: (_a = {},\n                    _a[\"&:hover .\" + classNames.check] = {\n                        opacity: 1,\n                    },\n                    _a[\"& .\" + classNames.tooltipHost + \" .\" + classNames.checkTooltip] = {\n                        display: 'block',\n                    },\n                    _a),\n            },\n            isAllSelected && classNames.isAllSelected,\n            isResizingColumn && classNames.isResizingColumn,\n            className,\n        ],\n        check: [\n            classNames.check,\n            {\n                height: HEADER_HEIGHT,\n            },\n            {\n                selectors: (_b = {},\n                    _b[\".\" + setFocusVisibility/* IsFocusVisibleClassName */.G$ + \" &:focus\"] = {\n                        opacity: 1,\n                    },\n                    _b),\n            },\n        ],\n        cellWrapperPadded: {\n            paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n        },\n        cellIsCheck: [\n            cellStyles,\n            classNames.cellIsCheck,\n            {\n                position: 'relative',\n                padding: 0,\n                margin: 0,\n                display: 'inline-flex',\n                alignItems: 'center',\n                border: 'none',\n            },\n            isAllSelected && {\n                opacity: 1,\n            },\n        ],\n        cellIsGroupExpander: [\n            cellStyles,\n            {\n                display: 'inline-flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: fonts.small.fontSize,\n                padding: 0,\n                border: 'none',\n                width: SPACER_WIDTH,\n                color: palette.neutralSecondary,\n                selectors: {\n                    ':hover': {\n                        backgroundColor: palette.neutralLighter,\n                    },\n                    ':active': {\n                        backgroundColor: palette.neutralLight,\n                    },\n                },\n            },\n        ],\n        cellIsActionable: {\n            selectors: {\n                ':hover': {\n                    color: semanticColors.bodyText,\n                    background: semanticColors.listHeaderBackgroundHovered,\n                },\n                ':active': {\n                    background: semanticColors.listHeaderBackgroundPressed,\n                },\n            },\n        },\n        cellIsEmpty: {\n            textOverflow: 'clip',\n        },\n        cellSizer: [\n            classNames.cellSizer,\n            (0,lib/* focusClear */.e2)(),\n            {\n                display: 'inline-block',\n                position: 'relative',\n                cursor: 'ew-resize',\n                bottom: 0,\n                top: 0,\n                overflow: 'hidden',\n                height: 'inherit',\n                background: 'transparent',\n                zIndex: 1,\n                width: 16,\n                selectors: (_c = {\n                        ':after': {\n                            content: '\"\"',\n                            position: 'absolute',\n                            top: 0,\n                            bottom: 0,\n                            width: 1,\n                            background: colors.resizerColor,\n                            opacity: 0,\n                            left: '50%',\n                        },\n                        ':focus:after': cellSizerFadeInStyles,\n                        ':hover:after': cellSizerFadeInStyles\n                    },\n                    _c[\"&.\" + classNames.isResizing + \":after\"] = [\n                        cellSizerFadeInStyles,\n                        {\n                            boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n                        },\n                    ],\n                    _c),\n            },\n        ],\n        cellIsResizing: classNames.isResizing,\n        cellSizerStart: {\n            margin: '0 -8px',\n        },\n        cellSizerEnd: {\n            margin: 0,\n            marginLeft: -16,\n        },\n        collapseButton: [\n            classNames.collapseButton,\n            {\n                transformOrigin: '50% 50%',\n                transition: 'transform .1s linear',\n            },\n            isAllCollapsed\n                ? [\n                    classNames.isCollapsed,\n                    {\n                        transform: 'rotate(0deg)',\n                    },\n                ]\n                : {\n                    transform: (0,rtl/* getRTL */.zg)(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n                },\n        ],\n        checkTooltip: classNames.checkTooltip,\n        sizingOverlay: isSizing && {\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            cursor: 'ew-resize',\n            background: 'rgba(255, 255, 255, 0)',\n            selectors: (_d = {},\n                _d[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ background: 'transparent' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                _d),\n        },\n        accessibleLabel: lib/* hiddenContentStyle */.ul,\n        dropHintCircleStyle: [\n            classNames.dropHintCircleStyle,\n            {\n                display: 'inline-block',\n                visibility: 'hidden',\n                position: 'absolute',\n                bottom: 0,\n                height: 9,\n                width: 9,\n                borderRadius: '50%',\n                marginLeft: -5,\n                top: 34,\n                overflow: 'visible',\n                zIndex: 10,\n                border: \"1px solid \" + palette.themePrimary,\n                background: palette.white,\n            },\n        ],\n        dropHintCaretStyle: [\n            classNames.dropHintCaretStyle,\n            {\n                display: 'none',\n                position: 'absolute',\n                top: -28,\n                left: -6.5,\n                fontSize: fonts.medium.fontSize,\n                color: palette.themePrimary,\n                overflow: 'visible',\n                zIndex: 10,\n            },\n        ],\n        dropHintLineStyle: [\n            classNames.dropHintLineStyle,\n            {\n                display: 'none',\n                position: 'absolute',\n                bottom: 0,\n                top: 0,\n                overflow: 'hidden',\n                height: 42,\n                width: 1,\n                background: palette.themePrimary,\n                zIndex: 10,\n            },\n        ],\n        dropHintStyle: {\n            display: 'inline-block',\n            position: 'absolute',\n        },\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowCheck.styles.js\n\n\n\n\nvar DetailsRowCheck_styles_GlobalClassNames = {\n    root: 'ms-DetailsRow-check',\n    isDisabled: 'ms-DetailsRow-check--isDisabled',\n    isHeader: 'ms-DetailsRow-check--isHeader',\n};\nvar CHECK_CELL_WIDTH = 48;\nvar getDetailsRowCheckStyles = function (props) {\n    var theme = props.theme, className = props.className, isHeader = props.isHeader, selected = props.selected, anySelected = props.anySelected, canSelect = props.canSelect, compact = props.compact, isVisible = props.isVisible;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(DetailsRowCheck_styles_GlobalClassNames, theme);\n    var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n    var height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n    var isCheckVisible = isVisible || selected || anySelected;\n    return {\n        root: [classNames.root, className],\n        check: [\n            !canSelect && classNames.isDisabled,\n            isHeader && classNames.isHeader,\n            (0,lib/* getFocusStyle */.GL)(theme),\n            theme.fonts.small,\n            CheckGlobalClassNames.checkHost,\n            {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                cursor: 'default',\n                boxSizing: 'border-box',\n                verticalAlign: 'top',\n                background: 'none',\n                backgroundColor: 'transparent',\n                border: 'none',\n                opacity: isCheckVisible ? 1 : 0,\n                height: height,\n                width: CHECK_CELL_WIDTH,\n                padding: 0,\n                margin: 0,\n            },\n        ],\n        isDisabled: [],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowCheck.js\n\n\n\n\n\n\nvar DetailsRowCheck_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar DetailsRowCheckBase = function (props) {\n    var _a = props.isVisible, isVisible = _a === void 0 ? false : _a, _b = props.canSelect, canSelect = _b === void 0 ? false : _b, _c = props.anySelected, anySelected = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, selectionMode = props.selectionMode, _e = props.isHeader, isHeader = _e === void 0 ? false : _e, className = props.className, checkClassName = props.checkClassName, styles = props.styles, theme = props.theme, compact = props.compact, onRenderDetailsCheckbox = props.onRenderDetailsCheckbox, _f = props.useFastIcons, useFastIcons = _f === void 0 ? true : _f, // must be removed from buttonProps\n    buttonProps = (0,tslib_es6/* __rest */._T)(props, [\"isVisible\", \"canSelect\", \"anySelected\", \"selected\", \"selectionMode\", \"isHeader\", \"className\", \"checkClassName\", \"styles\", \"theme\", \"compact\", \"onRenderDetailsCheckbox\", \"useFastIcons\"]);\n    var defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n    var onRenderCheckbox = onRenderDetailsCheckbox\n        ? (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderDetailsCheckbox, defaultCheckboxRender)\n        : defaultCheckboxRender;\n    var classNames = DetailsRowCheck_getClassNames(styles, {\n        theme: theme,\n        canSelect: canSelect,\n        selected: selected,\n        anySelected: anySelected,\n        className: className,\n        isHeader: isHeader,\n        isVisible: isVisible,\n        compact: compact,\n    });\n    var detailsCheckboxProps = {\n        checked: selected,\n        theme: theme,\n    };\n    var divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n    var checkRole = selectionMode === Selection_types/* SelectionMode.single */.oW.single ? 'radio' : 'checkbox';\n    return canSelect ? (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, buttonProps, { role: checkRole, \n        // eslint-disable-next-line deprecation/deprecation\n        className: (0,css/* css */.i)(classNames.root, classNames.check), \"aria-checked\": selected, \"data-selection-toggle\": true, \"data-automationid\": \"DetailsRowCheck\", tabIndex: -1 }), onRenderCheckbox(detailsCheckboxProps))) : (\n    // eslint-disable-next-line deprecation/deprecation\n    react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, divProps, { className: (0,css/* css */.i)(classNames.root, classNames.check) })));\n};\nvar FastCheck = react.memo(function (props) {\n    return react.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });\n});\nfunction _defaultCheckboxRender(checkboxProps) {\n    return react.createElement(Check, { checked: checkboxProps.checked });\n}\nfunction _fastDefaultCheckboxRender(checkboxProps) {\n    return react.createElement(FastCheck, { theme: checkboxProps.theme, checked: checkboxProps.checked });\n}\nvar DetailsRowCheck = (0,styled/* styled */.z)(DetailsRowCheckBase, getDetailsRowCheckStyles, undefined, { scope: 'DetailsRowCheck' }, true);\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/getDocument.js\nvar getDocument = __webpack_require__(2636);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/dragdrop/DragDropHelper.js\n\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\nvar DragDropHelper = /** @class */ (function () {\n    function DragDropHelper(params) {\n        this._selection = params.selection;\n        this._dragEnterCounts = {};\n        this._activeTargets = {};\n        this._lastId = 0;\n        // To make this class cheap to create, which allows simplifying some logic elsewhere,\n        // only initialize the event group and global event handlers as needed.\n        this._initialized = false;\n    }\n    DragDropHelper.prototype.dispose = function () {\n        if (this._events) {\n            this._events.dispose();\n        }\n    };\n    DragDropHelper.prototype.subscribe = function (root, events, dragDropOptions) {\n        var _this = this;\n        if (!this._initialized) {\n            this._events = new EventGroup/* EventGroup */.r(this);\n            var doc = (0,getDocument/* getDocument */.M)();\n            // clear drag data when mouse up, use capture event to ensure it will be run\n            if (doc) {\n                this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n                this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n            }\n            this._initialized = true;\n        }\n        var _a = dragDropOptions.key, key = _a === void 0 ? \"\" + ++this._lastId : _a;\n        var handlers = [];\n        var onDragStart;\n        var onDragLeave;\n        var onDragEnter;\n        var onDragEnd;\n        var onDrop;\n        var onDragOver;\n        var onMouseDown;\n        var isDraggable;\n        var isDroppable;\n        var activeTarget;\n        if (dragDropOptions && root) {\n            var eventMap = dragDropOptions.eventMap, context = dragDropOptions.context, updateDropState_1 = dragDropOptions.updateDropState;\n            var dragDropTarget = {\n                root: root,\n                options: dragDropOptions,\n                key: key,\n            };\n            isDraggable = this._isDraggable(dragDropTarget);\n            isDroppable = this._isDroppable(dragDropTarget);\n            if (isDraggable || isDroppable) {\n                if (eventMap) {\n                    for (var _i = 0, eventMap_1 = eventMap; _i < eventMap_1.length; _i++) {\n                        var event_1 = eventMap_1[_i];\n                        var handler = {\n                            callback: event_1.callback.bind(null, context),\n                            eventName: event_1.eventName,\n                        };\n                        handlers.push(handler);\n                        this._events.on(root, handler.eventName, handler.callback);\n                    }\n                }\n            }\n            if (isDroppable) {\n                // If the target is droppable, wire up global event listeners to track drop-related events.\n                onDragLeave = function (event) {\n                    if (!event.isHandled) {\n                        event.isHandled = true;\n                        _this._dragEnterCounts[key]--;\n                        if (_this._dragEnterCounts[key] === 0) {\n                            updateDropState_1(false /* isDropping */, event);\n                        }\n                    }\n                };\n                onDragEnter = function (event) {\n                    event.preventDefault(); // needed for IE\n                    if (!event.isHandled) {\n                        event.isHandled = true;\n                        _this._dragEnterCounts[key]++;\n                        if (_this._dragEnterCounts[key] === 1) {\n                            updateDropState_1(true /* isDropping */, event);\n                        }\n                    }\n                };\n                onDragEnd = function (event) {\n                    _this._dragEnterCounts[key] = 0;\n                    updateDropState_1(false /* isDropping */, event);\n                };\n                onDrop = function (event) {\n                    _this._dragEnterCounts[key] = 0;\n                    updateDropState_1(false /* isDropping */, event);\n                    if (dragDropOptions.onDrop) {\n                        dragDropOptions.onDrop(dragDropOptions.context.data, event);\n                    }\n                };\n                onDragOver = function (event) {\n                    event.preventDefault();\n                    if (dragDropOptions.onDragOver) {\n                        dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n                    }\n                };\n                this._dragEnterCounts[key] = 0;\n                // dragenter and dragleave will be fired when hover to the child element\n                // but we only want to change state when enter or leave the current element\n                // use the count to ensure it.\n                events.on(root, 'dragenter', onDragEnter);\n                events.on(root, 'dragleave', onDragLeave);\n                events.on(root, 'dragend', onDragEnd);\n                events.on(root, 'drop', onDrop);\n                events.on(root, 'dragover', onDragOver);\n            }\n            if (isDraggable) {\n                // If the target is draggable, wire up local event listeners for mouse events.\n                onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n                onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n                // We need to add in data so that on Firefox we show the ghost element when dragging\n                onDragStart = function (event) {\n                    var options = dragDropOptions;\n                    if (options && options.onDragStart) {\n                        options.onDragStart(options.context.data, options.context.index, _this._selection.getSelection(), event);\n                    }\n                    _this._isDragging = true;\n                    if (event.dataTransfer) {\n                        event.dataTransfer.setData('id', root.id);\n                    }\n                };\n                events.on(root, 'dragstart', onDragStart);\n                events.on(root, 'mousedown', onMouseDown);\n                events.on(root, 'dragend', onDragEnd);\n            }\n            activeTarget = {\n                target: dragDropTarget,\n                dispose: function () {\n                    if (_this._activeTargets[key] === activeTarget) {\n                        delete _this._activeTargets[key];\n                    }\n                    if (root) {\n                        for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\n                            var handler = handlers_1[_i];\n                            _this._events.off(root, handler.eventName, handler.callback);\n                        }\n                        if (isDroppable) {\n                            events.off(root, 'dragenter', onDragEnter);\n                            events.off(root, 'dragleave', onDragLeave);\n                            events.off(root, 'dragend', onDragEnd);\n                            events.off(root, 'dragover', onDragOver);\n                            events.off(root, 'drop', onDrop);\n                        }\n                        if (isDraggable) {\n                            events.off(root, 'dragstart', onDragStart);\n                            events.off(root, 'mousedown', onMouseDown);\n                            events.off(root, 'dragend', onDragEnd);\n                        }\n                    }\n                },\n            };\n            this._activeTargets[key] = activeTarget;\n        }\n        return {\n            key: key,\n            dispose: function () {\n                if (activeTarget) {\n                    activeTarget.dispose();\n                }\n            },\n        };\n    };\n    DragDropHelper.prototype.unsubscribe = function (root, key) {\n        var activeTarget = this._activeTargets[key];\n        if (activeTarget) {\n            activeTarget.dispose();\n        }\n    };\n    DragDropHelper.prototype._onDragEnd = function (target, event) {\n        var options = target.options;\n        if (options.onDragEnd) {\n            options.onDragEnd(options.context.data, event);\n        }\n    };\n    /**\n     * clear drag data when mouse up on body\n     */\n    DragDropHelper.prototype._onMouseUp = function (event) {\n        this._isDragging = false;\n        if (this._dragData) {\n            for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var activeTarget = this._activeTargets[key];\n                if (activeTarget.target.root) {\n                    this._events.off(activeTarget.target.root, 'mousemove');\n                    this._events.off(activeTarget.target.root, 'mouseleave');\n                }\n            }\n            if (this._dragData.dropTarget) {\n                // raise dragleave event to let dropTarget know it need to remove dropping style\n                EventGroup/* EventGroup.raise */.r.raise(this._dragData.dropTarget.root, 'dragleave');\n                EventGroup/* EventGroup.raise */.r.raise(this._dragData.dropTarget.root, 'drop');\n            }\n        }\n        this._dragData = null;\n    };\n    /**\n     * clear drag data when mouse up outside of the document\n     */\n    DragDropHelper.prototype._onDocumentMouseUp = function (event) {\n        var doc = (0,getDocument/* getDocument */.M)();\n        if (doc && event.target === doc.documentElement) {\n            this._onMouseUp(event);\n        }\n    };\n    /**\n     * when mouse move over a new drop target while dragging some items,\n     * fire dragleave on the old target and fire dragenter to the new target\n     * The target will handle style change on dragenter and dragleave events.\n     */\n    DragDropHelper.prototype._onMouseMove = function (target, event) {\n        var \n        // use buttons property here since ev.button in some edge case is not updating well during the move.\n        // but firefox doesn't support it, so we set the default value when it is not defined.\n        _a = event.buttons, \n        // use buttons property here since ev.button in some edge case is not updating well during the move.\n        // but firefox doesn't support it, so we set the default value when it is not defined.\n        buttons = _a === void 0 ? MOUSEMOVE_PRIMARY_BUTTON : _a;\n        if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n            // cancel mouse down event and return early when the primary button is not pressed\n            this._onMouseUp(event);\n            return;\n        }\n        var root = target.root, key = target.key;\n        if (this._isDragging) {\n            if (this._isDroppable(target)) {\n                // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n                // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n                // outer target too, and we need to prevent the outer one from taking over.\n                // So, check if the last dropTarget is not a child of the current.\n                if (this._dragData) {\n                    if (this._dragData.dropTarget &&\n                        this._dragData.dropTarget.key !== key &&\n                        !this._isChild(root, this._dragData.dropTarget.root)) {\n                        if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n                            EventGroup/* EventGroup.raise */.r.raise(this._dragData.dropTarget.root, 'dragleave');\n                            EventGroup/* EventGroup.raise */.r.raise(root, 'dragenter');\n                            this._dragData.dropTarget = target;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * when mouse leave a target while dragging some items, fire dragleave to the target\n     */\n    DragDropHelper.prototype._onMouseLeave = function (target, event) {\n        if (this._isDragging) {\n            if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n                EventGroup/* EventGroup.raise */.r.raise(target.root, 'dragleave');\n                this._dragData.dropTarget = undefined;\n            }\n        }\n    };\n    /**\n     * when mouse down on a draggable item, we start to track dragdata.\n     */\n    DragDropHelper.prototype._onMouseDown = function (target, event) {\n        if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n            // Ignore anything except the primary button.\n            return;\n        }\n        if (this._isDraggable(target)) {\n            this._dragData = {\n                clientX: event.clientX,\n                clientY: event.clientY,\n                eventTarget: event.target,\n                dragTarget: target,\n            };\n            for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var activeTarget = this._activeTargets[key];\n                if (activeTarget.target.root) {\n                    this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n                    this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n                }\n            }\n        }\n        else {\n            this._dragData = null;\n        }\n    };\n    /**\n     * determine whether the child target is a descendant of the parent\n     */\n    DragDropHelper.prototype._isChild = function (parentElement, childElement) {\n        while (childElement && childElement.parentElement) {\n            if (childElement.parentElement === parentElement) {\n                return true;\n            }\n            childElement = childElement.parentElement;\n        }\n        return false;\n    };\n    DragDropHelper.prototype._isDraggable = function (target) {\n        var options = target.options;\n        return !!(options.canDrag && options.canDrag(options.context.data));\n    };\n    DragDropHelper.prototype._isDroppable = function (target) {\n        // TODO: take the drag item into consideration to prevent dragging an item into the same group\n        var options = target.options;\n        var dragContext = this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n        return !!(options.canDrop && options.canDrop(options.context, dragContext));\n    };\n    return DragDropHelper;\n}());\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.base.js\n\n\n\n\n\n\nvar DetailsColumn_base_MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar DetailsColumn_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar TRANSITION_DURATION_DRAG = 200; // ms\nvar TRANSITION_DURATION_DROP = 1500; // ms\nvar CLASSNAME_ADD_INTERVAL = 20; // ms\nvar defaultOnRenderHeader = function (classNames) { return function (props) {\n    if (!props) {\n        return null;\n    }\n    if (props.column.isIconOnly) {\n        return react.createElement(\"span\", { className: classNames.accessibleLabel }, props.column.name);\n    }\n    return react.createElement(react.Fragment, null, props.column.name);\n}; };\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nvar DetailsColumnBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(DetailsColumnBase, _super);\n    function DetailsColumnBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._onRenderFilterIcon = function (classNames) { return function (props) {\n            var columnProps = props.columnProps, iconProps = (0,tslib_es6/* __rest */._T)(props, [\"columnProps\"]);\n            var IconComponent = (columnProps === null || columnProps === void 0 ? void 0 : columnProps.useFastIcons) ? FontIcon/* FontIcon */.xu : Icon/* Icon */.J;\n            return react.createElement(IconComponent, (0,tslib_es6/* __assign */.pi)({}, iconProps));\n        }; };\n        _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n            return react.createElement(\"span\", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);\n        };\n        _this._onColumnClick = function (ev) {\n            var _a = _this.props, onColumnClick = _a.onColumnClick, column = _a.column;\n            if (column.columnActionsMode === DetailsList_types/* ColumnActionsMode.disabled */._1.disabled) {\n                return;\n            }\n            if (column.onColumnClick) {\n                column.onColumnClick(ev, column);\n            }\n            if (onColumnClick) {\n                onColumnClick(ev, column);\n            }\n        };\n        _this._onDragStart = function (item, itemIndex, selectedItems, event) {\n            var classNames = _this._classNames;\n            if (itemIndex) {\n                _this._updateHeaderDragInfo(itemIndex);\n                _this._root.current.classList.add(classNames.borderWhileDragging);\n                _this._async.setTimeout(function () {\n                    if (_this._root.current) {\n                        _this._root.current.classList.add(classNames.noBorderWhileDragging);\n                    }\n                }, CLASSNAME_ADD_INTERVAL);\n            }\n        };\n        _this._onDragEnd = function (item, event) {\n            var classNames = _this._classNames;\n            if (event) {\n                _this._updateHeaderDragInfo(-1, event);\n            }\n            _this._root.current.classList.remove(classNames.borderWhileDragging);\n            _this._root.current.classList.remove(classNames.noBorderWhileDragging);\n        };\n        _this._updateHeaderDragInfo = function (itemIndex, event) {\n            /* eslint-disable deprecation/deprecation */\n            if (_this.props.setDraggedItemIndex) {\n                _this.props.setDraggedItemIndex(itemIndex);\n            }\n            /* eslint-enable deprecation/deprecation */\n            if (_this.props.updateDragInfo) {\n                _this.props.updateDragInfo({ itemIndex: itemIndex }, event);\n            }\n        };\n        _this._onColumnContextMenu = function (ev) {\n            var _a = _this.props, onColumnContextMenu = _a.onColumnContextMenu, column = _a.column;\n            if (column.onColumnContextMenu) {\n                column.onColumnContextMenu(column, ev);\n                ev.preventDefault();\n            }\n            if (onColumnContextMenu) {\n                onColumnContextMenu(column, ev);\n                ev.preventDefault();\n            }\n        };\n        _this._onRootMouseDown = function (ev) {\n            var isDraggable = _this.props.isDraggable;\n            // Ignore anything except the primary button.\n            if (isDraggable && ev.button === DetailsColumn_base_MOUSEDOWN_PRIMARY_BUTTON) {\n                ev.stopPropagation();\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._async = new Async/* Async */.e(_this);\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        return _this;\n    }\n    DetailsColumnBase.prototype.render = function () {\n        var _a = this.props, column = _a.column, parentId = _a.parentId, isDraggable = _a.isDraggable, styles = _a.styles, theme = _a.theme, _b = _a.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, _c = _a.useFastIcons, useFastIcons = _c === void 0 ? true : _c;\n        var _d = this.props.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;\n        this._classNames = DetailsColumn_base_getClassNames(styles, {\n            theme: theme,\n            headerClassName: column.headerClassName,\n            iconClassName: column.iconClassName,\n            isActionable: column.columnActionsMode !== DetailsList_types/* ColumnActionsMode.disabled */._1.disabled,\n            isEmpty: !column.name,\n            isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n            isPadded: column.isPadded,\n            isIconOnly: column.isIconOnly,\n            cellStyleProps: cellStyleProps,\n            transitionDurationDrag: TRANSITION_DURATION_DRAG,\n            transitionDurationDrop: TRANSITION_DURATION_DROP,\n        });\n        var classNames = this._classNames;\n        var IconComponent = useFastIcons ? FontIcon/* FontIcon */.xu : Icon/* Icon */.J;\n        var onRenderFilterIcon = column.onRenderFilterIcon\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n            : this._onRenderFilterIcon(this._classNames);\n        var onRenderHeader = column.onRenderHeader\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n            : defaultOnRenderHeader(this._classNames);\n        var hasInnerButton = column.columnActionsMode !== DetailsList_types/* ColumnActionsMode.disabled */._1.disabled &&\n            (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n        var accNameDescription = {\n            'aria-label': column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : undefined,\n            'aria-labelledby': column.ariaLabel || column.isIconOnly ? undefined : parentId + \"-\" + column.key + \"-name\",\n            'aria-describedby': !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleDescription()\n                ? parentId + \"-\" + column.key + \"-tooltip\"\n                : undefined,\n        };\n        return (react.createElement(react.Fragment, null,\n            react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ key: column.key, ref: this._root, role: 'columnheader' }, (!hasInnerButton && accNameDescription), { \"aria-sort\": column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none', \"data-is-focusable\": !hasInnerButton && column.columnActionsMode !== DetailsList_types/* ColumnActionsMode.disabled */._1.disabled ? 'true' : undefined, className: classNames.root, \"data-is-draggable\": isDraggable, draggable: isDraggable, style: {\n                    width: column.calculatedWidth +\n                        cellStyleProps.cellLeftPadding +\n                        cellStyleProps.cellRightPadding +\n                        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n                }, \"data-automationid\": 'ColumnsHeaderColumn', \"data-item-key\": column.key }),\n                isDraggable && (react.createElement(IconComponent, { iconName: \"GripperBarVertical\", className: classNames.gripperBarVerticalStyle })),\n                onRenderColumnHeaderTooltip({\n                    hostClassName: classNames.cellTooltip,\n                    id: parentId + \"-\" + column.key + \"-tooltip\",\n                    setAriaDescribedBy: false,\n                    column: column,\n                    content: column.columnActionsMode !== DetailsList_types/* ColumnActionsMode.disabled */._1.disabled ? column.ariaLabel : '',\n                    children: (react.createElement(\"span\", (0,tslib_es6/* __assign */.pi)({ id: parentId + \"-\" + column.key, className: classNames.cellTitle, \"data-is-focusable\": hasInnerButton && column.columnActionsMode !== DetailsList_types/* ColumnActionsMode.disabled */._1.disabled ? 'true' : undefined, role: hasInnerButton ? 'button' : undefined }, (hasInnerButton && accNameDescription), { onContextMenu: this._onColumnContextMenu, onClick: this._onColumnClick, \"aria-haspopup\": column.columnActionsMode === DetailsList_types/* ColumnActionsMode.hasDropdown */._1.hasDropdown ? 'menu' : undefined, \"aria-expanded\": column.columnActionsMode === DetailsList_types/* ColumnActionsMode.hasDropdown */._1.hasDropdown ? !!column.isMenuOpen : undefined }),\n                        react.createElement(\"span\", { id: parentId + \"-\" + column.key + \"-name\", className: classNames.cellName },\n                            (column.iconName || column.iconClassName) && (react.createElement(IconComponent, { className: classNames.iconClassName, iconName: column.iconName })),\n                            onRenderHeader(this.props)),\n                        column.isFiltered && react.createElement(IconComponent, { className: classNames.nearIcon, iconName: \"Filter\" }),\n                        (column.isSorted || column.showSortIconWhenUnsorted) && (react.createElement(IconComponent, { className: classNames.sortIcon, iconName: column.isSorted ? (column.isSortedDescending ? 'SortDown' : 'SortUp') : 'Sort' })),\n                        column.isGrouped && react.createElement(IconComponent, { className: classNames.nearIcon, iconName: \"GroupedDescending\" }),\n                        column.columnActionsMode === DetailsList_types/* ColumnActionsMode.hasDropdown */._1.hasDropdown &&\n                            !column.isIconOnly &&\n                            onRenderFilterIcon({\n                                'aria-hidden': true,\n                                columnProps: this.props,\n                                className: classNames.filterChevron,\n                                iconName: 'ChevronDown',\n                            }))),\n                }, this._onRenderColumnHeaderTooltip)),\n            !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null));\n    };\n    DetailsColumnBase.prototype.componentDidMount = function () {\n        var _this = this;\n        if (this.props.dragDropHelper && this.props.isDraggable) {\n            this._addDragDropHandling();\n        }\n        var classNames = this._classNames;\n        if (this.props.isDropped) {\n            if (this._root.current) {\n                this._root.current.classList.add(classNames.borderAfterDropping);\n                this._async.setTimeout(function () {\n                    if (_this._root.current) {\n                        _this._root.current.classList.add(classNames.noBorderAfterDropping);\n                    }\n                }, CLASSNAME_ADD_INTERVAL);\n            }\n            this._async.setTimeout(function () {\n                if (_this._root.current) {\n                    _this._root.current.classList.remove(classNames.borderAfterDropping);\n                    _this._root.current.classList.remove(classNames.noBorderAfterDropping);\n                }\n            }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n        }\n    };\n    DetailsColumnBase.prototype.componentWillUnmount = function () {\n        if (this._dragDropSubscription) {\n            this._dragDropSubscription.dispose();\n            delete this._dragDropSubscription;\n        }\n        this._async.dispose();\n        this._events.dispose();\n    };\n    DetailsColumnBase.prototype.componentDidUpdate = function () {\n        if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n            this._addDragDropHandling();\n        }\n        if (this._dragDropSubscription && !this.props.isDraggable) {\n            this._dragDropSubscription.dispose();\n            this._events.off(this._root.current, 'mousedown');\n            delete this._dragDropSubscription;\n        }\n    };\n    DetailsColumnBase.prototype._getColumnDragDropOptions = function () {\n        var _this = this;\n        var columnIndex = this.props.columnIndex;\n        var options = {\n            selectionIndex: columnIndex,\n            context: { data: columnIndex, index: columnIndex },\n            canDrag: function () { return _this.props.isDraggable; },\n            canDrop: function () { return false; },\n            onDragStart: this._onDragStart,\n            updateDropState: function () { return undefined; },\n            onDrop: function () { return undefined; },\n            onDragEnd: this._onDragEnd,\n        };\n        return options;\n    };\n    DetailsColumnBase.prototype._hasAccessibleDescription = function () {\n        var column = this.props.column;\n        return !!(column.filterAriaLabel ||\n            column.sortAscendingAriaLabel ||\n            column.sortDescendingAriaLabel ||\n            column.groupAriaLabel ||\n            column.sortableAriaLabel);\n    };\n    DetailsColumnBase.prototype._renderAccessibleDescription = function () {\n        var _a = this.props, column = _a.column, parentId = _a.parentId;\n        var classNames = this._classNames;\n        return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? (react.createElement(\"label\", { key: column.key + \"_label\", id: parentId + \"-\" + column.key + \"-tooltip\", className: classNames.accessibleLabel, hidden: true },\n            (column.isFiltered && column.filterAriaLabel) || null,\n            ((column.isSorted || column.showSortIconWhenUnsorted) &&\n                (column.isSorted\n                    ? column.isSortedDescending\n                        ? column.sortDescendingAriaLabel\n                        : column.sortAscendingAriaLabel\n                    : column.sortableAriaLabel)) ||\n                null,\n            (column.isGrouped && column.groupAriaLabel) || null)) : null;\n    };\n    DetailsColumnBase.prototype._addDragDropHandling = function () {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions());\n        // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n        this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n    };\n    return DetailsColumnBase;\n}(react.Component));\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.styles.js\n\n\n\n\nvar DetailsColumn_styles_GlobalClassNames = {\n    isActionable: 'is-actionable',\n    cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n    collapseButton: 'ms-DetailsHeader-collapseButton',\n    isCollapsed: 'is-collapsed',\n    isAllSelected: 'is-allSelected',\n    isSelectAllHidden: 'is-selectAllHidden',\n    isResizingColumn: 'is-resizingColumn',\n    isEmpty: 'is-empty',\n    isIconVisible: 'is-icon-visible',\n    cellSizer: 'ms-DetailsHeader-cellSizer',\n    isResizing: 'is-resizing',\n    dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n    dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n    cellTitle: 'ms-DetailsHeader-cellTitle',\n    cellName: 'ms-DetailsHeader-cellName',\n    filterChevron: 'ms-DetailsHeader-filterChevron',\n    gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n    nearIcon: 'ms-DetailsColumn-nearIcon',\n};\nvar getDetailsColumnStyles = function (props) {\n    var _a;\n    var theme = props.theme, headerClassName = props.headerClassName, iconClassName = props.iconClassName, isActionable = props.isActionable, isEmpty = props.isEmpty, isIconVisible = props.isIconVisible, isPadded = props.isPadded, isIconOnly = props.isIconOnly, _b = props.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, transitionDurationDrag = props.transitionDurationDrag, transitionDurationDrop = props.transitionDurationDrop;\n    var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(DetailsColumn_styles_GlobalClassNames, theme);\n    var colors = {\n        iconForegroundColor: semanticColors.bodySubtext,\n        headerForegroundColor: semanticColors.bodyText,\n        headerBackgroundColor: semanticColors.bodyBackground,\n        dropdownChevronForegroundColor: palette.neutralSecondary,\n        resizerColor: palette.neutralTertiaryAlt,\n    };\n    var nearIconStyle = {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n        paddingLeft: 8,\n    };\n    var borderWhileDragging = {\n        outline: \"1px solid \" + palette.themePrimary,\n    };\n    var borderAfterDragOrDrop = {\n        outlineColor: 'transparent',\n    };\n    return {\n        root: [\n            getCellStyles(props),\n            fonts.small,\n            isActionable && [\n                classNames.isActionable,\n                {\n                    selectors: {\n                        ':hover': {\n                            color: semanticColors.bodyText,\n                            background: semanticColors.listHeaderBackgroundHovered,\n                        },\n                        ':active': {\n                            background: semanticColors.listHeaderBackgroundPressed,\n                        },\n                    },\n                },\n            ],\n            isEmpty && [\n                classNames.isEmpty,\n                {\n                    textOverflow: 'clip',\n                },\n            ],\n            isIconVisible && classNames.isIconVisible,\n            isPadded && {\n                paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n            },\n            {\n                selectors: {\n                    ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n                        display: 'block',\n                    },\n                },\n            },\n            headerClassName,\n        ],\n        gripperBarVerticalStyle: {\n            display: 'none',\n            position: 'absolute',\n            textAlign: 'left',\n            color: palette.neutralTertiary,\n            left: 1,\n        },\n        nearIcon: [classNames.nearIcon, nearIconStyle],\n        sortIcon: [\n            nearIconStyle,\n            {\n                paddingLeft: 4,\n                position: 'relative',\n                top: 1,\n            },\n        ],\n        iconClassName: [\n            {\n                color: colors.iconForegroundColor,\n                opacity: 1,\n            },\n            iconClassName,\n        ],\n        filterChevron: [\n            classNames.filterChevron,\n            {\n                color: colors.dropdownChevronForegroundColor,\n                paddingLeft: 6,\n                verticalAlign: 'middle',\n                fontSize: fonts.small.fontSize,\n            },\n        ],\n        cellTitle: [\n            classNames.cellTitle,\n            (0,lib/* getFocusStyle */.GL)(theme),\n            (0,tslib_es6/* __assign */.pi)({ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'stretch', boxSizing: 'border-box', overflow: 'hidden', padding: \"0 \" + cellStyleProps.cellRightPadding + \"px 0 \" + cellStyleProps.cellLeftPadding + \"px\" }, (isIconOnly\n                ? {\n                    alignContent: 'flex-end',\n                    maxHeight: '100%',\n                    flexWrap: 'wrap-reverse',\n                }\n                : {})),\n        ],\n        cellName: [\n            classNames.cellName,\n            {\n                flex: '0 1 auto',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                fontWeight: lib/* FontWeights.semibold */.lq.semibold,\n                fontSize: fonts.medium.fontSize,\n            },\n            isIconOnly && {\n                selectors: (_a = {},\n                    _a[\".\" + classNames.nearIcon] = {\n                        paddingLeft: 0,\n                    },\n                    _a),\n            },\n        ],\n        cellTooltip: {\n            display: 'block',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        accessibleLabel: lib/* hiddenContentStyle */.ul,\n        borderWhileDragging: borderWhileDragging,\n        noBorderWhileDragging: [borderAfterDragOrDrop, { transition: \"outline \" + transitionDurationDrag + \"ms ease\" }],\n        borderAfterDropping: borderWhileDragging,\n        noBorderAfterDropping: [borderAfterDragOrDrop, { transition: \"outline  \" + transitionDurationDrop + \"ms ease\" }],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.js\n\n\n\nvar DetailsColumn = (0,styled/* styled */.z)(DetailsColumnBase, getDetailsColumnStyles, undefined, { scope: 'DetailsColumn' });\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.types.js\n/**\n * {@docCategory DetailsList}\n */\nvar SelectAllVisibility;\n(function (SelectAllVisibility) {\n    SelectAllVisibility[SelectAllVisibility[\"none\"] = 0] = \"none\";\n    SelectAllVisibility[SelectAllVisibility[\"hidden\"] = 1] = \"hidden\";\n    SelectAllVisibility[SelectAllVisibility[\"visible\"] = 2] = \"visible\";\n})(SelectAllVisibility || (SelectAllVisibility = {}));\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.base.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DetailsHeader_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar DetailsHeader_base_MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar DetailsHeader_base_MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\nvar NO_COLUMNS = [];\nvar DetailsHeaderBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(DetailsHeaderBase, _super);\n    function DetailsHeaderBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._rootElement = react.createRef();\n        _this._rootComponent = react.createRef();\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n        _this._updateDroppingState = function (newValue, event) {\n            if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n                _this._resetDropHints();\n            }\n        };\n        _this._onDragOver = function (item, event) {\n            if (_this._draggedColumnIndex >= 0) {\n                event.stopPropagation();\n                _this._computeDropHintToBeShown(event.clientX);\n            }\n        };\n        _this._onDrop = function (item, event) {\n            // Safe to assume this is defined since we're handling a drop event\n            var columnReorderProps = _this._getColumnReorderProps();\n            // Target index will not get changed if draggeditem is after target item.\n            if (_this._draggedColumnIndex >= 0 && event) {\n                var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex\n                    ? _this._currentDropHintIndex\n                    : _this._currentDropHintIndex - 1;\n                var isValidDrop = _this._isValidCurrentDropHintIndex();\n                event.stopPropagation();\n                if (isValidDrop) {\n                    _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n                    _this._onDropIndexInfo.targetIndex = targetIndex;\n                    if (columnReorderProps.onColumnDrop) {\n                        var dragDropDetails = {\n                            draggedIndex: _this._draggedColumnIndex,\n                            targetIndex: targetIndex,\n                        };\n                        columnReorderProps.onColumnDrop(dragDropDetails);\n                        /* eslint-disable deprecation/deprecation */\n                    }\n                    else if (columnReorderProps.handleColumnReorder) {\n                        columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n                        /* eslint-enable deprecation/deprecation */\n                    }\n                }\n            }\n            _this._resetDropHints();\n            _this._dropHintDetails = {};\n            _this._draggedColumnIndex = -1;\n        };\n        _this._updateDragInfo = function (props, event) {\n            // Safe to assume this is defined since we're handling a drag event\n            var columnReorderProps = _this._getColumnReorderProps();\n            var itemIndex = props.itemIndex;\n            if (itemIndex >= 0) {\n                // Column index is set based on the checkbox\n                _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n                _this._getDropHintPositions();\n                if (columnReorderProps.onColumnDragStart) {\n                    columnReorderProps.onColumnDragStart(true);\n                }\n            }\n            else if (event && _this._draggedColumnIndex >= 0) {\n                _this._resetDropHints();\n                _this._draggedColumnIndex = -1;\n                _this._dropHintDetails = {};\n                if (columnReorderProps.onColumnDragEnd) {\n                    var columnDragEndLocation = _this._isEventOnHeader(event);\n                    columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n                }\n            }\n        };\n        _this._getDropHintPositions = function () {\n            var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;\n            // Safe to assume this is defined since we're handling a drag/drop event\n            var columnReorderProps = _this._getColumnReorderProps();\n            var prevX = 0;\n            var prevMid = 0;\n            var prevRef;\n            var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n            var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n            for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n                if (_this._rootElement.current) {\n                    var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n                    if (dropHintElement) {\n                        if (i === frozenColumnCountFromStart) {\n                            prevX = dropHintElement.offsetLeft;\n                            prevMid = dropHintElement.offsetLeft;\n                            prevRef = dropHintElement;\n                        }\n                        else {\n                            var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n                            _this._dropHintDetails[i - 1] = {\n                                originX: prevX,\n                                startX: prevMid,\n                                endX: newMid,\n                                dropHintElementRef: prevRef,\n                            };\n                            prevMid = newMid;\n                            prevRef = dropHintElement;\n                            prevX = dropHintElement.offsetLeft;\n                            if (i === columns.length - frozenColumnCountFromEnd) {\n                                _this._dropHintDetails[i] = {\n                                    originX: prevX,\n                                    startX: prevMid,\n                                    endX: dropHintElement.offsetLeft,\n                                    dropHintElementRef: prevRef,\n                                };\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n         */\n        _this._computeDropHintToBeShown = function (clientX) {\n            var isRtl = (0,rtl/* getRTL */.zg)(_this.props.theme);\n            if (_this._rootElement.current) {\n                var clientRect = _this._rootElement.current.getBoundingClientRect();\n                var headerOriginX = clientRect.left;\n                var eventXRelativePosition = clientX - headerOriginX;\n                var currentDropHintIndex = _this._currentDropHintIndex;\n                if (_this._isValidCurrentDropHintIndex()) {\n                    if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n                        return;\n                    }\n                }\n                var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;\n                // Safe to assume this is defined since we're handling a drag/drop event\n                var columnReorderProps = _this._getColumnReorderProps();\n                var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n                var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n                var currentIndex = frozenColumnCountFromStart;\n                var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n                var indexToUpdate = -1;\n                if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n                    indexToUpdate = currentIndex;\n                }\n                else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n                    indexToUpdate = lastValidColumn;\n                }\n                else if (_this._isValidCurrentDropHintIndex()) {\n                    if (_this._dropHintDetails[currentDropHintIndex + 1] &&\n                        _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n                        indexToUpdate = currentDropHintIndex + 1;\n                    }\n                    else if (_this._dropHintDetails[currentDropHintIndex - 1] &&\n                        _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n                        indexToUpdate = currentDropHintIndex - 1;\n                    }\n                }\n                if (indexToUpdate === -1) {\n                    var startIndex = frozenColumnCountFromStart;\n                    var endIndex = lastValidColumn;\n                    while (startIndex < endIndex) {\n                        var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n                        if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n                            indexToUpdate = middleIndex;\n                            break;\n                        }\n                        else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n                            endIndex = middleIndex;\n                        }\n                        else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n                            startIndex = middleIndex;\n                        }\n                    }\n                }\n                if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n                    if (_this._isValidCurrentDropHintIndex()) {\n                        _this._resetDropHints();\n                    }\n                }\n                else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n                    _this._resetDropHints();\n                    _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n                    _this._currentDropHintIndex = indexToUpdate;\n                }\n            }\n        };\n        _this._renderColumnSizer = function (_a) {\n            var _b;\n            var columnIndex = _a.columnIndex;\n            var _c = _this.props.columns, columns = _c === void 0 ? NO_COLUMNS : _c;\n            var column = columns[columnIndex];\n            var columnResizeDetails = _this.state.columnResizeDetails;\n            var classNames = _this._classNames;\n            return column.isResizable ? (react.createElement(\"div\", { key: column.key + \"_sizer\", \"aria-hidden\": true, role: \"button\", \"data-is-focusable\": false, onClick: _stopPropagation, \"data-sizer-index\": columnIndex, onBlur: _this._onSizerBlur, className: (0,css/* css */.i)(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {},\n                    _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n                    _b)), onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex) })) : null;\n        };\n        _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n            return react.createElement(\"span\", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);\n        };\n        /**\n         * Called when the select all toggle is clicked.\n         */\n        _this._onSelectAllClicked = function () {\n            var selection = _this.props.selection;\n            if (selection) {\n                selection.toggleAllSelected();\n            }\n        };\n        _this._onRootMouseDown = function (ev) {\n            var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n            var columnIndex = Number(columnIndexAttr);\n            var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;\n            if (columnIndexAttr === null || ev.button !== DetailsHeader_base_MOUSEDOWN_PRIMARY_BUTTON) {\n                // Ignore anything except the primary button.\n                return;\n            }\n            _this.setState({\n                columnResizeDetails: {\n                    columnIndex: columnIndex,\n                    columnMinWidth: columns[columnIndex].calculatedWidth,\n                    originX: ev.clientX,\n                },\n            });\n            ev.preventDefault();\n            ev.stopPropagation();\n        };\n        _this._onRootMouseMove = function (ev) {\n            var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;\n            if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n                _this.setState({ isSizing: true });\n            }\n        };\n        _this._onRootKeyDown = function (ev) {\n            var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;\n            var _b = _this.props, _c = _b.columns, columns = _c === void 0 ? NO_COLUMNS : _c, onColumnResized = _b.onColumnResized;\n            var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n            if (!columnIndexAttr || isSizing) {\n                return;\n            }\n            var columnIndex = Number(columnIndexAttr);\n            if (!columnResizeDetails) {\n                // eslint-disable-next-line deprecation/deprecation\n                if (ev.which === KeyCodes/* KeyCodes.enter */.m.enter) {\n                    _this.setState({\n                        columnResizeDetails: {\n                            columnIndex: columnIndex,\n                            columnMinWidth: columns[columnIndex].calculatedWidth,\n                        },\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n            else {\n                var increment = void 0;\n                // eslint-disable-next-line deprecation/deprecation\n                if (ev.which === KeyCodes/* KeyCodes.enter */.m.enter) {\n                    _this.setState({\n                        columnResizeDetails: undefined,\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    // eslint-disable-next-line deprecation/deprecation\n                }\n                else if (ev.which === KeyCodes/* KeyCodes.left */.m.left) {\n                    increment = (0,rtl/* getRTL */.zg)(_this.props.theme) ? 1 : -1;\n                    // eslint-disable-next-line deprecation/deprecation\n                }\n                else if (ev.which === KeyCodes/* KeyCodes.right */.m.right) {\n                    increment = (0,rtl/* getRTL */.zg)(_this.props.theme) ? -1 : 1;\n                }\n                if (increment) {\n                    if (!ev.shiftKey) {\n                        increment *= 10;\n                    }\n                    _this.setState({\n                        columnResizeDetails: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, columnResizeDetails), { columnMinWidth: columnResizeDetails.columnMinWidth + increment }),\n                    });\n                    if (onColumnResized) {\n                        onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n                    }\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        };\n        /**\n         * mouse move event handler in the header\n         * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n         *\n         * @param ev - mouse move event\n         */\n        _this._onSizerMouseMove = function (ev) {\n            var \n            // use buttons property here since ev.button in some edge case is not upding well during the move.\n            // but firefox doesn't support it, so we set the default value when it is not defined.\n            buttons = ev.buttons;\n            var _a = _this.props, onColumnIsSizingChanged = _a.onColumnIsSizingChanged, onColumnResized = _a.onColumnResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;\n            var columnResizeDetails = _this.state.columnResizeDetails;\n            if (buttons !== undefined && buttons !== DetailsHeader_base_MOUSEMOVE_PRIMARY_BUTTON) {\n                // cancel mouse down event and return early when the primary button is not pressed\n                _this._onSizerMouseUp(ev);\n                return;\n            }\n            if (ev.clientX !== columnResizeDetails.originX) {\n                if (onColumnIsSizingChanged) {\n                    onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n                }\n            }\n            if (onColumnResized) {\n                var movement = ev.clientX - columnResizeDetails.originX;\n                if ((0,rtl/* getRTL */.zg)(_this.props.theme)) {\n                    movement = -movement;\n                }\n                onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n            }\n        };\n        _this._onSizerBlur = function (ev) {\n            var columnResizeDetails = _this.state.columnResizeDetails;\n            if (columnResizeDetails) {\n                _this.setState({\n                    columnResizeDetails: undefined,\n                    isSizing: false,\n                });\n            }\n        };\n        /**\n         * mouse up event handler in the header\n         * clear the resize related state.\n         * This is to ensure we can catch double click event\n         *\n         * @param ev - mouse up event\n         */\n        _this._onSizerMouseUp = function (ev) {\n            var _a = _this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n            var columnResizeDetails = _this.state.columnResizeDetails;\n            _this.setState({\n                columnResizeDetails: undefined,\n                isSizing: false,\n            });\n            if (onColumnIsSizingChanged) {\n                onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n            }\n        };\n        _this._onToggleCollapseAll = function () {\n            var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n            var newCollapsed = !_this.state.isAllCollapsed;\n            _this.setState({\n                isAllCollapsed: newCollapsed,\n            });\n            if (onToggleCollapseAll) {\n                onToggleCollapseAll(newCollapsed);\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        _this.state = {\n            columnResizeDetails: undefined,\n            isAllCollapsed: _this.props.isAllCollapsed,\n            isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected(),\n        };\n        _this._onDropIndexInfo = {\n            sourceIndex: -1,\n            targetIndex: -1,\n        };\n        _this._id = (0,getId/* getId */.z)('header');\n        _this._currentDropHintIndex = -1;\n        // The drag drop handler won't do any work until subscribe() is called,\n        // so always set it up for convenience\n        _this._dragDropHelper = new DragDropHelper({\n            selection: {\n                getSelection: function () {\n                    return;\n                },\n            },\n            minimumPixelsForDrag: _this.props.minimumPixelsForDrag,\n        });\n        return _this;\n    }\n    DetailsHeaderBase.prototype.componentDidMount = function () {\n        var selection = this.props.selection;\n        this._events.on(selection, Selection_types/* SELECTION_CHANGE */.F5, this._onSelectionChanged);\n        // this._rootElement.current will be null in tests using react-test-renderer\n        if (this._rootElement.current) {\n            // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n            this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n            this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n            if (this._getColumnReorderProps()) {\n                this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n            }\n        }\n    };\n    DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n        if (this._getColumnReorderProps()) {\n            if (!this._subscriptionObject && this._rootElement.current) {\n                this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n            }\n        }\n        else if (this._subscriptionObject) {\n            this._subscriptionObject.dispose();\n            delete this._subscriptionObject;\n        }\n        if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n            var _a = prevProps.columns, previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n            var _b = this.props.columns, columns = _b === void 0 ? NO_COLUMNS : _b;\n            if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n                this._onDropIndexInfo = {\n                    sourceIndex: -1,\n                    targetIndex: -1,\n                };\n            }\n        }\n        if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n            this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n        }\n    };\n    DetailsHeaderBase.prototype.componentWillUnmount = function () {\n        if (this._subscriptionObject) {\n            this._subscriptionObject.dispose();\n            delete this._subscriptionObject;\n        }\n        this._dragDropHelper.dispose();\n        this._events.dispose();\n    };\n    DetailsHeaderBase.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, ariaLabel = _a.ariaLabel, ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton, ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox, selectAllVisibility = _a.selectAllVisibility, ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn, indentWidth = _a.indentWidth, onColumnClick = _a.onColumnClick, onColumnContextMenu = _a.onColumnContextMenu, _c = _a.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c, styles = _a.styles, selectionMode = _a.selectionMode, theme = _a.theme, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, groupNestingDepth = _a.groupNestingDepth, useFastIcons = _a.useFastIcons, checkboxVisibility = _a.checkboxVisibility, className = _a.className;\n        var _d = this.state, isAllSelected = _d.isAllSelected, columnResizeDetails = _d.columnResizeDetails, isSizing = _d.isSizing, isAllCollapsed = _d.isAllCollapsed;\n        var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n        var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n        var isCheckboxAlwaysVisible = checkboxVisibility === DetailsList_types/* CheckboxVisibility.always */.tY.always;\n        var columnReorderProps = this._getColumnReorderProps();\n        var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n            ? columnReorderProps.frozenColumnCountFromStart\n            : 0;\n        var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n            ? columnReorderProps.frozenColumnCountFromEnd\n            : 0;\n        this._classNames = DetailsHeader_base_getClassNames(styles, {\n            theme: theme,\n            isAllSelected: isAllSelected,\n            isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n            isResizingColumn: !!columnResizeDetails && isSizing,\n            isSizing: isSizing,\n            isAllCollapsed: isAllCollapsed,\n            isCheckboxHidden: isCheckboxHidden,\n            className: className,\n        });\n        var classNames = this._classNames;\n        var IconComponent = useFastIcons ? FontIcon/* FontIcon */.xu : Icon/* Icon */.J;\n        var showGroupExpander = groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n        var columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n        var isRTL = (0,rtl/* getRTL */.zg)(theme);\n        return (react.createElement(FocusZone/* FocusZone */.k, { role: \"row\", \"aria-label\": ariaLabel, className: classNames.root, componentRef: this._rootComponent, elementRef: this._rootElement, onMouseMove: this._onRootMouseMove, \"data-automationid\": \"DetailsHeader\", direction: FocusZone_types/* FocusZoneDirection.horizontal */.U.horizontal },\n            showCheckbox\n                ? [\n                    react.createElement(\"div\", { key: \"__checkbox\", className: classNames.cellIsCheck, \"aria-labelledby\": this._id + \"-checkTooltip\", onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined, role: 'columnheader' }, onRenderColumnHeaderTooltip({\n                        hostClassName: classNames.checkTooltip,\n                        id: this._id + \"-checkTooltip\",\n                        setAriaDescribedBy: false,\n                        content: ariaLabelForSelectAllCheckbox,\n                        children: (react.createElement(DetailsRowCheck, { id: this._id + \"-check\", \"aria-label\": selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple\n                                ? ariaLabelForSelectAllCheckbox\n                                : ariaLabelForSelectionColumn, \"data-is-focusable\": !isCheckboxHidden || undefined, isHeader: true, selected: isAllSelected, anySelected: false, canSelect: !isCheckboxHidden, className: classNames.check, onRenderDetailsCheckbox: onRenderDetailsCheckbox, useFastIcons: useFastIcons, isVisible: isCheckboxAlwaysVisible })),\n                    }, this._onRenderColumnHeaderTooltip)),\n                    !this.props.onRenderColumnHeaderTooltip ? (ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (react.createElement(\"label\", { key: \"__checkboxLabel\", id: this._id + \"-checkTooltip\", className: classNames.accessibleLabel, \"aria-hidden\": true }, ariaLabelForSelectAllCheckbox)) : ariaLabelForSelectionColumn && isCheckboxHidden ? (react.createElement(\"label\", { key: \"__checkboxLabel\", id: this._id + \"-checkTooltip\", className: classNames.accessibleLabel, \"aria-hidden\": true }, ariaLabelForSelectionColumn)) : null) : null,\n                ]\n                : null,\n            showGroupExpander ? (react.createElement(\"div\", { className: classNames.cellIsGroupExpander, onClick: this._onToggleCollapseAll, \"data-is-focusable\": true, \"aria-label\": ariaLabelForToggleAllGroupsButton, \"aria-expanded\": !isAllCollapsed, role: \"columnheader\" },\n                react.createElement(IconComponent, { className: classNames.collapseButton, iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed' }),\n                react.createElement(\"span\", { className: classNames.accessibleLabel }, ariaLabelForToggleAllGroupsButton))) : null,\n            react.createElement(GroupSpacer, { indentWidth: indentWidth, role: \"gridcell\", count: groupNestingDepth - 1 }),\n            columns.map(function (column, columnIndex) {\n                var _isDraggable = columnReorderProps\n                    ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n                    : false;\n                return [\n                    columnReorderProps &&\n                        (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n                        _this._renderDropHint(columnIndex),\n                    react.createElement(DetailsColumn, { column: column, styles: column.styles, key: column.key, columnIndex: columnIndexOffset + columnIndex, parentId: _this._id, isDraggable: _isDraggable, updateDragInfo: _this._updateDragInfo, dragDropHelper: _this._dragDropHelper, onColumnClick: onColumnClick, onColumnContextMenu: onColumnContextMenu, \n                        // Do not render tooltips by default, but allow for override via props.\n                        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip, isDropped: _this._onDropIndexInfo.targetIndex === columnIndex, cellStyleProps: _this.props.cellStyleProps, useFastIcons: useFastIcons }),\n                    _this._renderColumnDivider(columnIndex),\n                ];\n            }),\n            columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length),\n            isSizing && (react.createElement(Layer/* Layer */.m, null,\n                react.createElement(\"div\", { className: classNames.sizingOverlay, onMouseMove: this._onSizerMouseMove, onMouseUp: this._onSizerMouseUp })))));\n    };\n    /** Set focus to the active thing in the focus area. */\n    DetailsHeaderBase.prototype.focus = function () {\n        var _a;\n        return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n    };\n    /**\n     * Gets column reorder props from this.props. If the calling code is part of setting up or\n     * handling drag/drop events, it's safe to assume that this method's return value is defined\n     * (because drag/drop handling will only be set up if reorder props are given).\n     */\n    DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n        var _a = this.props, columnReorderOptions = _a.columnReorderOptions, columnReorderProps = _a.columnReorderProps;\n        return columnReorderProps || (columnReorderOptions && (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, columnReorderOptions), { onColumnDragEnd: undefined }));\n    };\n    DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n        var options = {\n            selectionIndex: 1,\n            context: { data: this, index: 0 },\n            canDrag: function () { return false; },\n            canDrop: function () { return true; },\n            onDragStart: function () { return undefined; },\n            updateDropState: this._updateDroppingState,\n            onDrop: this._onDrop,\n            onDragEnd: function () { return undefined; },\n            onDragOver: this._onDragOver,\n        };\n        return options;\n    };\n    DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n        return this._currentDropHintIndex >= 0;\n    };\n    /**\n     * @returns whether or not the \"Select All\" checkbox column is hidden.\n     */\n    DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n        var _a = this.props, selectionMode = _a.selectionMode, checkboxVisibility = _a.checkboxVisibility;\n        return selectionMode === Selection_types/* SelectionMode.none */.oW.none || checkboxVisibility === DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden;\n    };\n    DetailsHeaderBase.prototype._resetDropHints = function () {\n        if (this._currentDropHintIndex >= 0) {\n            this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n            this._currentDropHintIndex = -1;\n        }\n    };\n    DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n        element.childNodes[1].style.display = displayProperty;\n        element.childNodes[0].style.display = displayProperty;\n    };\n    DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n        if (this._rootElement.current) {\n            var clientRect = this._rootElement.current.getBoundingClientRect();\n            if (event.clientX > clientRect.left &&\n                event.clientX < clientRect.right &&\n                event.clientY > clientRect.top &&\n                event.clientY < clientRect.bottom) {\n                return DetailsList_types/* ColumnDragEndLocation.header */.fQ.header;\n            }\n        }\n    };\n    DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n        var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;\n        var column = columns[columnIndex];\n        var onRenderDivider = column.onRenderDivider;\n        return onRenderDivider\n            ? onRenderDivider({ column: column, columnIndex: columnIndex }, this._renderColumnSizer)\n            : this._renderColumnSizer({ column: column, columnIndex: columnIndex });\n    };\n    DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n        var classNames = this._classNames;\n        var IconComponent = this.props.useFastIcons ? FontIcon/* FontIcon */.xu : Icon/* Icon */.J;\n        return (react.createElement(\"div\", { key: 'dropHintKey', className: classNames.dropHintStyle, id: \"columnDropHint_\" + dropHintIndex },\n            react.createElement(\"div\", { role: \"presentation\", key: \"dropHintCircleKey\", className: classNames.dropHintCaretStyle, \"data-is-focusable\": false, \"data-sizer-index\": dropHintIndex, \"aria-hidden\": true },\n                react.createElement(IconComponent, { iconName: 'CircleShapeSolid' })),\n            react.createElement(\"div\", { key: \"dropHintLineKey\", \"aria-hidden\": true, \"data-is-focusable\": false, \"data-sizer-index\": dropHintIndex, className: classNames.dropHintLineStyle })));\n    };\n    /**\n     * double click on the column sizer will auto ajust column width\n     * to fit the longest content among current rendered rows.\n     *\n     * @param columnIndex - index of the column user double clicked\n     * @param ev - mouse double click event\n     */\n    DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n        var _a = this.props, onColumnAutoResized = _a.onColumnAutoResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;\n        if (onColumnAutoResized) {\n            onColumnAutoResized(columns[columnIndex], columnIndex);\n        }\n    };\n    DetailsHeaderBase.prototype._onSelectionChanged = function () {\n        var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n        if (this.state.isAllSelected !== isAllSelected) {\n            this.setState({\n                isAllSelected: isAllSelected,\n            });\n        }\n    };\n    DetailsHeaderBase.defaultProps = {\n        selectAllVisibility: SelectAllVisibility.visible,\n        collapseAllVisibility: CollapseAllVisibility.visible,\n        useFastIcons: true,\n    };\n    return DetailsHeaderBase;\n}(react.Component));\n\nfunction _liesBetween(rtl, target, left, right) {\n    return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl, a, b) {\n    return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl, a, b) {\n    return rtl ? a <= b : a >= b;\n}\nfunction _stopPropagation(ev) {\n    ev.stopPropagation();\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.js\n\n\n\nvar DetailsHeader = (0,styled/* styled */.z)(DetailsHeaderBase, getDetailsHeaderStyles, undefined, { scope: 'DetailsHeader' });\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/object.js\nvar object = __webpack_require__(2650);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js\nvar composeComponentAs = __webpack_require__(4068);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowFields.js\n\n\n\nvar getCellText = function (item, column) {\n    var value = item && column && column.fieldName ? item[column.fieldName] : '';\n    if (value === null || value === undefined) {\n        value = '';\n    }\n    if (typeof value === 'boolean') {\n        return value.toString();\n    }\n    return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nvar DetailsRowFields = function (props) {\n    var columns = props.columns, rowClassNames = props.rowClassNames, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a, item = props.item, itemIndex = props.itemIndex, isSelected = props.isSelected, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, propsOnRenderField = props.onRenderField, cellsByColumn = props.cellsByColumn, enableUpdateAnimations = props.enableUpdateAnimations, rowHeaderId = props.rowHeaderId;\n    var cellValueKeysRef = react.useRef();\n    var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n    var defaultOnRenderField = react.useCallback(function (fieldProps) {\n        var column = fieldProps.column, cellValueKey = fieldProps.cellValueKey, className = fieldProps.className, onRender = fieldProps.onRender, fieldItem = fieldProps.item, fieldItemIndex = fieldProps.itemIndex;\n        var width = typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n                cellStyleProps.cellLeftPadding +\n                cellStyleProps.cellRightPadding +\n                (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n        return (react.createElement(\"div\", { key: key, id: column.isRowHeader ? rowHeaderId : undefined, role: column.isRowHeader ? 'rowheader' : 'gridcell', className: (0,css/* css */.i)(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, className), style: { width: width }, \"data-automationid\": \"DetailsRowCell\", \"data-automation-key\": column.key }, onRender(fieldItem, fieldItemIndex, column)));\n    }, [rowClassNames, cellStyleProps, rowHeaderId]);\n    return (react.createElement(\"div\", { className: rowClassNames.fields, \"data-automationid\": \"DetailsRowFields\", role: \"presentation\" }, columns.map(function (column) {\n        var _a = column.getValueKey, getValueKey = _a === void 0 ? getCellValueKey : _a;\n        var onRender = (cellsByColumn && column.key in cellsByColumn && (function () { return cellsByColumn[column.key]; })) ||\n            column.onRender ||\n            onRenderItemColumn ||\n            defaultOnRender;\n        var onRenderField = defaultOnRenderField;\n        if (column.onRenderField) {\n            onRenderField = (0,composeRenderFunction/* composeRenderFunction */.k)(column.onRenderField, onRenderField);\n        }\n        if (propsOnRenderField) {\n            onRenderField = (0,composeRenderFunction/* composeRenderFunction */.k)(propsOnRenderField, onRenderField);\n        }\n        var previousValueKey = cellValueKeys[column.key];\n        var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n        var showAnimation = false;\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n            showAnimation = true;\n        }\n        cellValueKeys[column.key] = cellValueKey;\n        return onRenderField({\n            item: item,\n            itemIndex: itemIndex,\n            isSelected: isSelected,\n            column: column,\n            cellValueKey: cellValueKey,\n            className: showAnimation ? rowClassNames.cellAnimation : undefined,\n            onRender: onRender,\n        });\n    })));\n};\nfunction defaultOnRender(item, index, column) {\n    if (!item || !column) {\n        return null;\n    }\n    return getCellText(item, column);\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.base.js\n\n\n\n\n\n\n\n\n\n\n\n\nvar DetailsRow_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar DetailsRow_base_NO_COLUMNS = [];\nvar DetailsRowBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(DetailsRowBase, _super);\n    function DetailsRowBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._cellMeasurer = react.createRef();\n        _this._focusZone = react.createRef();\n        _this._onSelectionChanged = function () {\n            var selectionState = getSelectionState(_this.props);\n            if (!(0,object/* shallowCompare */.Vv)(selectionState, _this.state.selectionState)) {\n                _this.setState({\n                    selectionState: selectionState,\n                });\n            }\n        };\n        /**\n         * update isDropping state based on the input value, which is used to change style during drag and drop\n         *\n         * when change to true, that means drag enter. we will add default dropping class name\n         * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n         *\n         * when change to false, that means drag leave. we will remove the dropping class name from root element.\n         *\n         * @param newValue - New isDropping state value\n         * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n         */\n        _this._updateDroppingState = function (newValue, event) {\n            var isDropping = _this.state.isDropping;\n            var _a = _this.props, dragDropEvents = _a.dragDropEvents, item = _a.item;\n            if (!newValue) {\n                if (dragDropEvents.onDragLeave) {\n                    dragDropEvents.onDragLeave(item, event);\n                }\n            }\n            else if (dragDropEvents.onDragEnter) {\n                _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n            }\n            if (isDropping !== newValue) {\n                _this.setState({ isDropping: newValue });\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        _this.state = {\n            selectionState: getSelectionState(props),\n            columnMeasureInfo: undefined,\n            isDropping: false,\n        };\n        _this._droppingClassNames = '';\n        return _this;\n    }\n    DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, previousState), { selectionState: getSelectionState(nextProps) });\n    };\n    DetailsRowBase.prototype.componentDidMount = function () {\n        var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection, item = _a.item, onDidMount = _a.onDidMount;\n        if (dragDropHelper && this._root.current) {\n            this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n        }\n        if (selection) {\n            this._events.on(selection, Selection_types/* SELECTION_CHANGE */.F5, this._onSelectionChanged);\n        }\n        if (onDidMount && item) {\n            // If the item appears later, we should wait for it before calling this method.\n            this._onDidMountCalled = true;\n            onDidMount(this);\n        }\n    };\n    DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n        var state = this.state;\n        var _a = this.props, item = _a.item, onDidMount = _a.onDidMount;\n        var columnMeasureInfo = state.columnMeasureInfo;\n        if (this.props.itemIndex !== previousProps.itemIndex ||\n            this.props.item !== previousProps.item ||\n            this.props.dragDropHelper !== previousProps.dragDropHelper) {\n            if (this._dragDropSubscription) {\n                this._dragDropSubscription.dispose();\n                delete this._dragDropSubscription;\n            }\n            if (this.props.dragDropHelper && this._root.current) {\n                this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n            }\n        }\n        if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n            var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n            columnMeasureInfo.onMeasureDone(newWidth);\n            this.setState({\n                columnMeasureInfo: undefined,\n            });\n        }\n        if (item && onDidMount && !this._onDidMountCalled) {\n            this._onDidMountCalled = true;\n            onDidMount(this);\n        }\n    };\n    DetailsRowBase.prototype.componentWillUnmount = function () {\n        var _a = this.props, item = _a.item, onWillUnmount = _a.onWillUnmount;\n        // Only call the onWillUnmount callback if we have an item.\n        if (onWillUnmount && item) {\n            onWillUnmount(this);\n        }\n        if (this._dragDropSubscription) {\n            this._dragDropSubscription.dispose();\n            delete this._dragDropSubscription;\n        }\n        this._events.dispose();\n    };\n    DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        if (this.props.useReducedRowRenderer) {\n            var newSelectionState = getSelectionState(nextProps);\n            if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n                return true;\n            }\n            return !(0,object/* shallowCompare */.Vv)(this.props, nextProps);\n        }\n        else {\n            return true;\n        }\n    };\n    DetailsRowBase.prototype.render = function () {\n        var _a = this.props, className = _a.className, _b = _a.columns, columns = _b === void 0 ? DetailsRow_base_NO_COLUMNS : _b, dragDropEvents = _a.dragDropEvents, item = _a.item, itemIndex = _a.itemIndex, id = _a.id, _c = _a.flatIndexOffset, flatIndexOffset = _c === void 0 ? 2 : _c, _d = _a.onRenderCheck, onRenderCheck = _d === void 0 ? this._onRenderCheck : _d, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, onRenderItemColumn = _a.onRenderItemColumn, onRenderField = _a.onRenderField, getCellValueKey = _a.getCellValueKey, selectionMode = _a.selectionMode, _e = _a.rowWidth, rowWidth = _e === void 0 ? 0 : _e, checkboxVisibility = _a.checkboxVisibility, getRowAriaLabel = _a.getRowAriaLabel, getRowAriaDescription = _a.getRowAriaDescription, getRowAriaDescribedBy = _a.getRowAriaDescribedBy, isGridRow = _a.isGridRow, checkButtonAriaLabel = _a.checkButtonAriaLabel, checkboxCellClassName = _a.checkboxCellClassName, \n        /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n        rowFieldsAs = _a.rowFieldsAs, selection = _a.selection, indentWidth = _a.indentWidth, enableUpdateAnimations = _a.enableUpdateAnimations, compact = _a.compact, theme = _a.theme, styles = _a.styles, cellsByColumn = _a.cellsByColumn, groupNestingDepth = _a.groupNestingDepth, _f = _a.useFastIcons, useFastIcons = _f === void 0 ? true : _f, cellStyleProps = _a.cellStyleProps, group = _a.group, focusZoneProps = _a.focusZoneProps, _g = _a.disabled, disabled = _g === void 0 ? false : _g;\n        var _h = this.state, columnMeasureInfo = _h.columnMeasureInfo, isDropping = _h.isDropping;\n        var _j = this.state.selectionState, _k = _j.isSelected, isSelected = _k === void 0 ? false : _k, _l = _j.isSelectionModal, isSelectionModal = _l === void 0 ? false : _l;\n        var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n        var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n        var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n        var ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n        var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n        var canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n        var isContentUnselectable = selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple;\n        var showCheckbox = selectionMode !== Selection_types/* SelectionMode.none */.oW.none && checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden;\n        var ariaSelected = selectionMode === Selection_types/* SelectionMode.none */.oW.none ? undefined : isSelected;\n        var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n        var ariaSetSize = group ? group.count : undefined;\n        var focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZone_types/* FocusZoneDirection.horizontal */.U.horizontal;\n        this._classNames = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, this._classNames), DetailsRow_base_getClassNames(styles, {\n            theme: theme,\n            isSelected: isSelected,\n            canSelect: !isContentUnselectable,\n            anySelected: isSelectionModal,\n            checkboxCellClassName: checkboxCellClassName,\n            droppingClassName: droppingClassName,\n            className: className,\n            compact: compact,\n            enableUpdateAnimations: enableUpdateAnimations,\n            cellStyleProps: cellStyleProps,\n            disabled: disabled,\n        }));\n        var rowClassNames = {\n            isMultiline: this._classNames.isMultiline,\n            isRowHeader: this._classNames.isRowHeader,\n            cell: this._classNames.cell,\n            cellAnimation: this._classNames.cellAnimation,\n            cellPadded: this._classNames.cellPadded,\n            cellUnpadded: this._classNames.cellUnpadded,\n            fields: this._classNames.fields,\n        };\n        // Only re-assign rowClassNames when classNames have changed.\n        // Otherwise, they will cause DetailsRowFields to unnecessarily\n        // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n        // Refactor DetailsRowFields to generate own styles to remove need for this.\n        if (!(0,object/* shallowCompare */.Vv)(this._rowClassNames || {}, rowClassNames)) {\n            this._rowClassNames = rowClassNames;\n        }\n        var RowFields = rowFieldsAs ? (0,composeComponentAs/* composeComponentAs */.Z)(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n        var rowFields = (react.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + \"-header\", cellsByColumn: cellsByColumn, columns: columns, item: item, itemIndex: itemIndex, isSelected: isSelected, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0), onRenderItemColumn: onRenderItemColumn, onRenderField: onRenderField, getCellValueKey: getCellValueKey, enableUpdateAnimations: enableUpdateAnimations, cellStyleProps: cellStyleProps }));\n        var defaultRole = 'row';\n        var role = this.props.role ? this.props.role : defaultRole;\n        this._ariaRowDescriptionId = (0,getId/* getId */.z)('DetailsRow-description');\n        // When the user does not specify any column is a row-header in the columns props,\n        // The aria-labelledby of the checkbox does not specify {id}-header.\n        var hasRowHeader = columns.some(function (column) {\n            return !!column.isRowHeader;\n        });\n        var ariaLabelledby = id + \"-checkbox\" + (hasRowHeader ? \" \" + id + \"-header\" : '');\n        // additional props for rows within a GroupedList\n        // these are needed for treegrid row semantics, but not grid row semantics\n        var groupedListRowProps = isGridRow\n            ? {}\n            : {\n                'aria-level': (groupNestingDepth && groupNestingDepth + 1) || undefined,\n                'aria-posinset': ariaPositionInSet,\n                'aria-setsize': ariaSetSize,\n            };\n        return (react.createElement(FocusZone/* FocusZone */.k, (0,tslib_es6/* __assign */.pi)({ \"data-is-focusable\": true }, (0,properties/* getNativeProps */.pq)(this.props, properties/* divProperties */.n7), (typeof isDraggable === 'boolean'\n            ? {\n                'data-is-draggable': isDraggable,\n                draggable: isDraggable,\n            }\n            : {}), focusZoneProps, groupedListRowProps, { direction: focusZoneDirection, elementRef: this._root, componentRef: this._focusZone, role: role, \"aria-label\": ariaLabel, \"aria-disabled\": disabled || undefined, \"aria-describedby\": ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy, className: this._classNames.root, \"data-selection-index\": itemIndex, \"data-selection-touch-invoke\": true, \"data-selection-disabled\": disabled || undefined, \"data-item-index\": itemIndex, \"aria-rowindex\": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined, \"data-automationid\": \"DetailsRow\", style: { minWidth: rowWidth }, \"aria-selected\": ariaSelected, allowFocusRoot: true }),\n            ariaRowDescription ? (react.createElement(\"span\", { key: \"description\", role: \"presentation\", hidden: true, id: this._ariaRowDescriptionId }, ariaRowDescription)) : null,\n            showCheckbox && (react.createElement(\"div\", { role: \"gridcell\", \"data-selection-toggle\": true, className: this._classNames.checkCell }, onRenderCheck({\n                id: id ? id + \"-checkbox\" : undefined,\n                selected: isSelected,\n                selectionMode: selectionMode,\n                anySelected: isSelectionModal,\n                'aria-label': checkButtonAriaLabel,\n                'aria-labelledby': id ? ariaLabelledby : undefined,\n                canSelect: canSelect,\n                compact: compact,\n                className: this._classNames.check,\n                theme: theme,\n                isVisible: checkboxVisibility === DetailsList_types/* CheckboxVisibility.always */.tY.always,\n                onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n                useFastIcons: useFastIcons,\n            }))),\n            react.createElement(GroupSpacer, { indentWidth: indentWidth, role: \"gridcell\", count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0) }),\n            item && rowFields,\n            columnMeasureInfo && (react.createElement(\"span\", { role: \"presentation\", className: (0,css/* css */.i)(this._classNames.cellMeasurer, this._classNames.cell), ref: this._cellMeasurer },\n                react.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + \"-header\", columns: [columnMeasureInfo.column], item: item, itemIndex: itemIndex, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length, onRenderItemColumn: onRenderItemColumn, getCellValueKey: getCellValueKey }))),\n            react.createElement(\"span\", { role: \"checkbox\", className: this._classNames.checkCover, \"aria-checked\": isSelected, \"data-selection-toggle\": true })));\n    };\n    /**\n     * measure cell at index. and call the call back with the measured cell width when finish measure\n     *\n     * @param index - The cell index\n     * @param onMeasureDone - The call back function when finish measure\n     */\n    DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n        var _a = this.props.columns, columns = _a === void 0 ? DetailsRow_base_NO_COLUMNS : _a;\n        var column = (0,tslib_es6/* __assign */.pi)({}, columns[index]);\n        column.minWidth = 0;\n        column.maxWidth = 999999;\n        delete column.calculatedWidth;\n        this.setState({\n            columnMeasureInfo: {\n                index: index,\n                column: column,\n                onMeasureDone: onMeasureDone,\n            },\n        });\n    };\n    DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n        var _a;\n        if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }\n        return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n    };\n    DetailsRowBase.prototype._onRenderCheck = function (props) {\n        return react.createElement(DetailsRowCheck, (0,tslib_es6/* __assign */.pi)({}, props));\n    };\n    DetailsRowBase.prototype._getRowDragDropOptions = function () {\n        var _a = this.props, item = _a.item, itemIndex = _a.itemIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;\n        var options = {\n            eventMap: eventsToRegister,\n            selectionIndex: itemIndex,\n            context: { data: item, index: itemIndex },\n            canDrag: dragDropEvents.canDrag,\n            canDrop: dragDropEvents.canDrop,\n            onDragStart: dragDropEvents.onDragStart,\n            updateDropState: this._updateDroppingState,\n            onDrop: dragDropEvents.onDrop,\n            onDragEnd: dragDropEvents.onDragEnd,\n            onDragOver: dragDropEvents.onDragOver,\n        };\n        return options;\n    };\n    return DetailsRowBase;\n}(react.Component));\n\nfunction getSelectionState(props) {\n    var _a;\n    var itemIndex = props.itemIndex, selection = props.selection;\n    return {\n        isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),\n        isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection)),\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.js\n\n\n\nvar DetailsRow = (0,styled/* styled */.z)(DetailsRowBase, getDetailsRowStyles, undefined, {\n    scope: 'DetailsRow',\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+dom-utilities@2.2.3/node_modules/@fluentui/dom-utilities/lib/getParent.js + 2 modules\nvar getParent = __webpack_require__(8259);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/getWindow.js\nvar getWindow = __webpack_require__(6451);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/scroll.js\nvar lib_scroll = __webpack_require__(1649);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/focus.js + 1 modules\nvar lib_focus = __webpack_require__(2781);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/selection/SelectionZone.js\n\n\n\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\nvar SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nvar SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nvar SELECTION_SPAN_ATTRIBUTE_NAME = 'data-selection-span';\nvar SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nvar SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nvar SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nvar SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nvar SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n/**\n * {@docCategory Selection}\n */\nvar SelectionZone = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(SelectionZone, _super);\n    function SelectionZone(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        /**\n         * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n         * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n         * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n         * focus event that occurs. This method does that.\n         */\n        _this.ignoreNextFocus = function () {\n            _this._handleNextFocus(false);\n        };\n        _this._onSelectionChange = function () {\n            var selection = _this.props.selection;\n            var isModal = selection.isModal && selection.isModal();\n            _this.setState({\n                isModal: isModal,\n            });\n        };\n        _this._onMouseDownCapture = function (ev) {\n            var target = ev.target;\n            if (document.activeElement !== target && !(0,elementContains/* elementContains */.t)(document.activeElement, target)) {\n                _this.ignoreNextFocus();\n                return;\n            }\n            if (!(0,elementContains/* elementContains */.t)(target, _this._root.current)) {\n                return;\n            }\n            while (target !== _this._root.current) {\n                if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n                    _this.ignoreNextFocus();\n                    break;\n                }\n                target = (0,getParent/* getParent */.G)(target);\n            }\n        };\n        /**\n         * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n         * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n         * specially.\n         */\n        _this._onFocus = function (ev) {\n            var target = ev.target;\n            var selection = _this.props.selection;\n            var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;\n            var selectionMode = _this._getSelectionMode();\n            if (_this._shouldHandleFocus && selectionMode !== Selection_types/* SelectionMode.none */.oW.none) {\n                var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n                var itemRoot = _this._findItemRoot(target);\n                if (!isToggle && itemRoot) {\n                    var index = _this._getItemIndex(itemRoot);\n                    var span = _this._getItemSpan(itemRoot);\n                    if (span === undefined) {\n                        if (isToggleModifierPressed) {\n                            // set anchor only.\n                            selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n                            if (_this.props.enterModalOnTouch && _this._isTouch && selection.setModal) {\n                                selection.setModal(true);\n                                _this._setIsTouch(false);\n                            }\n                        }\n                        else {\n                            if (_this.props.isSelectedOnFocus) {\n                                _this._onItemSurfaceClick('focus', index);\n                            }\n                        }\n                    }\n                }\n            }\n            _this._handleNextFocus(false);\n        };\n        _this._onMouseDown = function (ev) {\n            _this._updateModifiers(ev);\n            var toggleWithoutModifierPressed = _this.props.toggleWithoutModifierPressed;\n            var target = ev.target;\n            var itemRoot = _this._findItemRoot(target);\n            // No-op if selection is disabled\n            if (_this._isSelectionDisabled(target)) {\n                return;\n            }\n            while (target !== _this._root.current) {\n                if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n                    break;\n                }\n                else if (itemRoot) {\n                    if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n                        break;\n                    }\n                    else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n                        break;\n                    }\n                    else if ((target === itemRoot || _this._shouldAutoSelect(target)) &&\n                        !_this._isShiftPressed &&\n                        !_this._isCtrlPressed &&\n                        !_this._isMetaPressed &&\n                        !toggleWithoutModifierPressed) {\n                        _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot), _this._getItemSpan(itemRoot));\n                        break;\n                    }\n                    else if (_this.props.disableAutoSelectOnInputElements &&\n                        (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')) {\n                        return;\n                    }\n                }\n                target = (0,getParent/* getParent */.G)(target);\n            }\n        };\n        _this._onTouchStartCapture = function (ev) {\n            _this._setIsTouch(true);\n        };\n        _this._onClick = function (ev) {\n            var _a = _this.props.enableTouchInvocationTarget, enableTouchInvocationTarget = _a === void 0 ? false : _a;\n            _this._updateModifiers(ev);\n            var target = ev.target;\n            var itemRoot = _this._findItemRoot(target);\n            var isSelectionDisabled = _this._isSelectionDisabled(target);\n            while (target !== _this._root.current) {\n                if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n                    if (!isSelectionDisabled) {\n                        _this._onToggleAllClick(ev);\n                    }\n                    break;\n                }\n                else if (itemRoot) {\n                    var index = _this._getItemIndex(itemRoot);\n                    var span = _this._getItemSpan(itemRoot);\n                    if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n                        if (!isSelectionDisabled) {\n                            if (_this._isShiftPressed) {\n                                _this._onItemSurfaceClick('click', index, span);\n                            }\n                            else {\n                                _this._onToggleClick(ev, index, span);\n                            }\n                        }\n                        break;\n                    }\n                    else if ((_this._isTouch &&\n                        enableTouchInvocationTarget &&\n                        _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n                        _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n                        if (span === undefined) {\n                            // Items should be invokable even if selection is disabled.\n                            _this._onInvokeClick(ev, index);\n                        }\n                        break;\n                    }\n                    else if (target === itemRoot) {\n                        if (!isSelectionDisabled) {\n                            _this._onItemSurfaceClick('click', index, span);\n                        }\n                        break;\n                    }\n                    else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n                        return;\n                    }\n                }\n                target = (0,getParent/* getParent */.G)(target);\n            }\n        };\n        _this._onContextMenu = function (ev) {\n            var target = ev.target;\n            var _a = _this.props, onItemContextMenu = _a.onItemContextMenu, selection = _a.selection;\n            if (onItemContextMenu) {\n                var itemRoot = _this._findItemRoot(target);\n                if (itemRoot) {\n                    var index = _this._getItemIndex(itemRoot);\n                    _this._onInvokeMouseDown(ev, index);\n                    var skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n                    // In order to keep back compat, if the value here is undefined, then we should still\n                    // call preventDefault(). Only in the case where true is explicitly returned should\n                    // the call be skipped.\n                    if (!skipPreventDefault) {\n                        ev.preventDefault();\n                    }\n                }\n            }\n        };\n        /**\n         * In multi selection, if you double click within an item's root (but not within the invoke element or\n         * input elements), we should execute the invoke handler.\n         */\n        _this._onDoubleClick = function (ev) {\n            var target = ev.target;\n            var onItemInvoked = _this.props.onItemInvoked;\n            var itemRoot = _this._findItemRoot(target);\n            if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {\n                var index = _this._getItemIndex(itemRoot);\n                while (target !== _this._root.current) {\n                    if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n                        _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n                        break;\n                    }\n                    else if (target === itemRoot) {\n                        _this._onInvokeClick(ev, index);\n                        break;\n                    }\n                    target = (0,getParent/* getParent */.G)(target);\n                }\n                target = (0,getParent/* getParent */.G)(target);\n            }\n        };\n        _this._onKeyDownCapture = function (ev) {\n            _this._updateModifiers(ev);\n            _this._handleNextFocus(true);\n        };\n        _this._onKeyDown = function (ev) {\n            _this._updateModifiers(ev);\n            var target = ev.target;\n            var isSelectionDisabled = _this._isSelectionDisabled(target);\n            var _a = _this.props, selection = _a.selection, selectionClearedOnEscapePress = _a.selectionClearedOnEscapePress;\n            // eslint-disable-next-line deprecation/deprecation\n            var isSelectAllKey = ev.which === KeyCodes/* KeyCodes.a */.m.a && (_this._isCtrlPressed || _this._isMetaPressed);\n            // eslint-disable-next-line deprecation/deprecation\n            var isClearSelectionKey = ev.which === KeyCodes/* KeyCodes.escape */.m.escape;\n            // Ignore key downs from input elements.\n            if (_this._isInputElement(target)) {\n                // A key was pressed while an item in this zone was focused.\n                return;\n            }\n            var selectionMode = _this._getSelectionMode();\n            // If ctrl-a is pressed, select all (if all are not already selected.)\n            if (isSelectAllKey && selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple && !selection.isAllSelected()) {\n                if (!isSelectionDisabled) {\n                    selection.setAllSelected(true);\n                }\n                ev.stopPropagation();\n                ev.preventDefault();\n                return;\n            }\n            // If escape is pressed and the component is configured to clear on escape press,\n            // clear selection (if any are selected.)\n            if (selectionClearedOnEscapePress && isClearSelectionKey && selection.getSelectedCount() > 0) {\n                if (!isSelectionDisabled) {\n                    selection.setAllSelected(false);\n                }\n                ev.stopPropagation();\n                ev.preventDefault();\n                return;\n            }\n            var itemRoot = _this._findItemRoot(target);\n            // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n            if (itemRoot) {\n                var index = _this._getItemIndex(itemRoot);\n                var span = _this._getItemSpan(itemRoot);\n                while (target !== _this._root.current) {\n                    if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n                        // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n                        // so we can no-op for any keydowns in this case.\n                        break;\n                    }\n                    else if (_this._shouldAutoSelect(target)) {\n                        if (!isSelectionDisabled && span === undefined) {\n                            // If the event went to an element which should trigger auto-select, select it and then let\n                            // the default behavior kick in.\n                            _this._onInvokeMouseDown(ev, index, span);\n                        }\n                        break;\n                    }\n                    else if (\n                    // eslint-disable-next-line deprecation/deprecation\n                    (ev.which === KeyCodes/* KeyCodes.enter */.m.enter || ev.which === KeyCodes/* KeyCodes.space */.m.space) &&\n                        (target.tagName === 'BUTTON' ||\n                            target.tagName === 'A' ||\n                            target.tagName === 'INPUT' ||\n                            target.tagName === 'SUMMARY')) {\n                        return false;\n                    }\n                    else if (target === itemRoot) {\n                        // eslint-disable-next-line deprecation/deprecation\n                        if (ev.which === KeyCodes/* KeyCodes.enter */.m.enter) {\n                            if (span === undefined) {\n                                // Items should be invokable even if selection is disabled.\n                                _this._onInvokeClick(ev, index);\n                                ev.preventDefault();\n                            }\n                            return;\n                            // eslint-disable-next-line deprecation/deprecation\n                        }\n                        else if (ev.which === KeyCodes/* KeyCodes.space */.m.space) {\n                            if (!isSelectionDisabled) {\n                                _this._onToggleClick(ev, index, span);\n                            }\n                            ev.preventDefault();\n                            return;\n                        }\n                        break;\n                    }\n                    target = (0,getParent/* getParent */.G)(target);\n                }\n            }\n        };\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        _this._async = new Async/* Async */.e(_this);\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        var selection = _this.props.selection;\n        // Reflect the initial modal state of selection into the state.\n        var isModal = selection.isModal && selection.isModal();\n        _this.state = {\n            isModal: isModal,\n        };\n        return _this;\n    }\n    SelectionZone.getDerivedStateFromProps = function (nextProps, prevState) {\n        var isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, prevState), { isModal: isModal });\n    };\n    SelectionZone.prototype.componentDidMount = function () {\n        var win = (0,getWindow/* getWindow */.J)(this._root.current);\n        // Track the latest modifier keys globally.\n        this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n        this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n        this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n        this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n        // Subscribe to the selection to keep modal state updated.\n        this._events.on(this.props.selection, 'change', this._onSelectionChange);\n    };\n    SelectionZone.prototype.render = function () {\n        var isModal = this.state.isModal;\n        return (react.createElement(\"div\", { className: (0,css/* css */.i)('ms-SelectionZone', this.props.className, {\n                'ms-SelectionZone--modal': !!isModal,\n            }), ref: this._root, onKeyDown: this._onKeyDown, onMouseDown: this._onMouseDown, onKeyDownCapture: this._onKeyDownCapture, onClick: this._onClick, role: \"presentation\", onDoubleClick: this._onDoubleClick, onContextMenu: this._onContextMenu, onMouseDownCapture: this._onMouseDownCapture, onFocusCapture: this._onFocus, \"data-selection-is-modal\": isModal ? true : undefined },\n            this.props.children,\n            react.createElement(useFocusRects/* FocusRects */.u, null)));\n    };\n    SelectionZone.prototype.componentDidUpdate = function (previousProps) {\n        var selection = this.props.selection;\n        if (selection !== previousProps.selection) {\n            // Whenever selection changes, update the subscripton to keep modal state updated.\n            this._events.off(previousProps.selection);\n            this._events.on(selection, 'change', this._onSelectionChange);\n        }\n    };\n    SelectionZone.prototype.componentWillUnmount = function () {\n        this._events.dispose();\n        this._async.dispose();\n    };\n    SelectionZone.prototype._isSelectionDisabled = function (target) {\n        if (this._getSelectionMode() === Selection_types/* SelectionMode.none */.oW.none) {\n            return true;\n        }\n        while (target !== this._root.current) {\n            if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n                return true;\n            }\n            target = (0,getParent/* getParent */.G)(target);\n        }\n        return false;\n    };\n    SelectionZone.prototype._onToggleAllClick = function (ev) {\n        var selection = this.props.selection;\n        var selectionMode = this._getSelectionMode();\n        if (selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple) {\n            selection.toggleAllSelected();\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    };\n    SelectionZone.prototype._onToggleClick = function (ev, index, span) {\n        var selection = this.props.selection;\n        var selectionMode = this._getSelectionMode();\n        selection.setChangeEvents(false);\n        if (this.props.enterModalOnTouch &&\n            this._isTouch &&\n            (span !== undefined ? !selection.isRangeSelected(index, span) : !selection.isIndexSelected(index)) &&\n            selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n        }\n        if (selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple) {\n            if (span !== undefined) {\n                selection.toggleRangeSelected(index, span);\n            }\n            else {\n                selection.toggleIndexSelected(index);\n            }\n        }\n        else if (selectionMode === Selection_types/* SelectionMode.single */.oW.single) {\n            if (span === undefined || span === 1) {\n                var isSelected = selection.isIndexSelected(index);\n                var isModal = selection.isModal && selection.isModal();\n                selection.setAllSelected(false);\n                selection.setIndexSelected(index, !isSelected, true);\n                if (isModal && selection.setModal) {\n                    // Since the above call to setAllSelected(false) clears modal state,\n                    // restore it. This occurs because the SelectionMode of the Selection\n                    // may differ from the SelectionZone.\n                    selection.setModal(true);\n                }\n            }\n        }\n        else {\n            selection.setChangeEvents(true);\n            return;\n        }\n        selection.setChangeEvents(true);\n        ev.stopPropagation();\n        // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n        // for checkboxes if you use a checkbox for the toggle.\n    };\n    SelectionZone.prototype._onInvokeClick = function (ev, index) {\n        var _a = this.props, selection = _a.selection, onItemInvoked = _a.onItemInvoked;\n        if (onItemInvoked) {\n            onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n            ev.preventDefault();\n            ev.stopPropagation();\n        }\n    };\n    SelectionZone.prototype._onItemSurfaceClick = function (type, index, span) {\n        var _a;\n        var _b = this.props, selection = _b.selection, toggleWithoutModifierPressed = _b.toggleWithoutModifierPressed;\n        var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n        var selectionMode = this._getSelectionMode();\n        if (selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple) {\n            if (this._isShiftPressed && !this._isTabPressed) {\n                if (span !== undefined) {\n                    (_a = selection.selectToRange) === null || _a === void 0 ? void 0 : _a.call(selection, index, span, !isToggleModifierPressed);\n                }\n                else {\n                    selection.selectToIndex(index, !isToggleModifierPressed);\n                }\n            }\n            else if (type === 'click' && (isToggleModifierPressed || toggleWithoutModifierPressed)) {\n                if (span !== undefined) {\n                    selection.toggleRangeSelected(index, span);\n                }\n                else {\n                    selection.toggleIndexSelected(index);\n                }\n            }\n            else {\n                this._clearAndSelectIndex(index, span);\n            }\n        }\n        else if (selectionMode === Selection_types/* SelectionMode.single */.oW.single) {\n            this._clearAndSelectIndex(index, span);\n        }\n    };\n    SelectionZone.prototype._onInvokeMouseDown = function (ev, index, span) {\n        var selection = this.props.selection;\n        if (span !== undefined) {\n            if (selection.isRangeSelected(index, span)) {\n                return;\n            }\n        }\n        else {\n            // Only do work if item is not selected.\n            if (selection.isIndexSelected(index)) {\n                return;\n            }\n        }\n        this._clearAndSelectIndex(index, span);\n    };\n    /**\n     * To avoid high startup cost of traversing the DOM on component mount,\n     * defer finding the scrollable parent until a click interaction.\n     *\n     * The styles will probably already calculated since we're running in a click handler,\n     * so this is less likely to cause layout thrashing then doing it in mount.\n     */\n    SelectionZone.prototype._findScrollParentAndTryClearOnEmptyClick = function (ev) {\n        var scrollParent = (0,lib_scroll/* findScrollableParent */.zj)(this._root.current);\n        // unbind this handler and replace binding with a binding on the actual scrollable parent\n        this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n        this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n        // If we clicked inside the scrollable parent, call through to the handler on this click.\n        if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n            this._tryClearOnEmptyClick(ev);\n        }\n    };\n    SelectionZone.prototype._tryClearOnEmptyClick = function (ev) {\n        if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {\n            this.props.selection.setAllSelected(false);\n        }\n    };\n    SelectionZone.prototype._clearAndSelectIndex = function (index, span) {\n        var _a;\n        var _b = this.props, selection = _b.selection, _c = _b.selectionClearedOnSurfaceClick, selectionClearedOnSurfaceClick = _c === void 0 ? true : _c;\n        var isAlreadySingleSelected = (span === undefined || span === 1) && selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n        if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {\n            var isModal = selection.isModal && selection.isModal();\n            selection.setChangeEvents(false);\n            selection.setAllSelected(false);\n            if (span !== undefined) {\n                (_a = selection.setRangeSelected) === null || _a === void 0 ? void 0 : _a.call(selection, index, span, true, true);\n            }\n            else {\n                selection.setIndexSelected(index, true, true);\n            }\n            if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n                if (selection.setModal) {\n                    selection.setModal(true);\n                }\n                if (this._isTouch) {\n                    this._setIsTouch(false);\n                }\n            }\n            selection.setChangeEvents(true);\n        }\n    };\n    /**\n     * We need to track the modifier key states so that when focus events occur, which do not contain\n     * modifier states in the Event object, we know how to behave.\n     */\n    SelectionZone.prototype._updateModifiers = function (ev) {\n        this._isShiftPressed = ev.shiftKey;\n        this._isCtrlPressed = ev.ctrlKey;\n        this._isMetaPressed = ev.metaKey;\n        // eslint-disable-next-line deprecation/deprecation\n        var keyCode = ev.keyCode;\n        this._isTabPressed = keyCode ? keyCode === KeyCodes/* KeyCodes.tab */.m.tab : false;\n    };\n    SelectionZone.prototype._findItemRoot = function (target) {\n        var selection = this.props.selection;\n        while (target !== this._root.current) {\n            var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n            var index = Number(indexValue);\n            if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n                break;\n            }\n            target = (0,getParent/* getParent */.G)(target);\n        }\n        if (target === this._root.current) {\n            return undefined;\n        }\n        return target;\n    };\n    SelectionZone.prototype._getItemIndex = function (itemRoot) {\n        var _a;\n        var indexValue = parseInt((_a = itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME)) !== null && _a !== void 0 ? _a : '', 10);\n        return isNaN(indexValue) ? -1 : indexValue;\n    };\n    SelectionZone.prototype._getItemSpan = function (itemRoot) {\n        var _a;\n        var spanValue = parseInt((_a = itemRoot.getAttribute(SELECTION_SPAN_ATTRIBUTE_NAME)) !== null && _a !== void 0 ? _a : '', 10);\n        return isNaN(spanValue) ? undefined : spanValue;\n    };\n    SelectionZone.prototype._shouldAutoSelect = function (element) {\n        return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n    };\n    SelectionZone.prototype._hasAttribute = function (element, attributeName) {\n        var isToggle = false;\n        while (!isToggle && element !== this._root.current) {\n            var value = element.getAttribute(attributeName);\n            if (value === 'false') {\n                isToggle = false;\n                break;\n            }\n            isToggle = value === 'true';\n            element = (0,getParent/* getParent */.G)(element);\n        }\n        return isToggle;\n    };\n    SelectionZone.prototype._isInputElement = function (element) {\n        return (element.tagName === 'INPUT' ||\n            element.tagName === 'TEXTAREA' ||\n            element.getAttribute('contenteditable') === 'true' ||\n            element.getAttribute('contenteditable') === '');\n    };\n    SelectionZone.prototype._isNonHandledClick = function (element) {\n        var doc = (0,getDocument/* getDocument */.M)();\n        if (doc && element) {\n            while (element && element !== doc.documentElement) {\n                if ((0,lib_focus/* isElementTabbable */.MW)(element) || element.hasAttribute('data-selection-index')) {\n                    return false;\n                }\n                element = (0,getParent/* getParent */.G)(element);\n            }\n        }\n        return true;\n    };\n    SelectionZone.prototype._handleNextFocus = function (handleFocus) {\n        var _this = this;\n        if (this._shouldHandleFocusTimeoutId) {\n            this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n            this._shouldHandleFocusTimeoutId = undefined;\n        }\n        this._shouldHandleFocus = handleFocus;\n        if (handleFocus) {\n            this._async.setTimeout(function () {\n                _this._shouldHandleFocus = false;\n            }, 100);\n        }\n    };\n    SelectionZone.prototype._setIsTouch = function (isTouch) {\n        var _this = this;\n        if (this._isTouchTimeoutId) {\n            this._async.clearTimeout(this._isTouchTimeoutId);\n            this._isTouchTimeoutId = undefined;\n        }\n        this._isTouch = true;\n        if (isTouch) {\n            this._async.setTimeout(function () {\n                _this._isTouch = false;\n            }, 300);\n        }\n    };\n    SelectionZone.prototype._getSelectionMode = function () {\n        var selection = this.props.selection;\n        var _a = this.props.selectionMode, selectionMode = _a === void 0 ? selection ? selection.mode : Selection_types/* SelectionMode.none */.oW.none : _a;\n        return selectionMode;\n    };\n    SelectionZone.defaultProps = {\n        isSelectedOnFocus: true,\n        toggleWithoutModifierPressed: false,\n        selectionMode: Selection_types/* SelectionMode.multiple */.oW.multiple,\n        selectionClearedOnEscapePress: true,\n    };\n    return SelectionZone;\n}(react.Component));\n\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/selection/Selection.js\nvar Selection = __webpack_require__(8228);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.styles.js\n\nvar GroupedList_styles_GlobalClassNames = {\n    root: 'ms-GroupedList',\n    compact: 'ms-GroupedList--Compact',\n    group: 'ms-GroupedList-group',\n    link: 'ms-Link',\n    listCell: 'ms-List-cell',\n};\nvar beziers = {\n    easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\nvar GroupedList_styles_getStyles = function (props) {\n    var _a, _b;\n    var theme = props.theme, className = props.className, compact = props.compact;\n    var palette = theme.palette;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GroupedList_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.small,\n            {\n                position: 'relative',\n                selectors: (_a = {},\n                    _a[\".\" + classNames.listCell] = {\n                        minHeight: 38, // be consistent with DetailsList styles\n                    },\n                    _a),\n            },\n            compact && [\n                classNames.compact,\n                {\n                    selectors: (_b = {},\n                        _b[\".\" + classNames.listCell] = {\n                            minHeight: 32, // be consistent with DetailsList styles\n                        },\n                        _b),\n                },\n            ],\n            className,\n        ],\n        group: [\n            classNames.group,\n            {\n                transition: \"background-color \" + lib/* AnimationVariables.durationValue2 */.D1.durationValue2 + \" \" + beziers.easeInOutSine,\n            },\n        ],\n        groupIsDropping: {\n            backgroundColor: palette.neutralLight,\n        },\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.styles.js\n\n\n\n\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nvar GroupHeader_styles_GlobalClassNames = {\n    root: 'ms-GroupHeader',\n    compact: 'ms-GroupHeader--compact',\n    check: 'ms-GroupHeader-check',\n    dropIcon: 'ms-GroupHeader-dropIcon',\n    expand: 'ms-GroupHeader-expand',\n    isCollapsed: 'is-collapsed',\n    title: 'ms-GroupHeader-title',\n    isSelected: 'is-selected',\n    iconTag: 'ms-Icon--Tag',\n    group: 'ms-GroupedList-group',\n    isDropping: 'is-dropping',\n};\nvar GroupHeader_styles_beziers = {\n    easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n    easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n    easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\nvar DEFAULT_GROUP_HEADER_HEIGHT = 48;\nvar COMPACT_GROUP_HEADER_HEIGHT = 40;\nvar GroupHeader_styles_getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var theme = props.theme, className = props.className, selected = props.selected, isCollapsed = props.isCollapsed, compact = props.compact;\n    // padding from the source to align GroupHeader title with DetailsRow's first cell.\n    var cellLeftPadding = DEFAULT_CELL_STYLE_PROPS.cellLeftPadding;\n    var finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n    var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GroupHeader_styles_GlobalClassNames, theme);\n    var checkExpandResetStyles = [\n        (0,lib/* getFocusStyle */.GL)(theme),\n        {\n            cursor: 'default',\n            background: 'none',\n            backgroundColor: 'transparent',\n            border: 'none',\n            padding: 0, // cancel default <button> padding\n        },\n    ];\n    return {\n        root: [\n            classNames.root,\n            (0,lib/* getFocusStyle */.GL)(theme),\n            theme.fonts.medium,\n            {\n                // keep the border for height but color it so it's invisible.\n                borderBottom: \"1px solid \" + semanticColors.listBackground,\n                cursor: 'default',\n                userSelect: 'none',\n                selectors: (_a = {\n                        ':hover': {\n                            background: semanticColors.listItemBackgroundHovered,\n                            color: semanticColors.actionLinkHovered,\n                        }\n                    },\n                    _a[\"&:hover .\" + classNames.check] = {\n                        opacity: 1,\n                    },\n                    _a[\".\" + setFocusVisibility/* IsFocusVisibleClassName */.G$ + \" &:focus .\" + classNames.check] = {\n                        opacity: 1,\n                    },\n                    _a[\":global(.\" + classNames.group + \".\" + classNames.isDropping + \")\"] = {\n                        selectors: (_b = {},\n                            _b[\"& > .\" + classNames.root + \" .\" + classNames.dropIcon] = {\n                                transition: \"transform \" + lib/* AnimationVariables.durationValue4 */.D1.durationValue4 + \" \" + GroupHeader_styles_beziers.easeOutCirc + \" \" +\n                                    (\"opacity \" + lib/* AnimationVariables.durationValue1 */.D1.durationValue1 + \" \" + GroupHeader_styles_beziers.easeOutSine),\n                                transitionDelay: lib/* AnimationVariables.durationValue3 */.D1.durationValue3,\n                                opacity: 1,\n                                transform: \"rotate(0.2deg) scale(1);\", // rotation prevents jittery motion in IE\n                            },\n                            _b[\".\" + classNames.check] = {\n                                opacity: 0,\n                            },\n                            _b),\n                    },\n                    _a),\n            },\n            selected && [\n                classNames.isSelected,\n                {\n                    background: semanticColors.listItemBackgroundChecked,\n                    selectors: (_c = {\n                            ':hover': {\n                                background: semanticColors.listItemBackgroundCheckedHovered,\n                            }\n                        },\n                        _c[\"\" + classNames.check] = {\n                            opacity: 1,\n                        },\n                        _c),\n                },\n            ],\n            compact && [classNames.compact, { border: 'none' }],\n            className,\n        ],\n        groupHeaderContainer: [\n            {\n                display: 'flex',\n                alignItems: 'center',\n                height: finalRowHeight,\n            },\n        ],\n        headerCount: [\n            {\n                padding: '0px 4px',\n            },\n        ],\n        check: [\n            classNames.check,\n            checkExpandResetStyles,\n            {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n                // Ensure that the check cell covers the top border of the cell.\n                // This ensures the click target does not leave a spot which would\n                // cause other items to be deselected.\n                paddingTop: 1,\n                marginTop: -1,\n                opacity: 0,\n                width: CHECK_CELL_WIDTH,\n                height: finalRowHeight,\n                selectors: (_d = {},\n                    _d[\".\" + setFocusVisibility/* IsFocusVisibleClassName */.G$ + \" &:focus\"] = {\n                        opacity: 1,\n                    },\n                    _d),\n            },\n        ],\n        expand: [\n            classNames.expand,\n            checkExpandResetStyles,\n            {\n                display: 'flex',\n                flexShrink: 0,\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: fonts.small.fontSize,\n                width: SPACER_WIDTH,\n                height: finalRowHeight,\n                color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n                selectors: {\n                    ':hover': {\n                        backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n                    },\n                    ':active': {\n                        backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n                    },\n                },\n            },\n        ],\n        expandIsCollapsed: [\n            isCollapsed\n                ? [\n                    classNames.isCollapsed,\n                    {\n                        transform: 'rotate(0deg)',\n                        transformOrigin: '50% 50%',\n                        transition: 'transform .1s linear',\n                    },\n                ]\n                : {\n                    transform: (0,rtl/* getRTL */.zg)(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n                    transformOrigin: '50% 50%',\n                    transition: 'transform .1s linear',\n                },\n        ],\n        title: [\n            classNames.title,\n            {\n                paddingLeft: cellLeftPadding,\n                fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n                fontWeight: isCollapsed ? lib/* FontWeights.regular */.lq.regular : lib/* FontWeights.semibold */.lq.semibold,\n                cursor: 'pointer',\n                outline: 0,\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n                overflow: 'hidden',\n            },\n        ],\n        dropIcon: [\n            classNames.dropIcon,\n            {\n                position: 'absolute',\n                left: -26,\n                fontSize: lib/* IconFontSizes.large */.ld.large,\n                color: palette.neutralSecondary,\n                transition: \"transform \" + lib/* AnimationVariables.durationValue2 */.D1.durationValue2 + \" \" + GroupHeader_styles_beziers.easeInBack + \", \" +\n                    (\"opacity \" + lib/* AnimationVariables.durationValue4 */.D1.durationValue4 + \" \" + GroupHeader_styles_beziers.easeOutSine),\n                opacity: 0,\n                transform: 'rotate(0.2deg) scale(0.65)',\n                transformOrigin: '10px 10px',\n                selectors: (_e = {},\n                    _e[\":global(.\" + classNames.iconTag + \")\"] = {\n                        position: 'absolute',\n                    },\n                    _e),\n            },\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Spinner/Spinner.types.js\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nvar SpinnerSize;\n(function (SpinnerSize) {\n    /**\n     * 12px Spinner diameter\n     */\n    SpinnerSize[SpinnerSize[\"xSmall\"] = 0] = \"xSmall\";\n    /**\n     * 16px Spinner diameter\n     */\n    SpinnerSize[SpinnerSize[\"small\"] = 1] = \"small\";\n    /**\n     * 20px Spinner diameter\n     */\n    SpinnerSize[SpinnerSize[\"medium\"] = 2] = \"medium\";\n    /**\n     * 28px Spinner diameter\n     */\n    SpinnerSize[SpinnerSize[\"large\"] = 3] = \"large\";\n})(SpinnerSize || (SpinnerSize = {}));\n/**\n * @deprecated Use `SpinnerSize` instead. Will be removed at \\>= 2.0.0.\n * {@docCategory Spinner}\n */\nvar SpinnerType;\n(function (SpinnerType) {\n    /**\n     * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \\>= 2.0.0.\n     */\n    SpinnerType[SpinnerType[\"normal\"] = 0] = \"normal\";\n    /**\n     * @deprecated Use `SpinnerSize.large` instead. Will be removed at \\>= 2.0.0.\n     */\n    SpinnerType[SpinnerType[\"large\"] = 1] = \"large\";\n})(SpinnerType || (SpinnerType = {}));\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/DelayedRender.js\nvar DelayedRender = __webpack_require__(8262);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Spinner/Spinner.base.js\n\n\n\n\nvar Spinner_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar SpinnerBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(SpinnerBase, _super);\n    function SpinnerBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SpinnerBase.prototype.render = function () {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = this.props, type = _a.type, size = _a.size, ariaLabel = _a.ariaLabel, ariaLive = _a.ariaLive, styles = _a.styles, label = _a.label, theme = _a.theme, className = _a.className, labelPosition = _a.labelPosition;\n        var statusMessage = ariaLabel;\n        var nativeProps = (0,properties/* getNativeProps */.pq)(this.props, properties/* divProperties */.n7, ['size']);\n        // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n        // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n        // finally goes away we should delete this.\n        var styleSize = size;\n        if (styleSize === undefined && type !== undefined) {\n            // eslint-disable-next-line deprecation/deprecation\n            styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n        }\n        var classNames = Spinner_base_getClassNames(styles, {\n            theme: theme,\n            size: styleSize,\n            className: className,\n            labelPosition: labelPosition,\n        });\n        return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, nativeProps, { className: classNames.root }),\n            react.createElement(\"div\", { className: classNames.circle }),\n            label && react.createElement(\"div\", { className: classNames.label }, label),\n            statusMessage && (react.createElement(\"div\", { role: \"status\", \"aria-live\": ariaLive },\n                react.createElement(DelayedRender/* DelayedRender */.U, null,\n                    react.createElement(\"div\", { className: classNames.screenReaderText }, statusMessage))))));\n    };\n    SpinnerBase.defaultProps = {\n        size: SpinnerSize.medium,\n        ariaLive: 'polite',\n        labelPosition: 'bottom',\n    };\n    return SpinnerBase;\n}(react.Component));\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Spinner/Spinner.styles.js\n\n\n\n\nvar Spinner_styles_GlobalClassNames = {\n    root: 'ms-Spinner',\n    circle: 'ms-Spinner-circle',\n    label: 'ms-Spinner-label',\n};\nvar spinAnimation = (0,memoize/* memoizeFunction */.NF)(function () {\n    return (0,lib/* keyframes */.F4)({\n        '0%': {\n            transform: 'rotate(0deg)',\n        },\n        '100%': {\n            transform: 'rotate(360deg)',\n        },\n    });\n});\nvar Spinner_styles_getStyles = function (props) {\n    var _a;\n    var theme = props.theme, size = props.size, className = props.className, labelPosition = props.labelPosition;\n    var palette = theme.palette;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(Spinner_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            {\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n            },\n            labelPosition === 'top' && {\n                flexDirection: 'column-reverse',\n            },\n            labelPosition === 'right' && {\n                flexDirection: 'row',\n            },\n            labelPosition === 'left' && {\n                flexDirection: 'row-reverse',\n            },\n            className,\n        ],\n        circle: [\n            classNames.circle,\n            {\n                boxSizing: 'border-box',\n                borderRadius: '50%',\n                border: '1.5px solid ' + palette.themeLight,\n                borderTopColor: palette.themePrimary,\n                animationName: spinAnimation(),\n                animationDuration: '1.3s',\n                animationIterationCount: 'infinite',\n                animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ borderTopColor: 'Highlight' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _a),\n            },\n            size === SpinnerSize.xSmall && [\n                'ms-Spinner--xSmall',\n                {\n                    width: 12,\n                    height: 12,\n                },\n            ],\n            size === SpinnerSize.small && [\n                'ms-Spinner--small',\n                {\n                    width: 16,\n                    height: 16,\n                },\n            ],\n            size === SpinnerSize.medium && [\n                'ms-Spinner--medium',\n                {\n                    width: 20,\n                    height: 20,\n                },\n            ],\n            size === SpinnerSize.large && [\n                'ms-Spinner--large',\n                {\n                    width: 28,\n                    height: 28,\n                },\n            ],\n        ],\n        label: [\n            classNames.label,\n            theme.fonts.small,\n            {\n                color: palette.themePrimary,\n                margin: '8px 0 0',\n                textAlign: 'center',\n            },\n            labelPosition === 'top' && {\n                margin: '0 0 8px',\n            },\n            labelPosition === 'right' && {\n                margin: '0 0 0 8px',\n            },\n            labelPosition === 'left' && {\n                margin: '0 8px 0 0',\n            },\n        ],\n        screenReaderText: lib/* hiddenContentStyle */.ul,\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Spinner/Spinner.js\n\n\n\nvar Spinner = (0,styled/* styled */.z)(SpinnerBase, Spinner_styles_getStyles, undefined, { scope: 'Spinner' });\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.base.js\n\n\n\n\n\n\n\n\n\nvar GroupHeader_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar GroupHeaderBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(GroupHeaderBase, _super);\n    function GroupHeaderBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._toggleCollapse = function () {\n            var _a = _this.props, group = _a.group, onToggleCollapse = _a.onToggleCollapse, isGroupLoading = _a.isGroupLoading;\n            var isCollapsed = _this.state.isCollapsed;\n            var newCollapsed = !isCollapsed;\n            var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n            _this.setState({\n                isCollapsed: newCollapsed,\n                isLoadingVisible: newLoadingVisible,\n            });\n            if (onToggleCollapse) {\n                onToggleCollapse(group);\n            }\n        };\n        _this._onKeyUp = function (ev) {\n            var _a = _this.props, group = _a.group, onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n            if (onGroupHeaderKeyUp) {\n                onGroupHeaderKeyUp(ev, group);\n            }\n            if (!ev.defaultPrevented) {\n                // eslint-disable-next-line deprecation/deprecation\n                var shouldOpen = _this.state.isCollapsed && ev.which === (0,rtl/* getRTLSafeKeyCode */.dP)(KeyCodes/* KeyCodes.right */.m.right, _this.props.theme);\n                // eslint-disable-next-line deprecation/deprecation\n                var shouldClose = !_this.state.isCollapsed && ev.which === (0,rtl/* getRTLSafeKeyCode */.dP)(KeyCodes/* KeyCodes.left */.m.left, _this.props.theme);\n                if (shouldClose || shouldOpen) {\n                    _this._toggleCollapse();\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                }\n            }\n        };\n        _this._onToggleClick = function (ev) {\n            _this._toggleCollapse();\n            ev.stopPropagation();\n            ev.preventDefault();\n        };\n        _this._onHeaderClick = function () {\n            var _a = _this.props, group = _a.group, onGroupHeaderClick = _a.onGroupHeaderClick;\n            if (onGroupHeaderClick) {\n                onGroupHeaderClick(group);\n            }\n        };\n        _this._onRenderTitle = function (props) {\n            var group = props.group;\n            if (!group) {\n                return null;\n            }\n            var onRenderName = props.onRenderName\n                ? (0,composeRenderFunction/* composeRenderFunction */.k)(props.onRenderName, _this._onRenderName)\n                : _this._onRenderName;\n            return (react.createElement(\"div\", { className: _this._classNames.title, id: _this._id, onClick: _this._onHeaderClick, role: \"gridcell\", \"aria-colspan\": _this.props.ariaColSpan, \"data-selection-invoke\": true }, onRenderName(props)));\n        };\n        _this._onRenderName = function (props) {\n            var group = props.group;\n            if (!group) {\n                return null;\n            }\n            return (react.createElement(react.Fragment, null,\n                react.createElement(\"span\", null, group.name),\n                react.createElement(\"span\", { className: _this._classNames.headerCount },\n                    \"(\",\n                    group.count,\n                    group.hasMoreData && '+',\n                    \")\")));\n        };\n        _this._id = (0,getId/* getId */.z)('GroupHeader');\n        _this.state = {\n            isCollapsed: (_this.props.group && _this.props.group.isCollapsed),\n            isLoadingVisible: false,\n        };\n        return _this;\n    }\n    GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n        if (nextProps.group) {\n            var newCollapsed = nextProps.group.isCollapsed;\n            var isGroupLoading = nextProps.isGroupLoading;\n            var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n            return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, previousState), { isCollapsed: newCollapsed || false, isLoadingVisible: newLoadingVisible || false });\n        }\n        return previousState;\n    };\n    GroupHeaderBase.prototype.render = function () {\n        var _a = this.props, group = _a.group, _b = _a.groupLevel, groupLevel = _b === void 0 ? 0 : _b, viewport = _a.viewport, selectionMode = _a.selectionMode, loadingText = _a.loadingText, \n        // eslint-disable-next-line deprecation/deprecation\n        _c = _a.isSelected, \n        // eslint-disable-next-line deprecation/deprecation\n        isSelected = _c === void 0 ? false : _c, _d = _a.selected, selected = _d === void 0 ? false : _d, indentWidth = _a.indentWidth, onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox, _e = _a.isCollapsedGroupSelectVisible, isCollapsedGroupSelectVisible = _e === void 0 ? true : _e, expandButtonProps = _a.expandButtonProps, expandButtonIcon = _a.expandButtonIcon, selectAllButtonProps = _a.selectAllButtonProps, theme = _a.theme, styles = _a.styles, className = _a.className, compact = _a.compact, ariaLevel = _a.ariaLevel, ariaPosInSet = _a.ariaPosInSet, ariaSetSize = _a.ariaSetSize, ariaRowIndex = _a.ariaRowIndex, useFastIcons = _a.useFastIcons;\n        var onRenderTitle = this.props.onRenderTitle\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(this.props.onRenderTitle, this._onRenderTitle)\n            : this._onRenderTitle;\n        var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n        var onRenderCheckbox = onRenderGroupHeaderCheckbox\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n            : defaultCheckboxRender;\n        var _f = this.state, isCollapsed = _f.isCollapsed, isLoadingVisible = _f.isLoadingVisible;\n        var canSelectGroup = selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple;\n        var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n        var currentlySelected = selected || isSelected;\n        var isRTL = (0,rtl/* getRTL */.zg)(theme);\n        this._classNames = GroupHeader_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            selected: currentlySelected,\n            isCollapsed: isCollapsed,\n            compact: compact,\n        });\n        if (!group) {\n            return null;\n        }\n        return (react.createElement(\"div\", { className: this._classNames.root, style: viewport ? { minWidth: viewport.width } : {}, role: \"row\", \"aria-level\": ariaLevel, \"aria-setsize\": ariaSetSize, \"aria-posinset\": ariaPosInSet, \"aria-rowindex\": ariaRowIndex, \"data-is-focusable\": true, onKeyUp: this._onKeyUp, \"aria-label\": group.ariaLabel, \"aria-labelledby\": group.ariaLabel ? undefined : this._id, \"aria-expanded\": !this.state.isCollapsed, \"aria-selected\": canSelectGroup ? currentlySelected : undefined, \"data-selection-index\": group.startIndex, \"data-selection-span\": group.count },\n            react.createElement(\"div\", { className: this._classNames.groupHeaderContainer, role: \"presentation\" },\n                isSelectionCheckVisible ? (react.createElement(\"div\", { role: \"gridcell\" },\n                    react.createElement(\"button\", (0,tslib_es6/* __assign */.pi)({ \"data-is-focusable\": false, type: \"button\", className: this._classNames.check, role: \"checkbox\", id: this._id + \"-check\", \"aria-checked\": currentlySelected, \"aria-labelledby\": this._id + \"-check \" + this._id, \"data-selection-toggle\": true }, selectAllButtonProps), onRenderCheckbox({ checked: currentlySelected, theme: theme }, onRenderCheckbox)))) : (\n                // To make the group header align properly with the column headers, this spacer\n                // needs to be the same width as the check cell in the column header.\n                selectionMode !== Selection_types/* SelectionMode.none */.oW.none && react.createElement(GroupSpacer, { indentWidth: CHECK_CELL_WIDTH, count: 1 })),\n                react.createElement(GroupSpacer, { indentWidth: indentWidth, count: groupLevel }),\n                react.createElement(\"div\", { className: this._classNames.dropIcon, role: \"presentation\" },\n                    react.createElement(Icon/* Icon */.J, { iconName: \"Tag\" })),\n                react.createElement(\"div\", { role: \"gridcell\" },\n                    react.createElement(\"button\", (0,tslib_es6/* __assign */.pi)({ \"data-is-focusable\": false, \"data-selection-disabled\": true, type: \"button\", className: this._classNames.expand, onClick: this._onToggleClick, \"aria-expanded\": !this.state.isCollapsed }, expandButtonProps),\n                        react.createElement(Icon/* Icon */.J, { className: this._classNames.expandIsCollapsed, iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed') }))),\n                onRenderTitle(this.props),\n                isLoadingVisible && react.createElement(Spinner, { label: loadingText }))));\n    };\n    GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n        return react.createElement(Check, { checked: checkboxProps.checked });\n    };\n    GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n        return react.createElement(GroupHeader_base_FastCheck, { theme: checkboxProps.theme, checked: checkboxProps.checked });\n    };\n    GroupHeaderBase.defaultProps = {\n        expandButtonProps: { 'aria-label': 'expand collapse group' },\n    };\n    return GroupHeaderBase;\n}(react.Component));\n\nvar GroupHeader_base_FastCheck = react.memo(function (props) {\n    return react.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.js\n\n\n\nvar GroupHeader = (0,styled/* styled */.z)(GroupHeaderBase, GroupHeader_styles_getStyles, undefined, {\n    scope: 'GroupHeader',\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.styles.js\n\nvar GroupShowAll_styles_GlobalClassNames = {\n    root: 'ms-GroupShowAll',\n    link: 'ms-Link',\n};\nvar GroupShowAll_styles_getStyles = function (props) {\n    var _a;\n    var theme = props.theme;\n    var fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GroupShowAll_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            {\n                position: 'relative',\n                padding: '10px 84px',\n                cursor: 'pointer',\n                selectors: (_a = {},\n                    _a[\".\" + classNames.link] = {\n                        fontSize: fonts.small.fontSize,\n                    },\n                    _a),\n            },\n        ],\n    };\n};\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Link/Link.js + 2 modules\nvar Link = __webpack_require__(6857);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.base.js\n\n\n\n\n\nvar GroupShowAll_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar GroupShowAllBase = function (props) {\n    var group = props.group, groupLevel = props.groupLevel, _a = props.showAllLinkText, showAllLinkText = _a === void 0 ? 'Show All' : _a, styles = props.styles, theme = props.theme, onToggleSummarize = props.onToggleSummarize;\n    var classNames = GroupShowAll_base_getClassNames(styles, { theme: theme });\n    var memoizedOnClick = (0,react.useCallback)(function (ev) {\n        onToggleSummarize(group);\n        ev.stopPropagation();\n        ev.preventDefault();\n    }, [onToggleSummarize, group]);\n    if (group) {\n        return (react.createElement(\"div\", { className: classNames.root },\n            react.createElement(GroupSpacer, { count: groupLevel }),\n            react.createElement(Link/* Link */.r, { onClick: memoizedOnClick }, showAllLinkText)));\n    }\n    return null;\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.js\n\n\n\nvar GroupShowAll = (0,styled/* styled */.z)(GroupShowAllBase, GroupShowAll_styles_getStyles, undefined, { scope: 'GroupShowAll' });\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.styles.js\n\nvar GroupFooter_styles_GlobalClassNames = {\n    root: 'ms-groupFooter',\n};\nvar GroupFooter_styles_getStyles = function (props) {\n    var theme = props.theme, className = props.className;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GroupFooter_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            theme.fonts.medium,\n            classNames.root,\n            {\n                position: 'relative',\n                padding: '5px 38px',\n            },\n            className,\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.base.js\n\n\n\nvar GroupFooter_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar GroupFooterBase = function (props) {\n    var group = props.group, groupLevel = props.groupLevel, footerText = props.footerText, indentWidth = props.indentWidth, styles = props.styles, theme = props.theme;\n    var classNames = GroupFooter_base_getClassNames(styles, { theme: theme });\n    if (group && footerText) {\n        return (react.createElement(\"div\", { className: classNames.root },\n            react.createElement(GroupSpacer, { indentWidth: indentWidth, count: groupLevel }),\n            footerText));\n    }\n    return null;\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.js\n\n\n\nvar GroupFooter = (0,styled/* styled */.z)(GroupFooterBase, GroupFooter_styles_getStyles, undefined, {\n    scope: 'GroupFooter',\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/canUseDOM.js\nvar canUseDOM = __webpack_require__(5715);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/array.js\nvar array = __webpack_require__(669);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/List/List.types.js\n/**\n * {@docCategory List}\n */\nvar ScrollToMode = {\n    /**\n     * Does not make any consideration to where in the viewport the item should align to.\n     */\n    auto: 0,\n    /**\n     * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n     */\n    top: 1,\n    /**\n     * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n     */\n    bottom: 2,\n    /**\n     * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n     */\n    center: 3,\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/List/utils/scroll.js\nvar getScrollHeight = function (el) {\n    if (el === undefined) {\n        return 0;\n    }\n    var scrollHeight = 0;\n    if ('scrollHeight' in el) {\n        scrollHeight = el.scrollHeight;\n    }\n    else if ('document' in el) {\n        scrollHeight = el.document.documentElement.scrollHeight;\n    }\n    // No need to round as scrollHeight is already rounded for us.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight\n    return scrollHeight;\n};\nvar getScrollYPosition = function (el) {\n    if (el === undefined) {\n        return 0;\n    }\n    var scrollPos = 0;\n    if ('scrollTop' in el) {\n        scrollPos = el.scrollTop;\n    }\n    else if ('scrollY' in el) {\n        scrollPos = el.scrollY;\n    }\n    // Round this value to an integer as it may be fractional.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY\n    return Math.ceil(scrollPos);\n};\nvar setScrollYPosition = function (el, pos) {\n    if ('scrollTop' in el) {\n        el.scrollTop = pos;\n    }\n    else if ('scrollY' in el) {\n        el.scrollTo(el.scrollX, pos);\n    }\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/List/List.js\n\n\n\n\n\n\nvar RESIZE_DELAY = 16;\nvar MIN_SCROLL_UPDATE_DELAY = 100;\nvar MAX_SCROLL_UPDATE_DELAY = 500;\nvar IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nvar DONE_SCROLLING_WAIT = 500;\nvar DEFAULT_ITEMS_PER_PAGE = 10;\nvar DEFAULT_PAGE_HEIGHT = 30;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar PAGE_KEY_PREFIX = 'page-';\nvar SPACER_KEY_PREFIX = 'spacer-';\nvar EMPTY_RECT = {\n    top: -1,\n    bottom: -1,\n    left: -1,\n    right: -1,\n    width: 0,\n    height: 0,\n};\n// Naming expensive measures so that they're named in profiles.\nvar _measurePageRect = function (element) { return element.getBoundingClientRect(); };\nvar _measureSurfaceRect = _measurePageRect;\nvar _measureScrollRect = _measurePageRect;\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nvar List = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(List, _super);\n    function List(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._surface = react.createRef();\n        _this._pageRefs = {};\n        _this._getDerivedStateFromProps = function (nextProps, previousState) {\n            if (nextProps.items !== _this.props.items ||\n                nextProps.renderCount !== _this.props.renderCount ||\n                nextProps.startIndex !== _this.props.startIndex ||\n                nextProps.version !== _this.props.version ||\n                !previousState.hasMounted) {\n                if (!(0,canUseDOM/* canUseDOM */.N)()) {\n                    return previousState;\n                }\n                // We have received new items so we want to make sure that initially we only render a single window to\n                // fill the currently visible rect, and then later render additional windows.\n                _this._resetRequiredWindows();\n                _this._requiredRect = null;\n                _this._measureVersion++;\n                _this._invalidatePageCache();\n                return _this._updatePages(nextProps, previousState);\n            }\n            return previousState;\n        };\n        _this._onRenderRoot = function (props) {\n            var rootRef = props.rootRef, surfaceElement = props.surfaceElement, divProps = props.divProps;\n            return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ ref: rootRef }, divProps), surfaceElement));\n        };\n        _this._onRenderSurface = function (props) {\n            var surfaceRef = props.surfaceRef, pageElements = props.pageElements, divProps = props.divProps;\n            return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ ref: surfaceRef }, divProps), pageElements));\n        };\n        _this._onRenderPage = function (pageProps, defaultRender) {\n            var _a;\n            var _b = _this.props, onRenderCell = _b.onRenderCell, onRenderCellConditional = _b.onRenderCellConditional, role = _b.role;\n            var _c = pageProps.page, _d = _c.items, items = _d === void 0 ? [] : _d, startIndex = _c.startIndex, divProps = (0,tslib_es6/* __rest */._T)(pageProps, [\"page\"]);\n            // only assign list item role if no role is assigned\n            var cellRole = role === undefined ? 'listitem' : 'presentation';\n            var cells = [];\n            for (var i = 0; i < items.length; i++) {\n                var index = startIndex + i;\n                var item = items[i];\n                var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;\n                if (itemKey === null || itemKey === undefined) {\n                    itemKey = index;\n                }\n                var renderCell = onRenderCellConditional !== null && onRenderCellConditional !== void 0 ? onRenderCellConditional : onRenderCell;\n                var cell = (_a = renderCell === null || renderCell === void 0 ? void 0 : renderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : undefined)) !== null && _a !== void 0 ? _a : null;\n                if (!onRenderCellConditional || cell) {\n                    cells.push(react.createElement(\"div\", { role: cellRole, className: 'ms-List-cell', key: itemKey, \"data-list-index\": index, \"data-automationid\": \"ListCell\" }, cell));\n                }\n            }\n            return react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, divProps), cells);\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this.state = {\n            pages: [],\n            isScrolling: false,\n            getDerivedStateFromProps: _this._getDerivedStateFromProps,\n            hasMounted: false,\n        };\n        _this._async = new Async/* Async */.e(_this);\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        _this._estimatedPageHeight = 0;\n        _this._totalEstimates = 0;\n        _this._requiredWindowsAhead = 0;\n        _this._requiredWindowsBehind = 0;\n        // Track the measure version for everything.\n        _this._measureVersion = 0;\n        // Ensure that scrolls are lazy updated.\n        _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n            leading: false,\n            maxWait: MAX_SCROLL_UPDATE_DELAY,\n        });\n        _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n            leading: false,\n        });\n        _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY, {\n            leading: false,\n        });\n        _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {\n            leading: false,\n        });\n        _this._cachedPageHeights = {};\n        _this._estimatedPageHeight = 0;\n        _this._focusedIndex = -1;\n        _this._pageCache = {};\n        return _this;\n    }\n    List.getDerivedStateFromProps = function (nextProps, previousState) {\n        return previousState.getDerivedStateFromProps(nextProps, previousState);\n    };\n    Object.defineProperty(List.prototype, \"pageRefs\", {\n        get: function () {\n            return this._pageRefs;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n     * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n     *\n     * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n     * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n     *\n     * @param index - Index of item to scroll to\n     * @param measureItem - Optional callback to measure the height of an individual item\n     * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n     */\n    List.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n        if (scrollToMode === void 0) { scrollToMode = ScrollToMode.auto; }\n        var startIndex = this.props.startIndex;\n        var renderCount = this._getRenderCount();\n        var endIndex = startIndex + renderCount;\n        var allowedRect = this._allowedRect;\n        var scrollTop = 0;\n        var itemsPerPage = 1;\n        for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n            var pageSpecification = this._getPageSpecification(this.props, itemIndex, allowedRect);\n            var pageHeight = pageSpecification.height;\n            itemsPerPage = pageSpecification.itemCount;\n            var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n            if (requestedIndexIsInPage) {\n                // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n                // just the given item, otherwise we'll only bring the page into view\n                if (measureItem && this._scrollElement) {\n                    var scrollRect = _measureScrollRect(this._scrollElement);\n                    var scrollPosition = getScrollYPosition(this._scrollElement);\n                    var scrollWindow = {\n                        top: scrollPosition,\n                        bottom: scrollPosition + scrollRect.height,\n                    };\n                    // Adjust for actual item position within page\n                    var itemPositionWithinPage = index - itemIndex;\n                    for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n                        scrollTop += measureItem(itemIndex + itemIndexInPage);\n                    }\n                    var scrollBottom = scrollTop + measureItem(index);\n                    // If scrollToMode is set to something other than auto, we always want to\n                    // scroll the item into a specific position on the page.\n                    switch (scrollToMode) {\n                        case ScrollToMode.top:\n                            setScrollYPosition(this._scrollElement, scrollTop);\n                            return;\n                        case ScrollToMode.bottom:\n                            setScrollYPosition(this._scrollElement, scrollBottom - scrollRect.height);\n                            return;\n                        case ScrollToMode.center:\n                            setScrollYPosition(this._scrollElement, (scrollTop + scrollBottom - scrollRect.height) / 2);\n                            return;\n                        case ScrollToMode.auto:\n                        default:\n                            break;\n                    }\n                    var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n                    if (itemIsFullyVisible) {\n                        // Item is already visible, do nothing.\n                        return;\n                    }\n                    var itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n                    var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n                    if (itemIsPartiallyAbove) {\n                        //  We will just scroll to 'scrollTop'\n                        //  .------.   - scrollTop\n                        //  |Item  |\n                        //  | .----|-. - scrollWindow.top\n                        //  '------' |\n                        //    |      |\n                        //    '------'\n                    }\n                    else if (itemIsPartiallyBelow) {\n                        //  Adjust scrollTop position to just bring in the element\n                        // .------.  - scrollTop\n                        // |      |\n                        // | .------.\n                        // '-|----' | - scrollWindow.bottom\n                        //   | Item |\n                        //   '------' - scrollBottom\n                        scrollTop = scrollBottom - scrollRect.height;\n                    }\n                }\n                if (this._scrollElement) {\n                    setScrollYPosition(this._scrollElement, scrollTop);\n                }\n                return;\n            }\n            scrollTop += pageHeight;\n        }\n    };\n    List.prototype.getStartItemIndexInView = function (measureItem) {\n        var pages = this.state.pages || [];\n        for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {\n            var page = pages_1[_i];\n            var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n            if (isPageVisible) {\n                if (!measureItem) {\n                    var rowHeight = Math.floor(page.height / page.itemCount);\n                    return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n                }\n                else {\n                    var totalRowHeight = 0;\n                    for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n                        var rowHeight = measureItem(itemIndex);\n                        if (page.top + totalRowHeight <= this._scrollTop &&\n                            this._scrollTop < page.top + totalRowHeight + rowHeight) {\n                            return itemIndex;\n                        }\n                        else {\n                            totalRowHeight += rowHeight;\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    };\n    List.prototype.componentDidMount = function () {\n        this.setState({ hasMounted: true });\n        this._scrollElement = (0,lib_scroll/* findScrollableParent */.zj)(this._root.current);\n        this._scrollTop = 0;\n        if (!this.props.getPageHeight) {\n            var heightsChanged = this._updatePageMeasurements(this.state.pages);\n            if (heightsChanged) {\n                this._materializedRect = null;\n                this.setState(this._updatePages(this.props, this.state));\n            }\n        }\n        this._measureVersion++;\n        this._events.on(window, 'resize', this._onAsyncResize);\n        if (this._root.current) {\n            this._events.on(this._root.current, 'focus', this._onFocus, true);\n        }\n        if (this._scrollElement) {\n            this._events.on(this._scrollElement, 'scroll', this._onScroll);\n            this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n        }\n    };\n    List.prototype.componentDidUpdate = function (previousProps, previousState) {\n        // Multiple updates may have been queued, so the callback will reflect all of them.\n        // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n        var finalProps = this.props;\n        var finalState = this.state;\n        if (this.state.pagesVersion !== previousState.pagesVersion) {\n            // If we weren't provided with the page height, measure the pages\n            if (!finalProps.getPageHeight) {\n                // If measured version is invalid since we've updated the DOM\n                var heightsChanged = this._updatePageMeasurements(finalState.pages);\n                if (heightsChanged) {\n                    this._materializedRect = null;\n                    this._onAsyncScroll();\n                }\n                else {\n                    // Enqueue an idle bump.\n                    this._onAsyncIdle();\n                }\n            }\n            else {\n                // Enqueue an idle bump\n                this._onAsyncIdle();\n            }\n            // Notify the caller that rendering the new pages has completed\n            if (finalProps.onPagesUpdated) {\n                finalProps.onPagesUpdated(finalState.pages);\n            }\n        }\n    };\n    List.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n        this._events.dispose();\n        delete this._scrollElement;\n    };\n    List.prototype.shouldComponentUpdate = function (newProps, newState) {\n        var oldPages = this.state.pages;\n        var newPages = newState.pages;\n        var shouldComponentUpdate = false;\n        // Update if the page stops scrolling\n        if (!newState.isScrolling && this.state.isScrolling) {\n            return true;\n        }\n        if (newProps.version !== this.props.version) {\n            return true;\n        }\n        if (newProps.className !== this.props.className) {\n            return true;\n        }\n        if (newProps.items === this.props.items && oldPages.length === newPages.length) {\n            for (var i = 0; i < oldPages.length; i++) {\n                var oldPage = oldPages[i];\n                var newPage = newPages[i];\n                if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n                    shouldComponentUpdate = true;\n                    break;\n                }\n            }\n        }\n        else {\n            shouldComponentUpdate = true;\n        }\n        return shouldComponentUpdate;\n    };\n    List.prototype.forceUpdate = function () {\n        this._invalidatePageCache();\n        // Ensure that when the list is force updated we update the pages first before render.\n        this._updateRenderRects(this.props, this.state, true);\n        this.setState(this._updatePages(this.props, this.state));\n        this._measureVersion++;\n        _super.prototype.forceUpdate.call(this);\n    };\n    /**\n     * Get the current height the list and it's pages.\n     */\n    List.prototype.getTotalListHeight = function () {\n        return this._surfaceRect.height;\n    };\n    List.prototype.render = function () {\n        var _a = this.props, className = _a.className, _b = _a.role, role = _b === void 0 ? 'list' : _b, onRenderSurface = _a.onRenderSurface, onRenderRoot = _a.onRenderRoot;\n        var _c = this.state.pages, pages = _c === void 0 ? [] : _c;\n        var pageElements = [];\n        var divProps = (0,properties/* getNativeProps */.pq)(this.props, properties/* divProperties */.n7);\n        for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {\n            var page = pages_2[_i];\n            pageElements.push(this._renderPage(page));\n        }\n        var finalOnRenderSurface = onRenderSurface\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderSurface, this._onRenderSurface)\n            : this._onRenderSurface;\n        var finalOnRenderRoot = onRenderRoot\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(onRenderRoot, this._onRenderRoot)\n            : this._onRenderRoot;\n        return finalOnRenderRoot({\n            rootRef: this._root,\n            pages: pages,\n            surfaceElement: finalOnRenderSurface({\n                surfaceRef: this._surface,\n                pages: pages,\n                pageElements: pageElements,\n                divProps: {\n                    role: 'presentation',\n                    className: 'ms-List-surface',\n                },\n            }),\n            divProps: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, divProps), { className: (0,css/* css */.i)('ms-List', className), role: pageElements.length > 0 ? role : undefined, 'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined }),\n        });\n    };\n    List.prototype._shouldVirtualize = function (props) {\n        if (props === void 0) { props = this.props; }\n        var onShouldVirtualize = props.onShouldVirtualize;\n        return !onShouldVirtualize || onShouldVirtualize(props);\n    };\n    /**\n     * when props.items change or forceUpdate called, throw away cached pages\n     */\n    List.prototype._invalidatePageCache = function () {\n        this._pageCache = {};\n    };\n    List.prototype._renderPage = function (page) {\n        var _this = this;\n        var usePageCache = this.props.usePageCache;\n        var cachedPage;\n        // if usePageCache is set and cached page element can be found, just return cached page\n        if (usePageCache) {\n            cachedPage = this._pageCache[page.key];\n            if (cachedPage && cachedPage.pageElement) {\n                return cachedPage.pageElement;\n            }\n        }\n        var pageStyle = this._getPageStyle(page);\n        var _a = this.props.onRenderPage, onRenderPage = _a === void 0 ? this._onRenderPage : _a;\n        var pageElement = onRenderPage({\n            page: page,\n            className: 'ms-List-page',\n            key: page.key,\n            ref: function (newRef) {\n                _this._pageRefs[page.key] = newRef;\n            },\n            style: pageStyle,\n            role: 'presentation',\n        }, this._onRenderPage);\n        // cache the first page for now since it is re-rendered a lot times unnecessarily.\n        // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n        // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n        // first 30 items did not change, we still re-rendered all of them in this props.items change.\n        if (usePageCache && page.startIndex === 0) {\n            this._pageCache[page.key] = {\n                page: page,\n                pageElement: pageElement,\n            };\n        }\n        return pageElement;\n    };\n    /** Generate the style object for the page. */\n    List.prototype._getPageStyle = function (page) {\n        var getPageStyle = this.props.getPageStyle;\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, (getPageStyle ? getPageStyle(page) : {})), (!page.items\n            ? {\n                height: page.height,\n            }\n            : {}));\n    };\n    /** Track the last item index focused so that we ensure we keep it rendered. */\n    List.prototype._onFocus = function (ev) {\n        var target = ev.target;\n        while (target !== this._surface.current) {\n            var indexString = target.getAttribute('data-list-index');\n            if (indexString) {\n                this._focusedIndex = Number(indexString);\n                break;\n            }\n            target = (0,getParent/* getParent */.G)(target);\n        }\n    };\n    /**\n     * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n     * we will call onAsyncIdle which will reset it back to it's correct value.\n     */\n    List.prototype._onScroll = function () {\n        if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n            this.setState({ isScrolling: true });\n        }\n        this._resetRequiredWindows();\n        this._onScrollingDone();\n    };\n    List.prototype._resetRequiredWindows = function () {\n        this._requiredWindowsAhead = 0;\n        this._requiredWindowsBehind = 0;\n    };\n    /**\n     * Debounced method to asynchronously update the visible region on a scroll event.\n     */\n    List.prototype._onAsyncScroll = function () {\n        this._updateRenderRects(this.props, this.state);\n        // Only update pages when the visible rect falls outside of the materialized rect.\n        if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {\n            this.setState(this._updatePages(this.props, this.state));\n        }\n        else {\n            // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n        }\n    };\n    /**\n     * This is an async debounced method that will try and increment the windows we render. If we can increment\n     * either, we increase the amount we render and re-evaluate.\n     */\n    List.prototype._onAsyncIdle = function () {\n        var _a = this.props, renderedWindowsAhead = _a.renderedWindowsAhead, renderedWindowsBehind = _a.renderedWindowsBehind;\n        var _b = this, requiredWindowsAhead = _b._requiredWindowsAhead, requiredWindowsBehind = _b._requiredWindowsBehind;\n        var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);\n        var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);\n        if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n            // console.log('idling', windowsBehind, windowsAhead);\n            this._requiredWindowsAhead = windowsAhead;\n            this._requiredWindowsBehind = windowsBehind;\n            this._updateRenderRects(this.props, this.state);\n            this.setState(this._updatePages(this.props, this.state));\n        }\n        if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {\n            // Async increment on next tick.\n            this._onAsyncIdle();\n        }\n    };\n    /**\n     * Function to call when the list is done scrolling.\n     * This function is debounced.\n     */\n    List.prototype._onScrollingDone = function () {\n        if (!this.props.ignoreScrollingState) {\n            this.setState({ isScrolling: false });\n        }\n    };\n    List.prototype._onAsyncResize = function () {\n        this.forceUpdate();\n    };\n    List.prototype._updatePages = function (nextProps, previousState) {\n        // console.log('updating pages');\n        if (!this._requiredRect) {\n            this._updateRenderRects(nextProps, previousState);\n        }\n        var newListState = this._buildPages(nextProps, previousState);\n        var oldListPages = previousState.pages;\n        this._notifyPageChanges(oldListPages, newListState.pages, this.props);\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, previousState), newListState), { pagesVersion: {} });\n    };\n    /**\n     * Notify consumers that the rendered pages have changed\n     * @param oldPages - The old pages\n     * @param newPages - The new pages\n     * @param props - The props to use\n     */\n    List.prototype._notifyPageChanges = function (oldPages, newPages, props) {\n        var onPageAdded = props.onPageAdded, onPageRemoved = props.onPageRemoved;\n        if (onPageAdded || onPageRemoved) {\n            var renderedIndexes = {};\n            for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {\n                var page = oldPages_1[_i];\n                if (page.items) {\n                    renderedIndexes[page.startIndex] = page;\n                }\n            }\n            for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {\n                var page = newPages_1[_a];\n                if (page.items) {\n                    if (!renderedIndexes[page.startIndex]) {\n                        this._onPageAdded(page);\n                    }\n                    else {\n                        delete renderedIndexes[page.startIndex];\n                    }\n                }\n            }\n            for (var index in renderedIndexes) {\n                if (renderedIndexes.hasOwnProperty(index)) {\n                    this._onPageRemoved(renderedIndexes[index]);\n                }\n            }\n        }\n    };\n    List.prototype._updatePageMeasurements = function (pages) {\n        var heightChanged = false;\n        // when not in virtualize mode, we render all the items without page measurement\n        if (!this._shouldVirtualize()) {\n            return heightChanged;\n        }\n        for (var i = 0; i < pages.length; i++) {\n            var page = pages[i];\n            if (page.items) {\n                heightChanged = this._measurePage(page) || heightChanged;\n            }\n        }\n        return heightChanged;\n    };\n    /**\n     * Given a page, measure its dimensions, update cache.\n     * @returns True if the height has changed.\n     */\n    List.prototype._measurePage = function (page) {\n        var hasChangedHeight = false;\n        var pageElement = this._pageRefs[page.key];\n        var cachedHeight = this._cachedPageHeights[page.startIndex];\n        // console.log('   * measure attempt', page.startIndex, cachedHeight);\n        if (pageElement &&\n            this._shouldVirtualize() &&\n            (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\n            var newClientRect = {\n                width: pageElement.clientWidth,\n                height: pageElement.clientHeight,\n            };\n            if (newClientRect.height || newClientRect.width) {\n                hasChangedHeight = page.height !== newClientRect.height;\n                // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n                page.height = newClientRect.height;\n                this._cachedPageHeights[page.startIndex] = {\n                    height: newClientRect.height,\n                    measureVersion: this._measureVersion,\n                };\n                this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));\n                this._totalEstimates++;\n            }\n        }\n        return hasChangedHeight;\n    };\n    /** Called when a page has been added to the DOM. */\n    List.prototype._onPageAdded = function (page) {\n        var onPageAdded = this.props.onPageAdded;\n        // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n        if (onPageAdded) {\n            onPageAdded(page);\n        }\n    };\n    /** Called when a page has been removed from the DOM. */\n    List.prototype._onPageRemoved = function (page) {\n        var onPageRemoved = this.props.onPageRemoved;\n        // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n        if (onPageRemoved) {\n            onPageRemoved(page);\n        }\n    };\n    /** Build up the pages that should be rendered. */\n    List.prototype._buildPages = function (props, state) {\n        var renderCount = props.renderCount;\n        var items = props.items, startIndex = props.startIndex, getPageHeight = props.getPageHeight;\n        renderCount = this._getRenderCount(props);\n        var materializedRect = (0,tslib_es6/* __assign */.pi)({}, EMPTY_RECT);\n        var pages = [];\n        var itemsPerPage = 1;\n        var pageTop = 0;\n        var currentSpacer = null;\n        var focusedIndex = this._focusedIndex;\n        var endIndex = startIndex + renderCount;\n        var shouldVirtualize = this._shouldVirtualize(props);\n        // First render is very important to track; when we render cells, we have no idea of estimated page height.\n        // So we should default to rendering only the first page so that we can get information.\n        // However if the user provides a measure function, let's just assume they know the right heights.\n        var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n        var allowedRect = this._allowedRect;\n        var _loop_1 = function (itemIndex) {\n            var pageSpecification = this_1._getPageSpecification(props, itemIndex, allowedRect);\n            var pageHeight = pageSpecification.height;\n            var pageData = pageSpecification.data;\n            var key = pageSpecification.key;\n            itemsPerPage = pageSpecification.itemCount;\n            var pageBottom = pageTop + pageHeight - 1;\n            var isPageRendered = (0,array/* findIndex */.cx)(state.pages, function (page) { return !!page.items && page.startIndex === itemIndex; }) > -1;\n            var isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom);\n            var isPageInRequiredRange = !this_1._requiredRect || (pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom);\n            var isPageVisible = (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n            var isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n            var isFirstPage = itemIndex === startIndex;\n            // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n            // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n            // Only render whats visible, focused, or first page,\n            // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n            if (isPageVisible || isPageFocused || isFirstPage) {\n                if (currentSpacer) {\n                    pages.push(currentSpacer);\n                    currentSpacer = null;\n                }\n                var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n                var newPage = this_1._createPage(key, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);\n                newPage.top = pageTop;\n                newPage.height = pageHeight;\n                if (this_1._visibleRect && this_1._visibleRect.bottom) {\n                    newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;\n                }\n                pages.push(newPage);\n                if (isPageInRequiredRange && this_1._allowedRect) {\n                    _mergeRect(materializedRect, {\n                        top: pageTop,\n                        bottom: pageBottom,\n                        height: pageHeight,\n                        left: allowedRect.left,\n                        right: allowedRect.right,\n                        width: allowedRect.width,\n                    });\n                }\n            }\n            else {\n                if (!currentSpacer) {\n                    currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex, undefined, itemIndex, 0, undefined, pageData, true /*isSpacer*/);\n                }\n                currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n                currentSpacer.itemCount += itemsPerPage;\n            }\n            pageTop += pageBottom - pageTop + 1;\n            // in virtualized mode, we render need to render first page then break and measure,\n            // otherwise, we render all items without measurement to make rendering fast\n            if (isFirstRender && shouldVirtualize) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n            var state_1 = _loop_1(itemIndex);\n            if (state_1 === \"break\")\n                break;\n        }\n        if (currentSpacer) {\n            currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n            pages.push(currentSpacer);\n        }\n        this._materializedRect = materializedRect;\n        // console.log('materialized: ', materializedRect);\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, state), { pages: pages, measureVersion: this._measureVersion });\n    };\n    List.prototype._getPageSpecification = function (props, itemIndex, visibleRect) {\n        var getPageSpecification = props.getPageSpecification;\n        if (getPageSpecification) {\n            var pageData = getPageSpecification(itemIndex, visibleRect);\n            var _a = pageData.itemCount, itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;\n            var _b = pageData.height, height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;\n            return {\n                itemCount: itemCount,\n                height: height,\n                data: pageData.data,\n                key: pageData.key,\n            };\n        }\n        else {\n            var itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n            return {\n                itemCount: itemCount,\n                height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n            };\n        }\n    };\n    /**\n     * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n     * cached height, or estimated page height, or default page height.\n     */\n    List.prototype._getPageHeight = function (itemIndex, visibleRect, itemsPerPage) {\n        if (this.props.getPageHeight) {\n            return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n        }\n        else {\n            var cachedHeight = this._cachedPageHeights[itemIndex];\n            return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n        }\n    };\n    List.prototype._getItemCountForPage = function (itemIndex, visibileRect) {\n        var itemsPerPage = this.props.getItemCountForPage\n            ? this.props.getItemCountForPage(itemIndex, visibileRect)\n            : DEFAULT_ITEMS_PER_PAGE;\n        return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n    };\n    List.prototype._createPage = function (pageKey, items, startIndex, count, style, data, isSpacer) {\n        if (startIndex === void 0) { startIndex = -1; }\n        if (count === void 0) { count = items ? items.length : 0; }\n        if (style === void 0) { style = {}; }\n        pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n        var cachedPage = this._pageCache[pageKey];\n        if (cachedPage && cachedPage.page) {\n            return cachedPage.page;\n        }\n        return {\n            key: pageKey,\n            startIndex: startIndex,\n            itemCount: count,\n            items: items,\n            style: style,\n            top: 0,\n            height: 0,\n            data: data,\n            isSpacer: isSpacer || false,\n        };\n    };\n    List.prototype._getRenderCount = function (props) {\n        var _a = props || this.props, items = _a.items, startIndex = _a.startIndex, renderCount = _a.renderCount;\n        return renderCount === undefined ? (items ? items.length - startIndex : 0) : renderCount;\n    };\n    /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n    List.prototype._updateRenderRects = function (props, state, forceUpdate) {\n        var renderedWindowsAhead = props.renderedWindowsAhead, renderedWindowsBehind = props.renderedWindowsBehind;\n        var pages = state.pages;\n        // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n        if (!this._shouldVirtualize(props)) {\n            return;\n        }\n        var surfaceRect = this._surfaceRect || (0,tslib_es6/* __assign */.pi)({}, EMPTY_RECT);\n        var scrollHeight = getScrollHeight(this._scrollElement);\n        var scrollTop = getScrollYPosition(this._scrollElement);\n        // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n        // This needs to be called to recalculate when new pages should be loaded.\n        // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n        if (this._surface.current &&\n            (forceUpdate ||\n                !pages ||\n                !this._surfaceRect ||\n                !scrollHeight ||\n                scrollHeight !== this._scrollHeight ||\n                Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {\n            surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n            this._scrollTop = scrollTop;\n        }\n        // If the scroll height has changed, something in the container likely resized and\n        // we should redo the page heights incase their content resized.\n        if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n            this._measureVersion++;\n        }\n        this._scrollHeight = scrollHeight || 0;\n        // If the surface is above the container top or below the container bottom, or if this is not the first\n        // render return empty rect.\n        // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n        // used to calculate the width of the list items.\n        var visibleTop = Math.max(0, -surfaceRect.top);\n        var win = (0,getWindow/* getWindow */.J)(this._root.current);\n        var visibleRect = {\n            top: visibleTop,\n            left: surfaceRect.left,\n            bottom: visibleTop + win.innerHeight,\n            right: surfaceRect.right,\n            width: surfaceRect.width,\n            height: win.innerHeight,\n        };\n        // The required/allowed rects are adjusted versions of the visible rect.\n        this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n        this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);\n        // store the visible rect for later use.\n        this._visibleRect = visibleRect;\n    };\n    List.defaultProps = {\n        startIndex: 0,\n        onRenderCell: function (item, index, containsFocus) { return react.createElement(react.Fragment, null, (item && item.name) || ''); },\n        onRenderCellConditional: undefined,\n        renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n        renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n    };\n    return List;\n}(react.Component));\n\nfunction _expandRect(rect, pagesBefore, pagesAfter) {\n    var top = rect.top - pagesBefore * rect.height;\n    var height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n    return {\n        top: top,\n        bottom: top + height,\n        height: height,\n        left: rect.left,\n        right: rect.right,\n        width: rect.width,\n    };\n}\nfunction _isContainedWithin(innerRect, outerRect) {\n    return (innerRect.top >= outerRect.top &&\n        innerRect.left >= outerRect.left &&\n        innerRect.bottom <= outerRect.bottom &&\n        innerRect.right <= outerRect.right);\n}\nfunction _mergeRect(targetRect, newRect) {\n    targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n    targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n    targetRect.bottom =\n        newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n    targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;\n    targetRect.width = targetRect.right - targetRect.left + 1;\n    targetRect.height = targetRect.bottom - targetRect.top + 1;\n    return targetRect;\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupedListSection.js\n\n\n\n\n\n\n\n\nvar GroupedListSection_DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar GroupedListSection = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(GroupedListSection, _super);\n    function GroupedListSection(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._list = react.createRef();\n        _this._subGroupRefs = {};\n        _this._droppingClassName = '';\n        _this._onRenderGroupHeader = function (props) {\n            return react.createElement(GroupHeader, (0,tslib_es6/* __assign */.pi)({}, props));\n        };\n        _this._onRenderGroupShowAll = function (props) {\n            return react.createElement(GroupShowAll, (0,tslib_es6/* __assign */.pi)({}, props));\n        };\n        _this._onRenderGroupFooter = function (props) {\n            return react.createElement(GroupFooter, (0,tslib_es6/* __assign */.pi)({}, props));\n        };\n        _this._renderSubGroup = function (subGroup, subGroupIndex) {\n            var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, getGroupItemLimit = _a.getGroupItemLimit, groupNestingDepth = _a.groupNestingDepth, groupProps = _a.groupProps, items = _a.items, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selection = _a.selection, selectionMode = _a.selectionMode, viewport = _a.viewport, onRenderGroupHeader = _a.onRenderGroupHeader, onRenderGroupShowAll = _a.onRenderGroupShowAll, onRenderGroupFooter = _a.onRenderGroupFooter, onShouldVirtualize = _a.onShouldVirtualize, group = _a.group, compact = _a.compact;\n            var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n            return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (react.createElement(GroupedListSection, { ref: function (ref) { return (_this._subGroupRefs['subGroup_' + subGroupIndex] = ref); }, key: _this._getGroupKey(subGroup, subGroupIndex), dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: eventsToRegister, footerProps: footerProps, getGroupItemLimit: getGroupItemLimit, group: subGroup, groupIndex: subGroupIndex, groupNestingDepth: nestingDepth, groupProps: groupProps, headerProps: headerProps, items: items, listProps: listProps, onRenderCell: onRenderCell, selection: selection, selectionMode: selectionMode, showAllProps: showAllProps, viewport: viewport, onRenderGroupHeader: onRenderGroupHeader, onRenderGroupShowAll: onRenderGroupShowAll, onRenderGroupFooter: onRenderGroupFooter, onShouldVirtualize: onShouldVirtualize, groups: group ? group.children : [], compact: compact })) : null;\n        };\n        /**\n         * collect all the data we need to enable drag/drop for a group\n         */\n        _this._getGroupDragDropOptions = function () {\n            var _a = _this.props, group = _a.group, groupIndex = _a.groupIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;\n            var options = {\n                eventMap: eventsToRegister,\n                selectionIndex: -1,\n                context: { data: group, index: groupIndex, isGroup: true },\n                updateDropState: _this._updateDroppingState,\n                canDrag: dragDropEvents.canDrag,\n                canDrop: dragDropEvents.canDrop,\n                onDrop: dragDropEvents.onDrop,\n                onDragStart: dragDropEvents.onDragStart,\n                onDragEnter: dragDropEvents.onDragEnter,\n                onDragLeave: dragDropEvents.onDragLeave,\n                onDragEnd: dragDropEvents.onDragEnd,\n                onDragOver: dragDropEvents.onDragOver,\n            };\n            return options;\n        };\n        /**\n         * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n         *\n         * @param newValue - new isDropping state value\n         * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n         */\n        _this._updateDroppingState = function (newIsDropping, event) {\n            var isDropping = _this.state.isDropping;\n            var _a = _this.props, dragDropEvents = _a.dragDropEvents, group = _a.group;\n            if (isDropping !== newIsDropping) {\n                if (isDropping) {\n                    if (dragDropEvents && dragDropEvents.onDragLeave) {\n                        dragDropEvents.onDragLeave(group, event);\n                    }\n                }\n                else {\n                    if (dragDropEvents && dragDropEvents.onDragEnter) {\n                        _this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n                    }\n                }\n                _this.setState({ isDropping: newIsDropping });\n            }\n        };\n        var selection = props.selection, group = props.group;\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._id = (0,getId/* getId */.z)('GroupedListSection');\n        _this.state = {\n            isDropping: false,\n            isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n        };\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        return _this;\n    }\n    GroupedListSection.prototype.componentDidMount = function () {\n        var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection;\n        if (dragDropHelper && this._root.current) {\n            this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n        }\n        if (selection) {\n            this._events.on(selection, Selection_types/* SELECTION_CHANGE */.F5, this._onSelectionChange);\n        }\n    };\n    GroupedListSection.prototype.componentWillUnmount = function () {\n        this._events.dispose();\n        if (this._dragDropSubscription) {\n            this._dragDropSubscription.dispose();\n        }\n    };\n    GroupedListSection.prototype.componentDidUpdate = function (previousProps) {\n        if (this.props.group !== previousProps.group ||\n            this.props.groupIndex !== previousProps.groupIndex ||\n            this.props.dragDropHelper !== previousProps.dragDropHelper) {\n            if (this._dragDropSubscription) {\n                this._dragDropSubscription.dispose();\n                delete this._dragDropSubscription;\n            }\n            if (this.props.dragDropHelper && this._root.current) {\n                this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n            }\n        }\n    };\n    GroupedListSection.prototype.render = function () {\n        var _a = this.props, getGroupItemLimit = _a.getGroupItemLimit, group = _a.group, groupIndex = _a.groupIndex, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, viewport = _a.viewport, selectionMode = _a.selectionMode, _b = _a.onRenderGroupHeader, onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b, _c = _a.onRenderGroupShowAll, onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c, _d = _a.onRenderGroupFooter, onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d, onShouldVirtualize = _a.onShouldVirtualize, groupedListClassNames = _a.groupedListClassNames, groups = _a.groups, compact = _a.compact, _e = _a.listProps, listProps = _e === void 0 ? {} : _e;\n        var isSelected = this.state.isSelected;\n        var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n        var isShowAllVisible = group &&\n            !group.children &&\n            !group.isCollapsed &&\n            !group.isShowingAll &&\n            (group.count > renderCount || group.hasMoreData);\n        var hasNestedGroups = group && group.children && group.children.length > 0;\n        var version = listProps.version;\n        var dividerProps = {\n            group: group,\n            groupIndex: groupIndex,\n            groupLevel: group ? group.level : 0,\n            isSelected: isSelected,\n            selected: isSelected,\n            viewport: viewport,\n            selectionMode: selectionMode,\n            groups: groups,\n            compact: compact,\n        };\n        var ariaControlsProps = {\n            groupedListId: this._id,\n            ariaLevel: (group === null || group === void 0 ? void 0 : group.level) ? group.level + 1 : 1,\n            ariaSetSize: groups ? groups.length : undefined,\n            ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n        };\n        var groupHeaderProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, headerProps), dividerProps), ariaControlsProps);\n        var groupShowAllProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, showAllProps), dividerProps);\n        var groupFooterProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, footerProps), dividerProps);\n        var isDraggable = !!this.props.dragDropHelper &&\n            this._getGroupDragDropOptions().canDrag(group) &&\n            !!this.props.dragDropEvents.canDragGroups;\n        return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ ref: this._root }, (isDraggable && { draggable: true }), { className: (0,css/* css */.i)(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()), role: \"presentation\" }),\n            onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader),\n            group && group.isCollapsed ? null : hasNestedGroups ? (react.createElement(List, { role: \"presentation\", ref: this._list, items: group ? group.children : [], onRenderCell: this._renderSubGroup, getItemCountForPage: this._returnOne, onShouldVirtualize: onShouldVirtualize, version: version, id: this._id })) : (this._onRenderGroup(renderCount)),\n            group && group.isCollapsed\n                ? null\n                : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll),\n            onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)));\n    };\n    GroupedListSection.prototype.forceUpdate = function () {\n        _super.prototype.forceUpdate.call(this);\n        this.forceListUpdate();\n    };\n    GroupedListSection.prototype.forceListUpdate = function () {\n        var group = this.props.group;\n        if (this._list.current) {\n            this._list.current.forceUpdate();\n            if (group && group.children && group.children.length > 0) {\n                var subGroupCount = group.children.length;\n                for (var i = 0; i < subGroupCount; i++) {\n                    var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];\n                    if (subGroup) {\n                        subGroup.forceListUpdate();\n                    }\n                }\n            }\n        }\n        else {\n            var subGroup = this._subGroupRefs['subGroup_' + String(0)];\n            if (subGroup) {\n                subGroup.forceListUpdate();\n            }\n        }\n    };\n    GroupedListSection.prototype._onSelectionChange = function () {\n        var _a = this.props, group = _a.group, selection = _a.selection;\n        if (selection && group) {\n            var isSelected = selection.isRangeSelected(group.startIndex, group.count);\n            if (isSelected !== this.state.isSelected) {\n                this.setState({ isSelected: isSelected });\n            }\n        }\n    };\n    GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth, group) {\n        return function (item, itemIndex) {\n            return onRenderCell(groupNestingDepth, item, itemIndex, group);\n        };\n    };\n    GroupedListSection.prototype._onRenderGroup = function (renderCount) {\n        var _a = this.props, group = _a.group, items = _a.items, onRenderCell = _a.onRenderCell, listProps = _a.listProps, groupNestingDepth = _a.groupNestingDepth, onShouldVirtualize = _a.onShouldVirtualize, groupProps = _a.groupProps;\n        var count = group && !group.isShowingAll ? group.count : items.length;\n        var startIndex = group ? group.startIndex : 0;\n        return (react.createElement(List, (0,tslib_es6/* __assign */.pi)({ role: groupProps && groupProps.role ? groupProps.role : 'rowgroup', \"aria-label\": group === null || group === void 0 ? void 0 : group.name, items: items, onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth, group), ref: this._list, renderCount: Math.min(count, renderCount), startIndex: startIndex, onShouldVirtualize: onShouldVirtualize, id: this._id }, listProps)));\n    };\n    GroupedListSection.prototype._returnOne = function () {\n        return 1;\n    };\n    GroupedListSection.prototype._getGroupKey = function (group, index) {\n        return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n    };\n    /**\n     * get the correct css class to reflect the dropping state for a given group\n     *\n     * If the group is the current drop target, return the default dropping class name\n     * Otherwise, return '';\n     *\n     */\n    GroupedListSection.prototype._getDroppingClassName = function () {\n        var isDropping = this.state.isDropping;\n        var _a = this.props, group = _a.group, groupedListClassNames = _a.groupedListClassNames;\n        isDropping = !!(group && isDropping);\n        return (0,css/* css */.i)(isDropping && this._droppingClassName, isDropping && GroupedListSection_DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n    };\n    return GroupedListSection;\n}(react.Component));\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.base.js\n\n\n\n\n\n\n\n\nvar GroupedList_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight, COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\nvar GroupedListBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(GroupedListBase, _super);\n    function GroupedListBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._list = react.createRef();\n        _this._renderGroup = function (group, groupIndex) {\n            var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, groupProps = _a.groupProps, items = _a.items, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selectionMode = _a.selectionMode, selection = _a.selection, viewport = _a.viewport, onShouldVirtualize = _a.onShouldVirtualize, groups = _a.groups, compact = _a.compact;\n            // override group header/footer props as needed\n            var dividerProps = {\n                onToggleSelectGroup: _this._onToggleSelectGroup,\n                onToggleCollapse: _this._onToggleCollapse,\n                onToggleSummarize: _this._onToggleSummarize,\n            };\n            var headerProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupProps.headerProps), dividerProps);\n            var showAllProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupProps.showAllProps), dividerProps);\n            var footerProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupProps.footerProps), dividerProps);\n            var groupNestingDepth = _this._getGroupNestingDepth();\n            if (!groupProps.showEmptyGroups && group && group.count === 0) {\n                return null;\n            }\n            var finalListProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, (listProps || {})), { version: _this.state.version });\n            return (react.createElement(GroupedListSection, { key: _this._getGroupKey(group, groupIndex), dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: eventsToRegister, footerProps: footerProps, getGroupItemLimit: groupProps && groupProps.getGroupItemLimit, group: group, groupIndex: groupIndex, groupNestingDepth: groupNestingDepth, groupProps: groupProps, headerProps: headerProps, listProps: finalListProps, items: items, onRenderCell: onRenderCell, onRenderGroupHeader: groupProps.onRenderHeader, onRenderGroupShowAll: groupProps.onRenderShowAll, onRenderGroupFooter: groupProps.onRenderFooter, selectionMode: selectionMode, selection: selection, showAllProps: showAllProps, viewport: viewport, onShouldVirtualize: onShouldVirtualize, groupedListClassNames: _this._classNames, groups: groups, compact: compact }));\n        };\n        _this._getDefaultGroupItemLimit = function (group) {\n            return group.children && group.children.length > 0 ? group.children.length : group.count;\n        };\n        _this._getGroupItemLimit = function (group) {\n            var groupProps = _this.props.groupProps;\n            var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n            return getGroupItemLimit(group);\n        };\n        _this._getGroupHeight = function (group) {\n            var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n            return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n        };\n        _this._getPageHeight = function (itemIndex) {\n            var groups = _this.state.groups;\n            var _a = _this.props.getGroupHeight, getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n            var pageGroup = groups && groups[itemIndex];\n            if (pageGroup) {\n                return getGroupHeight(pageGroup, itemIndex);\n            }\n            else {\n                return 0;\n            }\n        };\n        _this._onToggleCollapse = function (group) {\n            var groupProps = _this.props.groupProps;\n            var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n            if (group) {\n                if (onToggleCollapse) {\n                    onToggleCollapse(group);\n                }\n                group.isCollapsed = !group.isCollapsed;\n                _this._updateIsSomeGroupExpanded();\n                _this.forceUpdate();\n            }\n        };\n        _this._onToggleSelectGroup = function (group) {\n            var _a = _this.props, selection = _a.selection, selectionMode = _a.selectionMode;\n            if (group && selection && selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple) {\n                selection.toggleRangeSelected(group.startIndex, group.count);\n            }\n        };\n        _this._isInnerZoneKeystroke = function (ev) {\n            // eslint-disable-next-line deprecation/deprecation\n            return ev.which === (0,rtl/* getRTLSafeKeyCode */.dP)(KeyCodes/* KeyCodes.right */.m.right);\n        };\n        _this._onToggleSummarize = function (group) {\n            var groupProps = _this.props.groupProps;\n            var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n            if (onToggleSummarize) {\n                onToggleSummarize(group);\n            }\n            else {\n                if (group) {\n                    group.isShowingAll = !group.isShowingAll;\n                }\n                _this.forceUpdate();\n            }\n        };\n        _this._getPageSpecification = function (itemIndex) {\n            var groups = _this.state.groups;\n            var pageGroup = groups && groups[itemIndex];\n            return {\n                key: pageGroup && pageGroup.key,\n            };\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n        var _a = props.listProps, _b = _a === void 0 ? {} : _a, _c = _b.version, version = _c === void 0 ? {} : _c;\n        _this.state = {\n            groups: props.groups,\n            items: props.items,\n            listProps: props.listProps,\n            version: version,\n        };\n        return _this;\n    }\n    GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n        var groups = nextProps.groups, selectionMode = nextProps.selectionMode, compact = nextProps.compact, items = nextProps.items, listProps = nextProps.listProps;\n        var listVersion = listProps && listProps.version;\n        var nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, previousState), { selectionMode: selectionMode, compact: compact, groups: groups, listProps: listProps, items: items });\n        var shouldForceUpdates = false;\n        var previousListVersion = previousState.listProps && previousState.listProps.version;\n        if (listVersion !== previousListVersion ||\n            items !== previousState.items ||\n            groups !== previousState.groups ||\n            selectionMode !== previousState.selectionMode ||\n            compact !== previousState.compact) {\n            // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n            // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n            // data.\n            shouldForceUpdates = true;\n        }\n        if (shouldForceUpdates) {\n            nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, nextState), { version: {} });\n        }\n        return nextState;\n    };\n    GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n        if (this._list.current) {\n            this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n        }\n    };\n    GroupedListBase.prototype.getStartItemIndexInView = function () {\n        return this._list.current.getStartItemIndexInView() || 0;\n    };\n    GroupedListBase.prototype.componentDidMount = function () {\n        var _a = this.props, groupProps = _a.groupProps, _b = _a.groups, groups = _b === void 0 ? [] : _b;\n        if (groupProps && groupProps.isAllGroupsCollapsed) {\n            this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n        }\n    };\n    GroupedListBase.prototype.render = function () {\n        var _a = this.props, className = _a.className, usePageCache = _a.usePageCache, onShouldVirtualize = _a.onShouldVirtualize, theme = _a.theme, _b = _a.role, role = _b === void 0 ? 'treegrid' : _b, styles = _a.styles, compact = _a.compact, _c = _a.focusZoneProps, focusZoneProps = _c === void 0 ? {} : _c, _d = _a.rootListProps, rootListProps = _d === void 0 ? {} : _d;\n        var _e = this.state, groups = _e.groups, version = _e.version;\n        this._classNames = GroupedList_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            compact: compact,\n        });\n        var _f = focusZoneProps.shouldEnterInnerZone, shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n        return (react.createElement(FocusZone/* FocusZone */.k, (0,tslib_es6/* __assign */.pi)({ direction: FocusZone_types/* FocusZoneDirection.vertical */.U.vertical, \"data-automationid\": \"GroupedList\", \"data-is-scrollable\": \"false\", role: \"presentation\" }, focusZoneProps, { shouldEnterInnerZone: shouldEnterInnerZone, className: (0,css/* css */.i)(this._classNames.root, focusZoneProps.className) }), !groups ? (this._renderGroup(undefined, 0)) : (react.createElement(List, (0,tslib_es6/* __assign */.pi)({ ref: this._list, role: role, items: groups, onRenderCell: this._renderGroup, getItemCountForPage: this._returnOne, getPageHeight: this._getPageHeight, getPageSpecification: this._getPageSpecification, usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize, version: version }, rootListProps)))));\n    };\n    GroupedListBase.prototype.forceUpdate = function () {\n        _super.prototype.forceUpdate.call(this);\n        this._forceListUpdates();\n    };\n    GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n        var _a = this.state.groups, groups = _a === void 0 ? [] : _a;\n        var groupProps = this.props.groupProps;\n        var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n        if (groups.length > 0) {\n            if (onToggleCollapseAll) {\n                onToggleCollapseAll(allCollapsed);\n            }\n            this._setGroupsCollapsedState(groups, allCollapsed);\n            this._updateIsSomeGroupExpanded();\n            this.forceUpdate();\n        }\n    };\n    GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n        for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n            groups[groupIndex].isCollapsed = isCollapsed;\n        }\n    };\n    GroupedListBase.prototype._returnOne = function () {\n        return 1;\n    };\n    GroupedListBase.prototype._getGroupKey = function (group, index) {\n        return 'group-' + (group && group.key ? group.key : String(index));\n    };\n    GroupedListBase.prototype._getGroupNestingDepth = function () {\n        var groups = this.state.groups;\n        var level = 0;\n        var groupsInLevel = groups;\n        while (groupsInLevel && groupsInLevel.length > 0) {\n            level++;\n            groupsInLevel = groupsInLevel[0].children;\n        }\n        return level;\n    };\n    GroupedListBase.prototype._forceListUpdates = function (groups) {\n        this.setState({\n            version: {},\n        });\n    };\n    GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n        var _this = this;\n        return !!(groups &&\n            groups.some(function (group) { return (group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed); }));\n    };\n    GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n        var groups = this.state.groups;\n        var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n        var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n        if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n            if (onGroupExpandStateChanged) {\n                onGroupExpandStateChanged(newIsSomeGroupExpanded);\n            }\n            this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n        }\n    };\n    GroupedListBase.defaultProps = {\n        selectionMode: Selection_types/* SelectionMode.multiple */.oW.multiple,\n        isHeaderVisible: true,\n        groupProps: {},\n        compact: false,\n    };\n    return GroupedListBase;\n}(react.Component));\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.js\n\n\n\nvar GroupedList = (0,styled/* styled */.z)(GroupedListBase, GroupedList_styles_getStyles, undefined, {\n    scope: 'GroupedList',\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/decorators/BaseDecorator.js + 1 modules\nvar BaseDecorator = __webpack_require__(7725);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/getRect.js\nvar getRect = __webpack_require__(1403);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/decorators/withViewport.js\n\n\n\n\nvar withViewport_RESIZE_DELAY = 500;\nvar MAX_RESIZE_ATTEMPTS = 3;\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent - decorated React component reference.\n */\nfunction withViewport(ComposedComponent) {\n    return /** @class */ (function (_super) {\n        (0,tslib_es6/* __extends */.ZT)(WithViewportComponent, _super);\n        function WithViewportComponent(props) {\n            var _this = _super.call(this, props) || this;\n            _this._root = react.createRef();\n            _this._registerResizeObserver = function () {\n                var win = (0,getWindow/* getWindow */.J)(_this._root.current);\n                _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);\n                _this._viewportResizeObserver.observe(_this._root.current);\n            };\n            _this._unregisterResizeObserver = function () {\n                if (_this._viewportResizeObserver) {\n                    _this._viewportResizeObserver.disconnect();\n                    delete _this._viewportResizeObserver;\n                }\n            };\n            /* Note: using lambda here because decorators don't seem to work in decorators. */\n            _this._updateViewport = function (withForceUpdate) {\n                var viewport = _this.state.viewport;\n                var viewportElement = _this._root.current;\n                var scrollElement = (0,lib_scroll/* findScrollableParent */.zj)(viewportElement);\n                var scrollRect = (0,getRect/* getRect */.D)(scrollElement);\n                var clientRect = (0,getRect/* getRect */.D)(viewportElement);\n                var updateComponent = function () {\n                    if (withForceUpdate && _this._composedComponentInstance) {\n                        _this._composedComponentInstance.forceUpdate();\n                    }\n                };\n                var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;\n                if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n                    _this._resizeAttempts++;\n                    _this.setState({\n                        viewport: {\n                            width: clientRect.width,\n                            height: scrollRect.height,\n                        },\n                    }, function () {\n                        _this._updateViewport(withForceUpdate);\n                    });\n                }\n                else {\n                    _this._resizeAttempts = 0;\n                    updateComponent();\n                }\n            };\n            _this._async = new Async/* Async */.e(_this);\n            _this._events = new EventGroup/* EventGroup */.r(_this);\n            _this._resizeAttempts = 0;\n            _this.state = {\n                viewport: {\n                    width: 0,\n                    height: 0,\n                },\n            };\n            return _this;\n        }\n        WithViewportComponent.prototype.componentDidMount = function () {\n            var _this = this;\n            var _a = this.props, delayFirstMeasure = _a.delayFirstMeasure, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;\n            var win = (0,getWindow/* getWindow */.J)(this._root.current);\n            this._onAsyncResize = this._async.debounce(this._onAsyncResize, withViewport_RESIZE_DELAY, {\n                leading: false,\n            });\n            if (!skipViewportMeasures) {\n                if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n                    this._registerResizeObserver();\n                }\n                else {\n                    this._events.on(win, 'resize', this._onAsyncResize);\n                }\n                if (delayFirstMeasure) {\n                    this._async.setTimeout(function () {\n                        _this._updateViewport();\n                    }, withViewport_RESIZE_DELAY);\n                }\n                else {\n                    this._updateViewport();\n                }\n            }\n        };\n        WithViewportComponent.prototype.componentDidUpdate = function (previousProps) {\n            var previousSkipViewportMeasures = previousProps.skipViewportMeasures;\n            var _a = this.props, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;\n            var win = (0,getWindow/* getWindow */.J)(this._root.current);\n            if (skipViewportMeasures !== previousSkipViewportMeasures) {\n                if (!skipViewportMeasures) {\n                    if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n                        if (!this._viewportResizeObserver) {\n                            this._registerResizeObserver();\n                        }\n                    }\n                    else {\n                        this._events.on(win, 'resize', this._onAsyncResize);\n                    }\n                    this._updateViewport();\n                }\n                else {\n                    this._unregisterResizeObserver();\n                    this._events.off(win, 'resize', this._onAsyncResize);\n                }\n            }\n        };\n        WithViewportComponent.prototype.componentWillUnmount = function () {\n            this._events.dispose();\n            this._async.dispose();\n            this._unregisterResizeObserver();\n        };\n        WithViewportComponent.prototype.render = function () {\n            var viewport = this.state.viewport;\n            var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : undefined;\n            return (react.createElement(\"div\", { className: \"ms-Viewport\", ref: this._root, style: { minWidth: 1, minHeight: 1 } },\n                react.createElement(ComposedComponent, (0,tslib_es6/* __assign */.pi)({ ref: this._updateComposedComponentRef, viewport: newViewport }, this.props))));\n        };\n        WithViewportComponent.prototype.forceUpdate = function () {\n            this._updateViewport(true);\n        };\n        WithViewportComponent.prototype._onAsyncResize = function () {\n            this._updateViewport();\n        };\n        WithViewportComponent.prototype._isResizeObserverAvailable = function () {\n            var win = (0,getWindow/* getWindow */.J)(this._root.current);\n            return win && win.ResizeObserver;\n        };\n        return WithViewportComponent;\n    }(BaseDecorator/* BaseDecorator */.P));\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/utilities/groupedList/GroupedListUtility.js\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nvar GetGroupCount = function (groups) {\n    var total = 0;\n    if (groups) {\n        var remainingGroups = (0,tslib_es6/* __spreadArray */.ev)([], groups);\n        var currentGroup = void 0;\n        while (remainingGroups && remainingGroups.length > 0) {\n            ++total;\n            currentGroup = remainingGroups.pop();\n            if (currentGroup && currentGroup.children) {\n                remainingGroups.push.apply(remainingGroups, currentGroup.children);\n            }\n        }\n    }\n    return total;\n};\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useConst.js\nvar useConst = __webpack_require__(935);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.base.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\n\n\nvar DetailsList_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\nvar DetailsList_base_DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DetailsList_base_DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nvar DetailsListInner = function (props) {\n    var selection = props.selection;\n    var ariaLabelForListHeader = props.ariaLabelForListHeader, ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox, ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn, className = props.className, checkboxVisibility = props.checkboxVisibility, compact = props.compact, constrainMode = props.constrainMode, dragDropEvents = props.dragDropEvents, groups = props.groups, groupProps = props.groupProps, indentWidth = props.indentWidth, items = props.items, isPlaceholderData = props.isPlaceholderData, isHeaderVisible = props.isHeaderVisible, layoutMode = props.layoutMode, onItemInvoked = props.onItemInvoked, onItemContextMenu = props.onItemContextMenu, onColumnHeaderClick = props.onColumnHeaderClick, onColumnHeaderContextMenu = props.onColumnHeaderContextMenu, _a = props.selectionMode, selectionMode = _a === void 0 ? selection.mode : _a, selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick, selectionZoneProps = props.selectionZoneProps, \n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel = props.ariaLabel, ariaLabelForGrid = props.ariaLabelForGrid, rowElementEventMap = props.rowElementEventMap, \n    // eslint-disable-next-line deprecation/deprecation\n    _b = props.shouldApplyApplicationRole, \n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = _b === void 0 ? false : _b, getKey = props.getKey, listProps = props.listProps, usePageCache = props.usePageCache, onShouldVirtualize = props.onShouldVirtualize, viewport = props.viewport, minimumPixelsForDrag = props.minimumPixelsForDrag, getGroupHeight = props.getGroupHeight, styles = props.styles, theme = props.theme, _c = props.cellStyleProps, cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c, onRenderCheckbox = props.onRenderCheckbox, useFastIcons = props.useFastIcons, dragDropHelper = props.dragDropHelper, adjustedColumns = props.adjustedColumns, isCollapsed = props.isCollapsed, isSizing = props.isSizing, isSomeGroupExpanded = props.isSomeGroupExpanded, version = props.version, rootRef = props.rootRef, listRef = props.listRef, focusZoneRef = props.focusZoneRef, columnReorderOptions = props.columnReorderOptions, groupedListRef = props.groupedListRef, headerRef = props.headerRef, onGroupExpandStateChanged = props.onGroupExpandStateChanged, onColumnIsSizingChanged = props.onColumnIsSizingChanged, onRowDidMount = props.onRowDidMount, onRowWillUnmount = props.onRowWillUnmount, disableSelectionZone = props.disableSelectionZone, _d = props.isSelectedOnFocus, isSelectedOnFocus = _d === void 0 ? true : _d, onColumnResized = props.onColumnResized, onColumnAutoResized = props.onColumnAutoResized, onToggleCollapse = props.onToggleCollapse, onActiveRowChanged = props.onActiveRowChanged, onBlur = props.onBlur, eventsToRegister = props.rowElementEventMap, onRenderMissingItem = props.onRenderMissingItem, onRenderItemColumn = props.onRenderItemColumn, onRenderField = props.onRenderField, getCellValueKey = props.getCellValueKey, getRowAriaLabel = props.getRowAriaLabel, getRowAriaDescribedBy = props.getRowAriaDescribedBy, checkButtonAriaLabel = props.checkButtonAriaLabel, checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel, checkboxCellClassName = props.checkboxCellClassName, useReducedRowRenderer = props.useReducedRowRenderer, enableUpdateAnimations = props.enableUpdateAnimations, enterModalSelectionOnTouch = props.enterModalSelectionOnTouch, onRenderDefaultRow = props.onRenderDefaultRow, selectionZoneRef = props.selectionZoneRef, focusZoneProps = props.focusZoneProps;\n    var defaultRole = 'grid';\n    var role = props.role ? props.role : defaultRole;\n    var rowId = (0,getId/* getId */.z)('row');\n    var groupNestingDepth = getGroupNestingDepth(groups);\n    var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n    var additionalListProps = react.useMemo(function () {\n        return (0,tslib_es6/* __assign */.pi)({ renderedWindowsAhead: isSizing ? 0 : DetailsList_base_DEFAULT_RENDERED_WINDOWS_AHEAD, renderedWindowsBehind: isSizing ? 0 : DetailsList_base_DEFAULT_RENDERED_WINDOWS_BEHIND, getKey: getKey, version: version }, listProps);\n    }, [isSizing, getKey, version, listProps]);\n    var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n    if (selectionMode === Selection_types/* SelectionMode.single */.oW.single) {\n        selectAllVisibility = SelectAllVisibility.hidden;\n    }\n    if (selectionMode === Selection_types/* SelectionMode.multiple */.oW.multiple) {\n        // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n        var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n        if (isCollapsedGroupSelectVisible === undefined) {\n            isCollapsedGroupSelectVisible = true;\n        }\n        var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n        selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n    }\n    if (checkboxVisibility === DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden) {\n        selectAllVisibility = SelectAllVisibility.none;\n    }\n    var defaultOnRenderDetailsHeader = react.useCallback(function (detailsHeaderProps) {\n        return react.createElement(DetailsHeader, (0,tslib_es6/* __assign */.pi)({}, detailsHeaderProps));\n    }, []);\n    var defaultOnRenderDetailsFooter = react.useCallback(function () {\n        return null;\n    }, []);\n    var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n    var onRenderDetailsHeader = react.useMemo(function () {\n        return propsOnRenderDetailsHeader\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n            : defaultOnRenderDetailsHeader;\n    }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n    var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n    var onRenderDetailsFooter = react.useMemo(function () {\n        return propsOnRenderDetailsFooter\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n            : defaultOnRenderDetailsFooter;\n    }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n    var detailsFooterProps = react.useMemo(function () {\n        return {\n            columns: adjustedColumns,\n            groupNestingDepth: groupNestingDepth,\n            selection: selection,\n            selectionMode: selectionMode,\n            viewport: viewport,\n            checkboxVisibility: checkboxVisibility,\n            indentWidth: indentWidth,\n            cellStyleProps: cellStyleProps,\n        };\n    }, [\n        adjustedColumns,\n        groupNestingDepth,\n        selection,\n        selectionMode,\n        viewport,\n        checkboxVisibility,\n        indentWidth,\n        cellStyleProps,\n    ]);\n    var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n    var onColumnDragEnd = react.useCallback(function (_a, event) {\n        var dropLocation = _a.dropLocation;\n        var finalDropLocation = DetailsList_types/* ColumnDragEndLocation.outside */.fQ.outside;\n        if (columnReorderOnDragEnd) {\n            if (dropLocation && dropLocation !== DetailsList_types/* ColumnDragEndLocation.header */.fQ.header) {\n                finalDropLocation = dropLocation;\n            }\n            else if (rootRef.current) {\n                var clientRect = rootRef.current.getBoundingClientRect();\n                if (event.clientX > clientRect.left &&\n                    event.clientX < clientRect.right &&\n                    event.clientY > clientRect.top &&\n                    event.clientY < clientRect.bottom) {\n                    finalDropLocation = DetailsList_types/* ColumnDragEndLocation.surface */.fQ.surface;\n                }\n            }\n            columnReorderOnDragEnd(finalDropLocation);\n        }\n    }, [columnReorderOnDragEnd, rootRef]);\n    var columnReorderProps = react.useMemo(function () {\n        if (columnReorderOptions) {\n            return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, columnReorderOptions), { onColumnDragEnd: onColumnDragEnd });\n        }\n    }, [columnReorderOptions, onColumnDragEnd]);\n    var rowCount = (isHeaderVisible ? 1 : 0) +\n        (props.onRenderDetailsFooter ? 1 : 0) +\n        GetGroupCount(groups) +\n        (items ? items.length : 0);\n    var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n        (adjustedColumns ? adjustedColumns.length : 0) +\n        (groups ? 1 : 0);\n    var classNames = react.useMemo(function () {\n        return DetailsList_base_getClassNames(styles, {\n            theme: theme,\n            compact: compact,\n            isFixed: layoutMode === DetailsList_types/* DetailsListLayoutMode.fixedColumns */.Oh.fixedColumns,\n            isHorizontalConstrained: constrainMode === DetailsList_types/* ConstrainMode.horizontalConstrained */.ov.horizontalConstrained,\n            className: className,\n        });\n    }, [styles, theme, compact, layoutMode, constrainMode, className]);\n    var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n    var finalOnRenderDetailsGroupFooter = react.useMemo(function () {\n        return onRenderDetailsGroupFooter\n            ? function (groupFooterProps, defaultRender) {\n                return onRenderDetailsGroupFooter((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupFooterProps), { columns: adjustedColumns, groupNestingDepth: groupNestingDepth, indentWidth: indentWidth, selection: selection, selectionMode: selectionMode, viewport: viewport, checkboxVisibility: checkboxVisibility, cellStyleProps: cellStyleProps }), defaultRender);\n            }\n            : undefined;\n    }, [\n        onRenderDetailsGroupFooter,\n        adjustedColumns,\n        groupNestingDepth,\n        indentWidth,\n        selection,\n        selectionMode,\n        viewport,\n        checkboxVisibility,\n        cellStyleProps,\n    ]);\n    var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n    var finalOnRenderDetailsGroupHeader = react.useMemo(function () {\n        return onRenderDetailsGroupHeader\n            ? function (groupHeaderProps, defaultRender) {\n                var _a, _b;\n                var groupIndex = groupHeaderProps.groupIndex;\n                var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n                var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n                    ? groupedDetailsListIndexMap[groupKey].totalRowCount\n                    : 0;\n                return onRenderDetailsGroupHeader((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupHeaderProps), { columns: adjustedColumns, groupNestingDepth: groupNestingDepth, indentWidth: indentWidth, selection: selection, selectionMode: checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden ? selectionMode : Selection_types/* SelectionMode.none */.oW.none, viewport: viewport, checkboxVisibility: checkboxVisibility, cellStyleProps: cellStyleProps, ariaColSpan: adjustedColumns.length, ariaLevel: undefined, ariaPosInSet: undefined, ariaSetSize: undefined, ariaRowCount: undefined, ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined }), defaultRender);\n            }\n            : function (groupHeaderProps, defaultRender) {\n                var _a, _b;\n                var groupIndex = groupHeaderProps.groupIndex;\n                var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n                var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n                    ? groupedDetailsListIndexMap[groupKey].totalRowCount\n                    : 0;\n                return defaultRender((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupHeaderProps), { ariaColSpan: adjustedColumns.length, ariaLevel: undefined, ariaPosInSet: undefined, ariaSetSize: undefined, ariaRowCount: undefined, ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined }));\n            };\n    }, [\n        onRenderDetailsGroupHeader,\n        adjustedColumns,\n        groupNestingDepth,\n        indentWidth,\n        isHeaderVisible,\n        selection,\n        selectionMode,\n        viewport,\n        checkboxVisibility,\n        cellStyleProps,\n        groupedDetailsListIndexMap,\n    ]);\n    var finalGroupProps = react.useMemo(function () {\n        var _a;\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupProps), { role: role === defaultRole ? 'rowgroup' : 'presentation', onRenderFooter: finalOnRenderDetailsGroupFooter, onRenderHeader: finalOnRenderDetailsGroupHeader, \n            // pass through custom group header checkbox label\n            headerProps: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), { selectAllButtonProps: (0,tslib_es6/* __assign */.pi)({ 'aria-label': checkButtonGroupAriaLabel }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps) }) });\n    }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n    var sumColumnWidths = (0,useConst/* useConst */.B)(function () {\n        return (0,memoize/* memoizeFunction */.NF)(function (columns) {\n            var totalWidth = 0;\n            columns.forEach(function (column) { return (totalWidth += column.calculatedWidth || column.minWidth); });\n            return totalWidth;\n        });\n    });\n    var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n    var rowWidth = react.useMemo(function () {\n        return sumColumnWidths(adjustedColumns);\n    }, [adjustedColumns, sumColumnWidths]);\n    var onRenderCell = react.useCallback(function (nestingDepth, item, index, group) {\n        var finalOnRenderRow = props.onRenderRow\n            ? (0,composeRenderFunction/* composeRenderFunction */.k)(props.onRenderRow, onRenderDefaultRow)\n            : onRenderDefaultRow;\n        var groupKey = group ? group.key : undefined;\n        var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey]\n            ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n            : 0;\n        var rowRole = role === defaultRole ? undefined : 'presentation';\n        // add tabindex=\"0\" to first row if no header exists, to ensure the focuszone is in the tab order\n        var rowFocusZoneProps = isHeaderVisible || index > 0 ? {} : { tabIndex: 0 };\n        var rowProps = {\n            item: item,\n            itemIndex: index,\n            flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n            compact: compact,\n            columns: adjustedColumns,\n            groupNestingDepth: nestingDepth,\n            id: rowId + \"-\" + index,\n            selectionMode: selectionMode,\n            selection: selection,\n            onDidMount: onRowDidMount,\n            onWillUnmount: onRowWillUnmount,\n            onRenderItemColumn: onRenderItemColumn,\n            onRenderField: onRenderField,\n            getCellValueKey: getCellValueKey,\n            eventsToRegister: eventsToRegister,\n            dragDropEvents: dragDropEvents,\n            dragDropHelper: dragDropHelper,\n            viewport: viewport,\n            checkboxVisibility: checkboxVisibility,\n            collapseAllVisibility: collapseAllVisibility,\n            getRowAriaLabel: getRowAriaLabel,\n            getRowAriaDescribedBy: getRowAriaDescribedBy,\n            checkButtonAriaLabel: checkButtonAriaLabel,\n            checkboxCellClassName: checkboxCellClassName,\n            useReducedRowRenderer: useReducedRowRenderer,\n            indentWidth: indentWidth,\n            cellStyleProps: cellStyleProps,\n            onRenderDetailsCheckbox: onRenderCheckbox,\n            enableUpdateAnimations: enableUpdateAnimations,\n            rowWidth: rowWidth,\n            useFastIcons: useFastIcons,\n            role: rowRole,\n            isGridRow: true,\n            focusZoneProps: rowFocusZoneProps,\n        };\n        if (!item) {\n            if (onRenderMissingItem) {\n                return onRenderMissingItem(index, rowProps);\n            }\n            return null;\n        }\n        return finalOnRenderRow(rowProps);\n    }, [\n        compact,\n        adjustedColumns,\n        selectionMode,\n        selection,\n        rowId,\n        onRowDidMount,\n        onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        isHeaderVisible,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderCheckbox,\n        enableUpdateAnimations,\n        useFastIcons,\n        onRenderDefaultRow,\n        onRenderMissingItem,\n        props.onRenderRow,\n        rowWidth,\n        role,\n        groupedDetailsListIndexMap,\n    ]);\n    var onRenderListCell = react.useCallback(function (nestingDepth) {\n        return function (item, itemIndex) {\n            return onRenderCell(nestingDepth, item, itemIndex);\n        };\n    }, [onRenderCell]);\n    var isRightArrow = react.useCallback(function (event) {\n        // eslint-disable-next-line deprecation/deprecation\n        return event.which === (0,rtl/* getRTLSafeKeyCode */.dP)(KeyCodes/* KeyCodes.right */.m.right, theme);\n    }, [theme]);\n    var focusZoneInnerProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, focusZoneProps), { componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef, className: classNames.focusZone, direction: focusZoneProps ? focusZoneProps.direction : FocusZone_types/* FocusZoneDirection.vertical */.U.vertical, shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow, onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged\n            ? focusZoneProps.onActiveElementChanged\n            : onActiveRowChanged, shouldRaiseClicksOnEnter: false, onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur });\n    var FinalGroupedList = groups && (groupProps === null || groupProps === void 0 ? void 0 : groupProps.groupedListAs) ? (0,composeComponentAs/* composeComponentAs */.Z)(groupProps.groupedListAs, GroupedList) : GroupedList;\n    var list = groups ? (react.createElement(FinalGroupedList, { focusZoneProps: focusZoneInnerProps, componentRef: groupedListRef, groups: groups, groupProps: finalGroupProps, items: items, onRenderCell: onRenderCell, role: \"presentation\", selection: selection, selectionMode: checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden ? selectionMode : Selection_types/* SelectionMode.none */.oW.none, dragDropEvents: dragDropEvents, dragDropHelper: dragDropHelper, eventsToRegister: rowElementEventMap, listProps: additionalListProps, onGroupExpandStateChanged: onGroupExpandStateChanged, usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize, getGroupHeight: getGroupHeight, compact: compact })) : (react.createElement(FocusZone/* FocusZone */.k, (0,tslib_es6/* __assign */.pi)({}, focusZoneInnerProps),\n        react.createElement(List, (0,tslib_es6/* __assign */.pi)({ ref: listRef, role: \"presentation\", items: items, onRenderCell: onRenderListCell(0), usePageCache: usePageCache, onShouldVirtualize: onShouldVirtualize }, additionalListProps))));\n    var onHeaderKeyDown = react.useCallback(function (ev) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes/* KeyCodes.down */.m.down) {\n            if (focusZoneRef.current && focusZoneRef.current.focus()) {\n                // select the first item in list after down arrow key event\n                // only if nothing was selected; otherwise start with the already-selected item\n                if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n                    selection.setIndexSelected(0, true, false);\n                }\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        }\n    }, [selection, focusZoneRef, isSelectedOnFocus]);\n    var onContentKeyDown = react.useCallback(function (ev) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes/* KeyCodes.up */.m.up && !ev.altKey) {\n            if (headerRef.current && headerRef.current.focus()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        }\n    }, [headerRef]);\n    return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({ ref: rootRef, className: classNames.root, \"data-automationid\": \"DetailsList\", \"data-is-scrollable\": \"false\" }, (shouldApplyApplicationRole ? { role: 'application' } : {})),\n        react.createElement(useFocusRects/* FocusRects */.u, null),\n        react.createElement(\"div\", { role: role, \"aria-label\": ariaLabelForGrid || ariaLabel, \"aria-rowcount\": isPlaceholderData ? 0 : rowCount, \"aria-colcount\": colCount, \"aria-busy\": isPlaceholderData },\n            react.createElement(\"div\", { onKeyDown: onHeaderKeyDown, role: \"presentation\", className: classNames.headerWrapper }, isHeaderVisible &&\n                onRenderDetailsHeader({\n                    componentRef: headerRef,\n                    selectionMode: selectionMode,\n                    layoutMode: layoutMode,\n                    selection: selection,\n                    columns: adjustedColumns,\n                    onColumnClick: onColumnHeaderClick,\n                    onColumnContextMenu: onColumnHeaderContextMenu,\n                    onColumnResized: onColumnResized,\n                    onColumnIsSizingChanged: onColumnIsSizingChanged,\n                    onColumnAutoResized: onColumnAutoResized,\n                    groupNestingDepth: groupNestingDepth,\n                    isAllCollapsed: isCollapsed,\n                    onToggleCollapseAll: onToggleCollapse,\n                    ariaLabel: ariaLabelForListHeader,\n                    ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                    ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                    selectAllVisibility: selectAllVisibility,\n                    collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                    viewport: viewport,\n                    columnReorderProps: columnReorderProps,\n                    minimumPixelsForDrag: minimumPixelsForDrag,\n                    cellStyleProps: cellStyleProps,\n                    checkboxVisibility: checkboxVisibility,\n                    indentWidth: indentWidth,\n                    onRenderDetailsCheckbox: onRenderCheckbox,\n                    rowWidth: sumColumnWidths(adjustedColumns),\n                    useFastIcons: useFastIcons,\n                }, onRenderDetailsHeader)),\n            react.createElement(\"div\", { onKeyDown: onContentKeyDown, role: \"presentation\", className: classNames.contentWrapper }, !disableSelectionZone ? (react.createElement(SelectionZone, (0,tslib_es6/* __assign */.pi)({ ref: selectionZoneRef, selection: selection, selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick, selectionMode: selectionMode, isSelectedOnFocus: isSelectedOnFocus, selectionClearedOnEscapePress: isSelectedOnFocus, toggleWithoutModifierPressed: !isSelectedOnFocus, onItemInvoked: onItemInvoked, onItemContextMenu: onItemContextMenu, enterModalOnTouch: enterModalSelectionOnTouch }, (selectionZoneProps || {})), list)) : (list)),\n            onRenderDetailsFooter((0,tslib_es6/* __assign */.pi)({}, detailsFooterProps)))));\n};\nvar DetailsListBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(DetailsListBase, _super);\n    function DetailsListBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._header = react.createRef();\n        _this._groupedList = react.createRef();\n        _this._list = react.createRef();\n        _this._focusZone = react.createRef();\n        _this._selectionZone = react.createRef();\n        _this._onRenderRow = function (props, defaultRender) {\n            return react.createElement(DetailsRow, (0,tslib_es6/* __assign */.pi)({}, props));\n        };\n        _this._getDerivedStateFromProps = function (nextProps, previousState) {\n            var _a = _this.props, checkboxVisibility = _a.checkboxVisibility, items = _a.items, setKey = _a.setKey, _b = _a.selectionMode, selectionMode = _b === void 0 ? _this._selection.mode : _b, columns = _a.columns, viewport = _a.viewport, compact = _a.compact, dragDropEvents = _a.dragDropEvents;\n            var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed, isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n            var newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n            var oldViewportWidth = (viewport && viewport.width) || 0;\n            var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n            var shouldForceUpdates = false;\n            if (nextProps.layoutMode !== _this.props.layoutMode) {\n                shouldForceUpdates = true;\n            }\n            var nextState = previousState;\n            if (shouldResetSelection) {\n                _this._initialFocusedIndex = nextProps.initialFocusedIndex;\n                // reset focusedItemIndex when setKey changes\n                nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, nextState), { focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1 });\n            }\n            if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n                _this._selection.setItems(nextProps.items, shouldResetSelection);\n            }\n            if (nextProps.checkboxVisibility !== checkboxVisibility ||\n                nextProps.columns !== columns ||\n                newViewportWidth !== oldViewportWidth ||\n                nextProps.compact !== compact) {\n                shouldForceUpdates = true;\n            }\n            nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n            if (nextProps.selectionMode !== selectionMode) {\n                shouldForceUpdates = true;\n            }\n            if (isAllGroupsCollapsed === undefined &&\n                nextProps.groupProps &&\n                nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n                nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, nextState), { isCollapsed: nextProps.groupProps.isAllGroupsCollapsed, isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed });\n            }\n            if (nextProps.dragDropEvents !== dragDropEvents) {\n                _this._dragDropHelper && _this._dragDropHelper.dispose();\n                _this._dragDropHelper = nextProps.dragDropEvents\n                    ? new DragDropHelper({\n                        selection: _this._selection,\n                        minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n                    })\n                    : undefined;\n                shouldForceUpdates = true;\n            }\n            if (shouldForceUpdates) {\n                nextState = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, nextState), { version: {} });\n            }\n            return nextState;\n        };\n        _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n            _this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n        };\n        _this._onColumnIsSizingChanged = function (column, isSizing) {\n            _this.setState({ isSizing: isSizing });\n        };\n        _this._onRowDidMount = function (row) {\n            var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;\n            var itemKey = _this._getItemKey(item, itemIndex);\n            _this._activeRows[itemKey] = row; // this is used for column auto resize\n            _this._setFocusToRowIfPending(row);\n            var onRowDidMount = _this.props.onRowDidMount;\n            if (onRowDidMount) {\n                onRowDidMount(item, itemIndex);\n            }\n        };\n        _this._onRowWillUnmount = function (row) {\n            var onRowWillUnmount = _this.props.onRowWillUnmount;\n            var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;\n            var itemKey = _this._getItemKey(item, itemIndex);\n            delete _this._activeRows[itemKey];\n            if (onRowWillUnmount) {\n                onRowWillUnmount(item, itemIndex);\n            }\n        };\n        _this._onToggleCollapse = function (collapsed) {\n            _this.setState({\n                isCollapsed: collapsed,\n            });\n            if (_this._groupedList.current) {\n                _this._groupedList.current.toggleCollapseAll(collapsed);\n            }\n        };\n        _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n            var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n            if (_this.props.onColumnResize) {\n                _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n            }\n            _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n            _this.setState((0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), { version: {} }));\n        };\n        /**\n         * Callback function when double clicked on the details header column resizer\n         * which will measure the column cells of all the active rows and resize the\n         * column to the max cell width.\n         *\n         * @param column - double clicked column definition\n         * @param columnIndex - double clicked column index\n         * TODO: min width 100 should be changed to const value and should be consistent with the\n         * value used on _onSizerMove method in DetailsHeader\n         */\n        _this._onColumnAutoResized = function (column, columnIndex) {\n            var max = 0;\n            var count = 0;\n            var totalCount = Object.keys(_this._activeRows).length;\n            for (var key in _this._activeRows) {\n                if (_this._activeRows.hasOwnProperty(key)) {\n                    var currentRow = _this._activeRows[key];\n                    currentRow.measureCell(columnIndex, function (width) {\n                        max = Math.max(max, width);\n                        count++;\n                        if (count === totalCount) {\n                            _this._onColumnResized(column, max, columnIndex);\n                        }\n                    });\n                }\n            }\n        };\n        /**\n         * Call back function when an element in FocusZone becomes active. It will translate it into item\n         * and call onActiveItemChanged callback if specified.\n         *\n         * @param row - element that became active in Focus Zone\n         * @param focus - event from Focus Zone\n         */\n        _this._onActiveRowChanged = function (el, ev) {\n            var _a = _this.props, items = _a.items, onActiveItemChanged = _a.onActiveItemChanged;\n            if (!el) {\n                return;\n            }\n            // Check and assign index only if the event was raised from any DetailsRow element\n            if (el.getAttribute('data-item-index')) {\n                var index = Number(el.getAttribute('data-item-index'));\n                if (index >= 0) {\n                    if (onActiveItemChanged) {\n                        onActiveItemChanged(items[index], index, ev);\n                    }\n                    _this.setState({\n                        focusedItemIndex: index,\n                    });\n                }\n            }\n        };\n        _this._onBlur = function (event) {\n            _this.setState({\n                focusedItemIndex: -1,\n            });\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._async = new Async/* Async */.e(_this);\n        _this._activeRows = {};\n        _this._columnOverrides = {};\n        _this.state = {\n            focusedItemIndex: -1,\n            lastWidth: 0,\n            adjustedColumns: _this._getAdjustedColumns(props, undefined),\n            isSizing: false,\n            isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n            isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n            version: {},\n            getDerivedStateFromProps: _this._getDerivedStateFromProps,\n        };\n        _this._selection =\n            props.selection ||\n                new Selection/* Selection */.Y({\n                    onSelectionChanged: undefined,\n                    getKey: props.getKey,\n                    selectionMode: props.selectionMode,\n                });\n        if (!_this.props.disableSelectionZone) {\n            _this._selection.setItems(props.items, false);\n        }\n        _this._dragDropHelper = props.dragDropEvents\n            ? new DragDropHelper({\n                selection: _this._selection,\n                minimumPixelsForDrag: props.minimumPixelsForDrag,\n            })\n            : undefined;\n        _this._initialFocusedIndex = props.initialFocusedIndex;\n        return _this;\n    }\n    DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n        return previousState.getDerivedStateFromProps(nextProps, previousState);\n    };\n    DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n        this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n        this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n    };\n    DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n        if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }\n        var item = this.props.items[index];\n        if (item) {\n            this.scrollToIndex(index, measureItem, scrollToMode);\n            var itemKey = this._getItemKey(item, index);\n            var row = this._activeRows[itemKey];\n            if (row) {\n                this._setFocusToRow(row, forceIntoFirstElement);\n            }\n        }\n    };\n    DetailsListBase.prototype.getStartItemIndexInView = function () {\n        if (this._list && this._list.current) {\n            return this._list.current.getStartItemIndexInView();\n        }\n        else if (this._groupedList && this._groupedList.current) {\n            return this._groupedList.current.getStartItemIndexInView();\n        }\n        return 0;\n    };\n    DetailsListBase.prototype.updateColumn = function (column, options) {\n        var _a, _b;\n        var NO_COLUMNS = [];\n        var _c = this.props, _d = _c.columns, columns = _d === void 0 ? NO_COLUMNS : _d, selectionMode = _c.selectionMode, checkboxVisibility = _c.checkboxVisibility, columnReorderOptions = _c.columnReorderOptions;\n        var width = options.width, newColumnIndex = options.newColumnIndex;\n        var index = columns.findIndex(function (col) { return col.key === column.key; });\n        if (width) {\n            this._onColumnResized(column, width, index);\n        }\n        if (newColumnIndex !== undefined && columnReorderOptions) {\n            var isCheckboxColumnHidden = selectionMode === Selection_types/* SelectionMode.none */.oW.none || checkboxVisibility === DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden;\n            var showCheckbox = checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden;\n            var columnIndex = (showCheckbox ? 2 : 1) + index;\n            var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n            var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n            var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;\n            var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;\n            var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n            if (isValidTargetIndex) {\n                if (columnReorderOptions.onColumnDrop) {\n                    var dragDropDetails = {\n                        draggedIndex: draggedIndex,\n                        targetIndex: targetIndex,\n                    };\n                    columnReorderOptions.onColumnDrop(dragDropDetails);\n                    /* eslint-disable deprecation/deprecation */\n                }\n                else if (columnReorderOptions.handleColumnReorder) {\n                    columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n                    /* eslint-enable deprecation/deprecation */\n                }\n            }\n        }\n    };\n    DetailsListBase.prototype.componentWillUnmount = function () {\n        if (this._dragDropHelper) {\n            // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n            this._dragDropHelper.dispose();\n        }\n        this._async.dispose();\n    };\n    DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n        this._notifyColumnsResized();\n        if (this._initialFocusedIndex !== undefined) {\n            var item = this.props.items[this._initialFocusedIndex];\n            if (item) {\n                var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n                var row = this._activeRows[itemKey];\n                if (row) {\n                    this._setFocusToRowIfPending(row);\n                }\n            }\n        }\n        if (this.props.items !== prevProps.items &&\n            this.props.items.length > 0 &&\n            this.state.focusedItemIndex !== -1 &&\n            !(0,elementContains/* elementContains */.t)(this._root.current, document.activeElement, false)) {\n            // Item set has changed and previously-focused item is gone.\n            // Set focus to item at index of previously-focused item if it is in range,\n            // else set focus to the last item.\n            var index = this.state.focusedItemIndex < this.props.items.length\n                ? this.state.focusedItemIndex\n                : this.props.items.length - 1;\n            var item = this.props.items[index];\n            var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n            var row = this._activeRows[itemKey];\n            if (row) {\n                this._setFocusToRow(row);\n            }\n            else {\n                this._initialFocusedIndex = index;\n            }\n        }\n        if (this.props.onDidUpdate) {\n            this.props.onDidUpdate(this);\n        }\n    };\n    DetailsListBase.prototype.render = function () {\n        return (react.createElement(DetailsListInner, (0,tslib_es6/* __assign */.pi)({}, this.props, this.state, { selection: this._selection, dragDropHelper: this._dragDropHelper, rootRef: this._root, listRef: this._list, groupedListRef: this._groupedList, focusZoneRef: this._focusZone, headerRef: this._header, selectionZoneRef: this._selectionZone, onGroupExpandStateChanged: this._onGroupExpandStateChanged, onColumnIsSizingChanged: this._onColumnIsSizingChanged, onRowDidMount: this._onRowDidMount, onRowWillUnmount: this._onRowWillUnmount, onColumnResized: this._onColumnResized, onColumnAutoResized: this._onColumnAutoResized, onToggleCollapse: this._onToggleCollapse, onActiveRowChanged: this._onActiveRowChanged, onBlur: this._onBlur, onRenderDefaultRow: this._onRenderRow })));\n    };\n    DetailsListBase.prototype.forceUpdate = function () {\n        _super.prototype.forceUpdate.call(this);\n        this._forceListUpdates();\n    };\n    DetailsListBase.prototype._getGroupNestingDepth = function () {\n        var groups = this.props.groups;\n        var level = 0;\n        var groupsInLevel = groups;\n        while (groupsInLevel && groupsInLevel.length > 0) {\n            level++;\n            groupsInLevel = groupsInLevel[0].children;\n        }\n        return level;\n    };\n    DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n        var itemIndex = row.props.itemIndex;\n        if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n            this._setFocusToRow(row);\n            delete this._initialFocusedIndex;\n        }\n    };\n    DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n        if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }\n        if (this._selectionZone.current) {\n            this._selectionZone.current.ignoreNextFocus();\n        }\n        this._async.setTimeout(function () {\n            row.focus(forceIntoFirstElement);\n        }, 0);\n    };\n    DetailsListBase.prototype._forceListUpdates = function () {\n        if (this._groupedList.current) {\n            this._groupedList.current.forceUpdate();\n        }\n        if (this._list.current) {\n            this._list.current.forceUpdate();\n        }\n    };\n    DetailsListBase.prototype._notifyColumnsResized = function () {\n        this.state.adjustedColumns.forEach(function (column) {\n            if (column.onColumnResize) {\n                column.onColumnResize(column.currentWidth);\n            }\n        });\n    };\n    DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n        var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n        var viewport = this.props.viewport;\n        var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n        return (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, previousState), { adjustedColumns: adjustedColumns, lastWidth: viewportWidth });\n    };\n    /** Returns adjusted columns, given the viewport size and layout mode. */\n    DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n        var _this = this;\n        var newItems = newProps.items, layoutMode = newProps.layoutMode, selectionMode = newProps.selectionMode, viewport = newProps.viewport;\n        var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n        var newColumns = newProps.columns;\n        var columns = this.props ? this.props.columns : [];\n        var lastWidth = previousState ? previousState.lastWidth : -1;\n        var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n        if (!forceUpdate &&\n            lastWidth === viewportWidth &&\n            lastSelectionMode === selectionMode &&\n            (!columns || newColumns === columns)) {\n            return newColumns || [];\n        }\n        newColumns = newColumns || buildColumns(newItems, true);\n        var adjustedColumns;\n        if (layoutMode === DetailsList_types/* DetailsListLayoutMode.fixedColumns */.Oh.fixedColumns) {\n            adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n            // Preserve adjusted column calculated widths.\n            adjustedColumns.forEach(function (column) {\n                _this._rememberCalculatedWidth(column, column.calculatedWidth);\n            });\n        }\n        else {\n            adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n            adjustedColumns.forEach(function (column) {\n                _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n            });\n        }\n        return adjustedColumns;\n    };\n    /** Builds a set of columns based on the given columns mixed with the current overrides. */\n    DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {\n        var _this = this;\n        var _a = this.props, _b = _a.selectionMode, selectionMode = _b === void 0 ? this._selection.mode : _b, checkboxVisibility = _a.checkboxVisibility, flexMargin = _a.flexMargin, skipViewportMeasures = _a.skipViewportMeasures;\n        var remainingWidth = viewportWidth - (flexMargin || 0);\n        var sumProportionalWidth = 0;\n        newColumns.forEach(function (col) {\n            if (skipViewportMeasures || !col.flexGrow) {\n                remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n            }\n            else {\n                remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n                sumProportionalWidth += col.flexGrow;\n            }\n            remainingWidth -= getPaddedWidth(col, props, true);\n        });\n        var rowCheckWidth = selectionMode !== Selection_types/* SelectionMode.none */.oW.none && checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden ? CHECK_CELL_WIDTH : 0;\n        var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;\n        remainingWidth -= rowCheckWidth + groupExpandWidth;\n        var widthFraction = remainingWidth / sumProportionalWidth;\n        // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n        if (!skipViewportMeasures) {\n            newColumns.forEach(function (column) {\n                var newColumn = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, column), _this._columnOverrides[column.key]);\n                if (newColumn.flexGrow && newColumn.maxWidth) {\n                    var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n                    var shrinkWidth = fullWidth - newColumn.maxWidth;\n                    if (shrinkWidth > 0) {\n                        remainingWidth += shrinkWidth;\n                        sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n                    }\n                }\n            });\n        }\n        widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n        return newColumns.map(function (column) {\n            var newColumn = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, column), _this._columnOverrides[column.key]);\n            // Delay computation until viewport width is available.\n            if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n                return newColumn;\n            }\n            if (!newColumn.calculatedWidth) {\n                if (!skipViewportMeasures && newColumn.flexGrow) {\n                    // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n                    newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n                    newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n                }\n                else {\n                    newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n                }\n            }\n            return newColumn;\n        });\n    };\n    /** Builds a set of columns to fix within the viewport width. */\n    DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {\n        var _this = this;\n        var _a = props.selectionMode, selectionMode = _a === void 0 ? this._selection.mode : _a, checkboxVisibility = props.checkboxVisibility, skipViewportMeasures = props.skipViewportMeasures;\n        var rowCheckWidth = selectionMode !== Selection_types/* SelectionMode.none */.oW.none && checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden ? CHECK_CELL_WIDTH : 0;\n        var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;\n        var totalWidth = 0; // offset because we have one less inner padding.\n        var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n        var adjustedColumns = newColumns.map(function (column, i) {\n            var baseColumn = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, column), { calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH });\n            var newColumn = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, baseColumn), _this._columnOverrides[column.key]);\n            totalWidth += getPaddedWidth(newColumn, props);\n            return newColumn;\n        });\n        if (skipViewportMeasures) {\n            return adjustedColumns;\n        }\n        var lastIndex = adjustedColumns.length - 1;\n        // Shrink or remove collapsable columns.\n        while (lastIndex >= 0 && totalWidth > availableWidth) {\n            var column = adjustedColumns[lastIndex];\n            var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n            var overflowWidth = totalWidth - availableWidth;\n            // eslint-disable-next-line deprecation/deprecation\n            if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n                var originalWidth = column.calculatedWidth;\n                column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n                totalWidth -= originalWidth - column.calculatedWidth;\n            }\n            else {\n                totalWidth -= getPaddedWidth(column, props);\n                adjustedColumns.splice(lastIndex, 1);\n            }\n            lastIndex--;\n        }\n        // Then expand columns starting at the beginning, until we've filled the width.\n        for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n            var column = adjustedColumns[i];\n            var isLast = i === adjustedColumns.length - 1;\n            var overrides = this._columnOverrides[column.key];\n            if (overrides && overrides.calculatedWidth && !isLast) {\n                continue;\n            }\n            var spaceLeft = availableWidth - totalWidth;\n            var increment = void 0;\n            if (isLast) {\n                increment = spaceLeft;\n            }\n            else {\n                var maxWidth = column.maxWidth;\n                var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n                increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n            }\n            column.calculatedWidth = column.calculatedWidth + increment;\n            totalWidth += increment;\n        }\n        return adjustedColumns;\n    };\n    DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n        var overrides = this._getColumnOverride(column.key);\n        overrides.calculatedWidth = newCalculatedWidth;\n        overrides.currentWidth = newCalculatedWidth;\n    };\n    DetailsListBase.prototype._getColumnOverride = function (key) {\n        return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n    };\n    DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n        var getKey = this.props.getKey;\n        var itemKey = undefined;\n        if (item) {\n            itemKey = item.key;\n        }\n        if (getKey) {\n            itemKey = getKey(item, itemIndex);\n        }\n        if (!itemKey) {\n            itemKey = itemIndex;\n        }\n        return itemKey;\n    };\n    DetailsListBase.defaultProps = {\n        layoutMode: DetailsList_types/* DetailsListLayoutMode.justified */.Oh.justified,\n        selectionMode: Selection_types/* SelectionMode.multiple */.oW.multiple,\n        constrainMode: DetailsList_types/* ConstrainMode.horizontalConstrained */.ov.horizontalConstrained,\n        checkboxVisibility: DetailsList_types/* CheckboxVisibility.onHover */.tY.onHover,\n        isHeaderVisible: true,\n        compact: false,\n        useFastIcons: true,\n    };\n    DetailsListBase = (0,tslib_es6/* __decorate */.gn)([\n        withViewport\n    ], DetailsListBase);\n    return DetailsListBase;\n}(react.Component));\n\nfunction buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {\n    var columns = [];\n    if (items && items.length) {\n        var firstItem = items[0];\n        for (var propName in firstItem) {\n            if (firstItem.hasOwnProperty(propName)) {\n                columns.push({\n                    key: propName,\n                    name: propName,\n                    fieldName: propName,\n                    minWidth: MIN_COLUMN_WIDTH,\n                    maxWidth: 300,\n                    isCollapsible: !!columns.length,\n                    isMultiline: isMultiline === undefined ? false : isMultiline,\n                    isSorted: sortedColumnKey === propName,\n                    isSortedDescending: !!isSortedDescending,\n                    isRowHeader: false,\n                    columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : DetailsList_types/* ColumnActionsMode.clickable */._1.clickable,\n                    isResizable: canResizeColumns,\n                    onColumnClick: onColumnClick,\n                    isGrouped: groupedColumnKey === propName,\n                });\n            }\n        }\n    }\n    return columns;\n}\nfunction getPaddedWidth(column, props, paddingOnly) {\n    var _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n    return ((paddingOnly ? 0 : column.calculatedWidth) +\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0));\n}\nfunction getGroupNestingDepth(groups) {\n    var level = 0;\n    var groupsInLevel = groups;\n    while (groupsInLevel && groupsInLevel.length > 0) {\n        level++;\n        groupsInLevel = groupsInLevel[0].children;\n    }\n    return level;\n}\nfunction useGroupedDetailsListIndexMap(groups) {\n    return react.useMemo(function () {\n        var indexMap = {};\n        if (groups) {\n            var rowCount = 1;\n            var numGroupHeaders = 1;\n            for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n                var group = groups_1[_i];\n                var key = group.key;\n                indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n                numGroupHeaders++;\n                rowCount += group.count + 1;\n            }\n        }\n        return indexMap;\n    }, [groups]);\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.styles.js\n\nvar DetailsList_styles_GlobalClassNames = {\n    root: 'ms-DetailsList',\n    compact: 'ms-DetailsList--Compact',\n    contentWrapper: 'ms-DetailsList-contentWrapper',\n    headerWrapper: 'ms-DetailsList-headerWrapper',\n    isFixed: 'is-fixed',\n    isHorizontalConstrained: 'is-horizontalConstrained',\n    listCell: 'ms-List-cell',\n};\nvar getDetailsListStyles = function (props) {\n    var _a, _b;\n    var theme = props.theme, className = props.className, isHorizontalConstrained = props.isHorizontalConstrained, compact = props.compact, isFixed = props.isFixed;\n    var semanticColors = theme.semanticColors;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(DetailsList_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.small,\n            {\n                position: 'relative',\n                color: semanticColors.listText,\n                selectors: (_a = {},\n                    _a[\"& .\" + classNames.listCell] = {\n                        minHeight: 38,\n                        wordBreak: 'break-word',\n                    },\n                    _a),\n            },\n            isFixed && classNames.isFixed,\n            compact && [\n                classNames.compact,\n                {\n                    selectors: (_b = {},\n                        _b[\".\" + classNames.listCell] = {\n                            minHeight: 32,\n                        },\n                        _b),\n                },\n            ],\n            isHorizontalConstrained && [\n                classNames.isHorizontalConstrained,\n                {\n                    overflowX: 'auto',\n                    overflowY: 'visible',\n                    WebkitOverflowScrolling: 'touch',\n                },\n            ],\n            className,\n        ],\n        focusZone: [\n            {\n                display: 'inline-block',\n                minWidth: '100%',\n                minHeight: 1,\n            },\n        ],\n        headerWrapper: classNames.headerWrapper,\n        contentWrapper: classNames.contentWrapper,\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.js\n\n\n\nvar DetailsList = (0,styled/* styled */.z)(DetailsListBase, getDetailsListStyles, undefined, {\n    scope: 'DetailsList',\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/Shimmer.styles.js\n\n\n\nvar Shimmer_styles_GlobalClassNames = {\n    root: 'ms-Shimmer-container',\n    shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n    shimmerGradient: 'ms-Shimmer-shimmerGradient',\n    dataWrapper: 'ms-Shimmer-dataWrapper',\n};\nvar BACKGROUND_OFF_SCREEN_POSITION = '100%';\nvar shimmerAnimation = (0,memoize/* memoizeFunction */.NF)(function () {\n    return (0,lib/* keyframes */.F4)({\n        '0%': {\n            transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n        },\n        '100%': {\n            transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n        },\n    });\n});\nvar shimmerAnimationRTL = (0,memoize/* memoizeFunction */.NF)(function () {\n    return (0,lib/* keyframes */.F4)({\n        '100%': {\n            transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n        },\n        '0%': {\n            transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n        },\n    });\n});\nfunction Shimmer_styles_getStyles(props) {\n    var _a;\n    var isDataLoaded = props.isDataLoaded, className = props.className, theme = props.theme, transitionAnimationInterval = props.transitionAnimationInterval, shimmerColor = props.shimmerColor, shimmerWaveColor = props.shimmerWaveColor, improveCSSPerformance = props.improveCSSPerformance;\n    var semanticColors = theme.semanticColors;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(Shimmer_styles_GlobalClassNames, theme);\n    var isRTL = (0,rtl/* getRTL */.zg)(theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                position: 'relative',\n                height: 'auto',\n            },\n            className,\n        ],\n        shimmerWrapper: [\n            classNames.shimmerWrapper,\n            {\n                position: 'relative',\n                overflow: 'hidden',\n                transform: 'translateZ(0)',\n                backgroundColor: shimmerColor || semanticColors.disabledBackground,\n                transition: \"opacity \" + transitionAnimationInterval + \"ms\",\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ background: \"WindowText\\n                        linear-gradient(\\n                          to right,\\n                          transparent 0%,\\n                          Window 50%,\\n                          transparent 100%)\\n                        0 0 / 90% 100%\\n                        no-repeat\" }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _a),\n            },\n            isDataLoaded && {\n                opacity: '0',\n                position: 'absolute',\n                top: '0',\n                bottom: '0',\n                left: '0',\n                right: '0',\n            },\n            improveCSSPerformance\n                ? {\n                    selectors: {\n                        '> div:last-child': {\n                            transform: 'translateZ(0)',\n                        },\n                    },\n                }\n                : {\n                    selectors: {\n                        '> *': {\n                            transform: 'translateZ(0)',\n                        },\n                    },\n                },\n        ],\n        shimmerGradient: [\n            classNames.shimmerGradient,\n            {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                background: (shimmerColor || semanticColors.disabledBackground) + \"\\n                      linear-gradient(\\n                        to right,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 0%,\\n                        \" + (shimmerWaveColor || semanticColors.bodyDivider) + \" 50%,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 100%)\\n                      0 0 / 90% 100%\\n                      no-repeat\",\n                transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n                animationDuration: '2s',\n                animationTimingFunction: 'ease-in-out',\n                animationDirection: 'normal',\n                animationIterationCount: 'infinite',\n                animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation(),\n            },\n        ],\n        dataWrapper: [\n            classNames.dataWrapper,\n            {\n                position: 'absolute',\n                top: '0',\n                bottom: '0',\n                left: '0',\n                right: '0',\n                opacity: '0',\n                background: 'none',\n                backgroundColor: 'transparent',\n                border: 'none',\n                transition: \"opacity \" + transitionAnimationInterval + \"ms\",\n            },\n            isDataLoaded && {\n                opacity: '1',\n                position: 'static',\n            },\n        ],\n        screenReaderText: lib/* hiddenContentStyle */.ul,\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/Shimmer.types.js\n/**\n * Describes the possible types for shimmer elements used.\n * {@docCategory Shimmer}\n */\nvar ShimmerElementType;\n(function (ShimmerElementType) {\n    /**\n     * Line element type\n     */\n    ShimmerElementType[ShimmerElementType[\"line\"] = 1] = \"line\";\n    /**\n     * Circle element type\n     */\n    ShimmerElementType[ShimmerElementType[\"circle\"] = 2] = \"circle\";\n    /**\n     * Gap element type\n     */\n    ShimmerElementType[ShimmerElementType[\"gap\"] = 3] = \"gap\";\n})(ShimmerElementType || (ShimmerElementType = {}));\n/**\n * Describes the default heights for shimmer elements when omitted in implementation.\n * {@docCategory Shimmer}\n */\nvar ShimmerElementsDefaultHeights;\n(function (ShimmerElementsDefaultHeights) {\n    /**\n     * Default height of the line element when not provided by user: 16px\n     */\n    ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights[\"line\"] = 16] = \"line\";\n    /**\n     * Default height of the gap element when not provided by user: 16px\n     */\n    ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights[\"gap\"] = 16] = \"gap\";\n    /**\n     * Default height of the circle element when not provided by user: 24px\n     */\n    ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights[\"circle\"] = 24] = \"circle\";\n})(ShimmerElementsDefaultHeights || (ShimmerElementsDefaultHeights = {}));\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerLine/ShimmerLine.base.js\n\n\nvar ShimmerLine_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\n/**\n * {@docCategory Shimmer}\n */\nvar ShimmerLineBase = function (props) {\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, styles = props.styles, _a = props.width, width = _a === void 0 ? '100%' : _a, borderStyle = props.borderStyle, theme = props.theme;\n    var classNames = ShimmerLine_base_getClassNames(styles, {\n        theme: theme,\n        height: height,\n        borderStyle: borderStyle,\n    });\n    return (react.createElement(\"div\", { style: { width: width, minWidth: typeof width === 'number' ? width + \"px\" : 'auto' }, className: classNames.root },\n        react.createElement(\"svg\", { width: \"2\", height: \"2\", className: classNames.topLeftCorner },\n            react.createElement(\"path\", { d: \"M0 2 A 2 2, 0, 0, 1, 2 0 L 0 0 Z\" })),\n        react.createElement(\"svg\", { width: \"2\", height: \"2\", className: classNames.topRightCorner },\n            react.createElement(\"path\", { d: \"M0 0 A 2 2, 0, 0, 1, 2 2 L 2 0 Z\" })),\n        react.createElement(\"svg\", { width: \"2\", height: \"2\", className: classNames.bottomRightCorner },\n            react.createElement(\"path\", { d: \"M2 0 A 2 2, 0, 0, 1, 0 2 L 2 2 Z\" })),\n        react.createElement(\"svg\", { width: \"2\", height: \"2\", className: classNames.bottomLeftCorner },\n            react.createElement(\"path\", { d: \"M2 2 A 2 2, 0, 0, 1, 0 0 L 0 2 Z\" }))));\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerLine/ShimmerLine.styles.js\n\nvar ShimmerLine_styles_GlobalClassNames = {\n    root: 'ms-ShimmerLine-root',\n    topLeftCorner: 'ms-ShimmerLine-topLeftCorner',\n    topRightCorner: 'ms-ShimmerLine-topRightCorner',\n    bottomLeftCorner: 'ms-ShimmerLine-bottomLeftCorner',\n    bottomRightCorner: 'ms-ShimmerLine-bottomRightCorner',\n};\nfunction ShimmerLine_styles_getStyles(props) {\n    var _a;\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, borderStyle = props.borderStyle, theme = props.theme;\n    var semanticColors = theme.semanticColors;\n    var globalClassNames = (0,lib/* getGlobalClassNames */.Cn)(ShimmerLine_styles_GlobalClassNames, theme);\n    var borderStyles = borderStyle || {};\n    var sharedCornerStyles = {\n        position: 'absolute',\n        fill: semanticColors.bodyBackground,\n    };\n    return {\n        root: [\n            globalClassNames.root,\n            theme.fonts.medium,\n            {\n                height: height + \"px\",\n                boxSizing: 'content-box',\n                position: 'relative',\n                borderTopStyle: 'solid',\n                borderBottomStyle: 'solid',\n                borderColor: semanticColors.bodyBackground,\n                borderWidth: 0,\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = {\n                        borderColor: 'Window',\n                        selectors: {\n                            '> *': {\n                                fill: 'Window',\n                            },\n                        },\n                    },\n                    _a),\n            },\n            borderStyles,\n        ],\n        topLeftCorner: [\n            globalClassNames.topLeftCorner,\n            {\n                top: '0',\n                left: '0',\n            },\n            sharedCornerStyles,\n        ],\n        topRightCorner: [\n            globalClassNames.topRightCorner,\n            {\n                top: '0',\n                right: '0',\n            },\n            sharedCornerStyles,\n        ],\n        bottomRightCorner: [\n            globalClassNames.bottomRightCorner,\n            {\n                bottom: '0',\n                right: '0',\n            },\n            sharedCornerStyles,\n        ],\n        bottomLeftCorner: [\n            globalClassNames.bottomLeftCorner,\n            {\n                bottom: '0',\n                left: '0',\n            },\n            sharedCornerStyles,\n        ],\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerLine/ShimmerLine.js\n\n\n\nvar ShimmerLine = (0,styled/* styled */.z)(ShimmerLineBase, ShimmerLine_styles_getStyles, undefined, {\n    scope: 'ShimmerLine',\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerGap/ShimmerGap.base.js\n\n\nvar ShimmerGap_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\n/**\n * {@docCategory Shimmer}\n */\nvar ShimmerGapBase = function (props) {\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, styles = props.styles, _a = props.width, width = _a === void 0 ? '10px' : _a, borderStyle = props.borderStyle, theme = props.theme;\n    var classNames = ShimmerGap_base_getClassNames(styles, {\n        theme: theme,\n        height: height,\n        borderStyle: borderStyle,\n    });\n    return (react.createElement(\"div\", { style: { width: width, minWidth: typeof width === 'number' ? width + \"px\" : 'auto' }, className: classNames.root }));\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerGap/ShimmerGap.styles.js\n\nvar ShimmerGap_styles_GlobalClassNames = {\n    root: 'ms-ShimmerGap-root',\n};\nfunction ShimmerGap_styles_getStyles(props) {\n    var _a;\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, borderStyle = props.borderStyle, theme = props.theme;\n    var semanticColors = theme.semanticColors;\n    var globalClassNames = (0,lib/* getGlobalClassNames */.Cn)(ShimmerGap_styles_GlobalClassNames, theme);\n    var borderStyles = borderStyle || {};\n    return {\n        root: [\n            globalClassNames.root,\n            theme.fonts.medium,\n            {\n                backgroundColor: semanticColors.bodyBackground,\n                height: height + \"px\",\n                boxSizing: 'content-box',\n                borderTopStyle: 'solid',\n                borderBottomStyle: 'solid',\n                borderColor: semanticColors.bodyBackground,\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = {\n                        backgroundColor: 'Window',\n                        borderColor: 'Window',\n                    },\n                    _a),\n            },\n            borderStyles,\n        ],\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerGap/ShimmerGap.js\n\n\n\nvar ShimmerGap = (0,styled/* styled */.z)(ShimmerGapBase, ShimmerGap_styles_getStyles, undefined, {\n    scope: 'ShimmerGap',\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerCircle/ShimmerCircle.styles.js\n\nvar ShimmerCircle_styles_GlobalClassNames = {\n    root: 'ms-ShimmerCircle-root',\n    svg: 'ms-ShimmerCircle-svg',\n};\nfunction ShimmerCircle_styles_getStyles(props) {\n    var _a, _b;\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, borderStyle = props.borderStyle, theme = props.theme;\n    var semanticColors = theme.semanticColors;\n    var globalClassNames = (0,lib/* getGlobalClassNames */.Cn)(ShimmerCircle_styles_GlobalClassNames, theme);\n    var borderStyles = borderStyle || {};\n    return {\n        root: [\n            globalClassNames.root,\n            theme.fonts.medium,\n            {\n                width: height + \"px\",\n                height: height + \"px\",\n                minWidth: height + \"px\",\n                boxSizing: 'content-box',\n                borderTopStyle: 'solid',\n                borderBottomStyle: 'solid',\n                borderColor: semanticColors.bodyBackground,\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = {\n                        borderColor: 'Window',\n                    },\n                    _a),\n            },\n            borderStyles,\n        ],\n        svg: [\n            globalClassNames.svg,\n            {\n                display: 'block',\n                fill: semanticColors.bodyBackground,\n                selectors: (_b = {},\n                    _b[lib/* HighContrastSelector */.qJ] = {\n                        fill: 'Window',\n                    },\n                    _b),\n            },\n        ],\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerCircle/ShimmerCircle.base.js\n\n\nvar ShimmerCircle_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar ShimmerCircleBase = function (props) {\n    // eslint-disable-next-line deprecation/deprecation\n    var height = props.height, styles = props.styles, borderStyle = props.borderStyle, theme = props.theme;\n    var classNames = ShimmerCircle_base_getClassNames(styles, {\n        theme: theme,\n        height: height,\n        borderStyle: borderStyle,\n    });\n    return (react.createElement(\"div\", { className: classNames.root },\n        react.createElement(\"svg\", { viewBox: \"0 0 10 10\", width: height, height: height, className: classNames.svg },\n            react.createElement(\"path\", { d: \"M0,0 L10,0 L10,10 L0,10 L0,0 Z M0,5 C0,7.76142375 2.23857625,10 5,10 C7.76142375,10 10,7.76142375 10,5 C10,2.23857625 7.76142375,2.22044605e-16 5,0 C2.23857625,-2.22044605e-16 0,2.23857625 0,5 L0,5 Z\" }))));\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerCircle/ShimmerCircle.js\n\n\n\nvar ShimmerCircle = (0,styled/* styled */.z)(ShimmerCircleBase, ShimmerCircle_styles_getStyles, undefined, { scope: 'ShimmerCircle' });\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.js\n\n\n\n\n\n\n\nvar ShimmerElementsGroup_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\n/**\n * {@docCategory Shimmer}\n */\nvar ShimmerElementsGroupBase = function (props) {\n    var styles = props.styles, _a = props.width, width = _a === void 0 ? 'auto' : _a, shimmerElements = props.shimmerElements, _b = props.rowHeight, rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b, _c = props.flexWrap, flexWrap = _c === void 0 ? false : _c, theme = props.theme, backgroundColor = props.backgroundColor;\n    var classNames = ShimmerElementsGroup_base_getClassNames(styles, {\n        theme: theme,\n        flexWrap: flexWrap,\n    });\n    return (react.createElement(\"div\", { style: { width: width }, className: classNames.root }, getRenderedElements(shimmerElements, backgroundColor, rowHeight)));\n};\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n    var renderedElements = shimmerElements ? (shimmerElements.map(\n    // false positive\n    // eslint-disable-next-line array-callback-return\n    function (element, index) {\n        var type = element.type, filteredElem = (0,tslib_es6/* __rest */._T)(element, [\"type\"]);\n        var verticalAlign = filteredElem.verticalAlign, height = filteredElem.height;\n        var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n        switch (element.type) {\n            case ShimmerElementType.circle:\n                return react.createElement(ShimmerCircle, (0,tslib_es6/* __assign */.pi)({ key: index }, filteredElem, { styles: styles }));\n            case ShimmerElementType.gap:\n                return react.createElement(ShimmerGap, (0,tslib_es6/* __assign */.pi)({ key: index }, filteredElem, { styles: styles }));\n            case ShimmerElementType.line:\n                return react.createElement(ShimmerLine, (0,tslib_es6/* __assign */.pi)({ key: index }, filteredElem, { styles: styles }));\n        }\n    })) : (react.createElement(ShimmerLine, { height: ShimmerElementsDefaultHeights.line }));\n    return renderedElements;\n}\nvar getElementStyles = (0,memoize/* memoizeFunction */.NF)(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n    var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n    var borderStyle;\n    if (!verticalAlign || verticalAlign === 'center') {\n        borderStyle = {\n            borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n            borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\",\n        };\n    }\n    else if (verticalAlign && verticalAlign === 'top') {\n        borderStyle = {\n            borderBottomWidth: dif + \"px\",\n            borderTopWidth: \"0px\",\n        };\n    }\n    else if (verticalAlign && verticalAlign === 'bottom') {\n        borderStyle = {\n            borderBottomWidth: \"0px\",\n            borderTopWidth: dif + \"px\",\n        };\n    }\n    if (backgroundColor) {\n        switch (elementType) {\n            case ShimmerElementType.circle:\n                return {\n                    root: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, borderStyle), { borderColor: backgroundColor }),\n                    svg: { fill: backgroundColor },\n                };\n            case ShimmerElementType.gap:\n                return {\n                    root: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, borderStyle), { borderColor: backgroundColor, backgroundColor: backgroundColor }),\n                };\n            case ShimmerElementType.line:\n                return {\n                    root: (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, borderStyle), { borderColor: backgroundColor }),\n                    topLeftCorner: { fill: backgroundColor },\n                    topRightCorner: { fill: backgroundColor },\n                    bottomLeftCorner: { fill: backgroundColor },\n                    bottomRightCorner: { fill: backgroundColor },\n                };\n        }\n    }\n    return {\n        root: borderStyle,\n    };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements) {\n    var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n        switch (element.type) {\n            case ShimmerElementType.circle:\n                if (!element.height) {\n                    element.height = ShimmerElementsDefaultHeights.circle;\n                }\n                break;\n            case ShimmerElementType.line:\n                if (!element.height) {\n                    element.height = ShimmerElementsDefaultHeights.line;\n                }\n                break;\n            case ShimmerElementType.gap:\n                if (!element.height) {\n                    element.height = ShimmerElementsDefaultHeights.gap;\n                }\n                break;\n        }\n        return element;\n    });\n    var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n        return next.height ? (next.height > acc ? next.height : acc) : acc;\n    }, 0);\n    return rowHeight;\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.styles.js\n\nvar ShimmerElementsGroup_styles_GlobalClassNames = {\n    root: 'ms-ShimmerElementsGroup-root',\n};\nfunction ShimmerElementsGroup_styles_getStyles(props) {\n    var flexWrap = props.flexWrap, theme = props.theme;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(ShimmerElementsGroup_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                display: 'flex',\n                alignItems: 'center',\n                flexWrap: flexWrap ? 'wrap' : 'nowrap',\n                position: 'relative',\n            },\n        ],\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.js\n\n\n\nvar ShimmerElementsGroup = (0,styled/* styled */.z)(ShimmerElementsGroupBase, ShimmerElementsGroup_styles_getStyles, undefined, { scope: 'ShimmerElementsGroup' });\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useSetTimeout.js\nvar useSetTimeout = __webpack_require__(678);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/Shimmer.base.js\n\n\n\n\n\nvar TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nvar COMPONENT_NAME = 'Shimmer';\nvar Shimmer_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\n/**\n * {@docCategory Shimmer}\n */\nvar ShimmerBase = react.forwardRef(function (props, ref) {\n    var styles = props.styles, shimmerElements = props.shimmerElements, children = props.children, width = props.width, className = props.className, customElementsGroup = props.customElementsGroup, theme = props.theme, ariaLabel = props.ariaLabel, shimmerColors = props.shimmerColors, _a = props.isDataLoaded, isDataLoaded = _a === void 0 ? false : _a, improveCSSPerformance = props.improveCSSPerformance;\n    var divProps = (0,properties/* getNativeProps */.pq)(props, properties/* divProperties */.n7);\n    var classNames = Shimmer_base_getClassNames(styles, {\n        theme: theme,\n        isDataLoaded: isDataLoaded,\n        className: className,\n        transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n        shimmerColor: shimmerColors && shimmerColors.shimmer,\n        shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n        improveCSSPerformance: improveCSSPerformance || !customElementsGroup,\n    });\n    var internalState = (0,useConst/* useConst */.B)({\n        lastTimeoutId: 0,\n    });\n    var _b = (0,useSetTimeout/* useSetTimeout */.L)(), setTimeout = _b.setTimeout, clearTimeout = _b.clearTimeout;\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    var _c = react.useState(isDataLoaded), contentLoaded = _c[0], setContentLoaded = _c[1];\n    var divStyleProp = { width: width ? width : '100%' };\n    react.useEffect(function () {\n        if (isDataLoaded !== contentLoaded) {\n            if (isDataLoaded) {\n                internalState.lastTimeoutId = setTimeout(function () {\n                    setContentLoaded(true);\n                }, TRANSITION_ANIMATION_INTERVAL);\n                return function () { return clearTimeout(internalState.lastTimeoutId); };\n            }\n            else {\n                setContentLoaded(false);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n    return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, divProps, { className: classNames.root, ref: ref }),\n        !contentLoaded && (react.createElement(\"div\", { style: divStyleProp, className: classNames.shimmerWrapper },\n            react.createElement(\"div\", { className: classNames.shimmerGradient }),\n            customElementsGroup ? (customElementsGroup) : (react.createElement(ShimmerElementsGroup, { shimmerElements: shimmerElements, backgroundColor: shimmerColors && shimmerColors.background })))),\n        children && react.createElement(\"div\", { className: classNames.dataWrapper }, children),\n        ariaLabel && !isDataLoaded && (react.createElement(\"div\", { role: \"status\", \"aria-live\": \"polite\" },\n            react.createElement(DelayedRender/* DelayedRender */.U, null,\n                react.createElement(\"div\", { className: classNames.screenReaderText }, ariaLabel))))));\n});\nShimmerBase.displayName = COMPONENT_NAME;\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Shimmer/Shimmer.js\n\n\n\nvar Shimmer = (0,styled/* styled */.z)(ShimmerBase, Shimmer_styles_getStyles, undefined, {\n    scope: 'Shimmer',\n});\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/ShimmeredDetailsList.base.js\n\n\n\n\n\n\n\n\nvar ShimmeredDetailsList_base_getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\nvar ShimmeredDetailsListBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(ShimmeredDetailsListBase, _super);\n    function ShimmeredDetailsListBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n            var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;\n            var placeholderElements = onRenderCustomPlaceholder\n                ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder)\n                : _this._renderDefaultShimmerPlaceholder(rowProps);\n            return react.createElement(Shimmer, { customElementsGroup: placeholderElements });\n        };\n        _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n            var columns = rowProps.columns, compact = rowProps.compact, selectionMode = rowProps.selectionMode, checkboxVisibility = rowProps.checkboxVisibility, _a = rowProps.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n            var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n            // 1px to take into account the border-bottom of DetailsRow.\n            var gapHeight = compact ? compactRowHeight : rowHeight + 1;\n            var shimmerElementsRow = [];\n            var showCheckbox = selectionMode !== Selection_types/* SelectionMode.none */.oW.none && checkboxVisibility !== DetailsList_types/* CheckboxVisibility.hidden */.tY.hidden;\n            if (showCheckbox) {\n                shimmerElementsRow.push(react.createElement(ShimmerElementsGroup, { key: 'checkboxGap', shimmerElements: [{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }] }));\n            }\n            columns.forEach(function (column, columnIdx) {\n                var shimmerElements = [];\n                var groupWidth = cellStyleProps.cellLeftPadding +\n                    cellStyleProps.cellRightPadding +\n                    column.calculatedWidth +\n                    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n                shimmerElements.push({\n                    type: ShimmerElementType.gap,\n                    width: cellStyleProps.cellLeftPadding,\n                    height: gapHeight,\n                });\n                if (column.isIconOnly) {\n                    shimmerElements.push({\n                        type: ShimmerElementType.line,\n                        width: column.calculatedWidth,\n                        height: column.calculatedWidth,\n                    });\n                    shimmerElements.push({\n                        type: ShimmerElementType.gap,\n                        width: cellStyleProps.cellRightPadding,\n                        height: gapHeight,\n                    });\n                }\n                else {\n                    shimmerElements.push({\n                        type: ShimmerElementType.line,\n                        width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n                        height: DEFAULT_SHIMMER_HEIGHT,\n                    });\n                    shimmerElements.push({\n                        type: ShimmerElementType.gap,\n                        width: cellStyleProps.cellRightPadding +\n                            (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n                            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n                        height: gapHeight,\n                    });\n                }\n                shimmerElementsRow.push(react.createElement(ShimmerElementsGroup, { key: columnIdx, width: groupWidth + \"px\", shimmerElements: shimmerElements }));\n            });\n            // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n            // until the column resizing logic is done.\n            shimmerElementsRow.push(react.createElement(ShimmerElementsGroup, { key: 'endGap', width: '100%', shimmerElements: [{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }] }));\n            return react.createElement(\"div\", { style: { display: 'flex' } }, shimmerElementsRow);\n        };\n        _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n        return _this;\n    }\n    ShimmeredDetailsListBase.prototype.render = function () {\n        var _a = this.props, detailsListStyles = _a.detailsListStyles, enableShimmer = _a.enableShimmer, items = _a.items, listProps = _a.listProps, onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder, removeFadingOverlay = _a.removeFadingOverlay, shimmerLines = _a.shimmerLines, styles = _a.styles, theme = _a.theme, ariaLabelForGrid = _a.ariaLabelForGrid, ariaLabelForShimmer = _a.ariaLabelForShimmer, restProps = (0,tslib_es6/* __rest */._T)(_a, [\"detailsListStyles\", \"enableShimmer\", \"items\", \"listProps\", \"onRenderCustomPlaceholder\", \"removeFadingOverlay\", \"shimmerLines\", \"styles\", \"theme\", \"ariaLabelForGrid\", \"ariaLabelForShimmer\"]);\n        var listClassName = listProps && listProps.className;\n        this._classNames = ShimmeredDetailsList_base_getClassNames(styles, {\n            theme: theme,\n        });\n        var newListProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({}, listProps), { \n            // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n            // and the overlay is not disabled by `removeFadingOverlay` prop.\n            className: enableShimmer && !removeFadingOverlay ? (0,css/* css */.i)(this._classNames.root, listClassName) : listClassName });\n        return (react.createElement(DetailsList, (0,tslib_es6/* __assign */.pi)({}, restProps, { styles: detailsListStyles, items: enableShimmer ? this._shimmerItems : items, isPlaceholderData: enableShimmer, ariaLabelForGrid: (enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid, onRenderMissingItem: this._onRenderShimmerPlaceholder, listProps: newListProps })));\n    };\n    return ShimmeredDetailsListBase;\n}(react.Component));\n\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/ShimmeredDetailsList.styles.js\nvar getShimmeredDetailsListStyles = function (props) {\n    var theme = props.theme;\n    var palette = theme.palette;\n    return {\n        root: {\n            position: 'relative',\n            selectors: {\n                ':after': {\n                    content: '\"\"',\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    bottom: 0,\n                    left: 0,\n                    // eslint-disable-next-line @fluentui/max-len\n                    backgroundImage: \"linear-gradient(to bottom, transparent 30%, \" + palette.whiteTranslucent40 + \" 65%,\" + palette.white + \" 100%)\",\n                },\n            },\n        },\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/DetailsList/ShimmeredDetailsList.js\n\n\n\nvar ShimmeredDetailsList = (0,styled/* styled */.z)(ShimmeredDetailsListBase, getShimmeredDetailsListStyles, undefined, { scope: 'ShimmeredDetailsList' });\n\n\n/***/ }),\n\n/***/ 5198:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"x\": function() { return /* binding */ MarqueeSelection; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/EventGroup.js\nvar EventGroup = __webpack_require__(9720);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/scroll.js\nvar lib_scroll = __webpack_require__(1649);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/getRect.js\nvar getRect = __webpack_require__(1403);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/AutoScroll.js\n\n\n\nvar SCROLL_ITERATION_DELAY = 16;\nvar SCROLL_GUTTER = 100;\nvar MAX_SCROLL_VELOCITY = 15;\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nvar AutoScroll = /** @class */ (function () {\n    function AutoScroll(element) {\n        this._events = new EventGroup/* EventGroup */.r(this);\n        this._scrollableParent = (0,lib_scroll/* findScrollableParent */.zj)(element);\n        this._incrementScroll = this._incrementScroll.bind(this);\n        this._scrollRect = (0,getRect/* getRect */.D)(this._scrollableParent);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this._scrollableParent === window) {\n            this._scrollableParent = document.body;\n        }\n        if (this._scrollableParent) {\n            this._events.on(window, 'mousemove', this._onMouseMove, true);\n            this._events.on(window, 'touchmove', this._onTouchMove, true);\n        }\n    }\n    AutoScroll.prototype.dispose = function () {\n        this._events.dispose();\n        this._stopScroll();\n    };\n    AutoScroll.prototype._onMouseMove = function (ev) {\n        this._computeScrollVelocity(ev);\n    };\n    AutoScroll.prototype._onTouchMove = function (ev) {\n        if (ev.touches.length > 0) {\n            this._computeScrollVelocity(ev);\n        }\n    };\n    AutoScroll.prototype._computeScrollVelocity = function (ev) {\n        if (!this._scrollRect) {\n            return;\n        }\n        var clientX;\n        var clientY;\n        if ('clientX' in ev) {\n            clientX = ev.clientX;\n            clientY = ev.clientY;\n        }\n        else {\n            clientX = ev.touches[0].clientX;\n            clientY = ev.touches[0].clientY;\n        }\n        var scrollRectTop = this._scrollRect.top;\n        var scrollRectLeft = this._scrollRect.left;\n        var scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n        var scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n        // variables to use for alternating scroll direction\n        var scrollRect;\n        var clientDirection;\n        var scrollClient;\n        // if either of these conditions are met we are scrolling vertically else horizontally\n        if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n            clientDirection = clientY;\n            scrollRect = scrollRectTop;\n            scrollClient = scrollClientBottom;\n            this._isVerticalScroll = true;\n        }\n        else {\n            clientDirection = clientX;\n            scrollRect = scrollRectLeft;\n            scrollClient = scrollClientRight;\n            this._isVerticalScroll = false;\n        }\n        // calculate scroll velocity and direction\n        if (clientDirection < scrollRect + SCROLL_GUTTER) {\n            this._scrollVelocity = Math.max(-MAX_SCROLL_VELOCITY, -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER));\n        }\n        else if (clientDirection > scrollClient) {\n            this._scrollVelocity = Math.min(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER));\n        }\n        else {\n            this._scrollVelocity = 0;\n        }\n        if (this._scrollVelocity) {\n            this._startScroll();\n        }\n        else {\n            this._stopScroll();\n        }\n    };\n    AutoScroll.prototype._startScroll = function () {\n        if (!this._timeoutId) {\n            this._incrementScroll();\n        }\n    };\n    AutoScroll.prototype._incrementScroll = function () {\n        if (this._scrollableParent) {\n            if (this._isVerticalScroll) {\n                this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n            }\n            else {\n                this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n            }\n        }\n        this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n    };\n    AutoScroll.prototype._stopScroll = function () {\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n            delete this._timeoutId;\n        }\n    };\n    return AutoScroll;\n}());\n\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/initializeComponentRef.js\nvar initializeComponentRef = __webpack_require__(6651);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/Async.js\nvar Async = __webpack_require__(2598);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/rtl.js\nvar rtl = __webpack_require__(327);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/math.js\nvar math = __webpack_require__(6432);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MarqueeSelection/MarqueeSelection.base.js\n\n\n\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nvar MIN_DRAG_DISTANCE = 5;\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nvar MarqueeSelectionBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(MarqueeSelectionBase, _super);\n    function MarqueeSelectionBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react.createRef();\n        _this._onMouseDown = function (ev) {\n            var _a = _this.props, isEnabled = _a.isEnabled, onShouldStartSelection = _a.onShouldStartSelection;\n            // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n            if (_this._isMouseEventOnScrollbar(ev)) {\n                return;\n            }\n            if (_this._isInSelectionToggle(ev)) {\n                return;\n            }\n            if (!_this._isTouch &&\n                isEnabled &&\n                !_this._isDragStartInSelection(ev) &&\n                (!onShouldStartSelection || onShouldStartSelection(ev))) {\n                if (_this._scrollableSurface && ev.button === 0 && _this._root.current) {\n                    _this._selectedIndicies = {};\n                    _this._preservedIndicies = undefined;\n                    _this._events.on(window, 'mousemove', _this._onAsyncMouseMove, true);\n                    _this._events.on(_this._scrollableParent, 'scroll', _this._onAsyncMouseMove);\n                    _this._events.on(window, 'click', _this._onMouseUp, true);\n                    _this._autoScroll = new AutoScroll(_this._root.current);\n                    _this._scrollTop = _this._scrollableSurface.scrollTop;\n                    _this._scrollLeft = _this._scrollableSurface.scrollLeft;\n                    _this._rootRect = _this._root.current.getBoundingClientRect();\n                    _this._onMouseMove(ev);\n                }\n            }\n        };\n        _this._onTouchStart = function (ev) {\n            _this._isTouch = true;\n            _this._async.setTimeout(function () {\n                _this._isTouch = false;\n            }, 0);\n        };\n        _this._onPointerDown = function (ev) {\n            if (ev.pointerType === 'touch') {\n                _this._isTouch = true;\n                _this._async.setTimeout(function () {\n                    _this._isTouch = false;\n                }, 0);\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._async = new Async/* Async */.e(_this);\n        _this._events = new EventGroup/* EventGroup */.r(_this);\n        _this.state = {\n            dragRect: undefined,\n        };\n        return _this;\n    }\n    MarqueeSelectionBase.prototype.componentDidMount = function () {\n        this._scrollableParent = (0,lib_scroll/* findScrollableParent */.zj)(this._root.current);\n        this._scrollableSurface = this._scrollableParent === window ? document.body : this._scrollableParent;\n        // When scroll events come from window, we need to read scrollTop values from the body.\n        var hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n        this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n        this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n        this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n    };\n    MarqueeSelectionBase.prototype.componentWillUnmount = function () {\n        if (this._autoScroll) {\n            this._autoScroll.dispose();\n        }\n        delete this._scrollableParent;\n        delete this._scrollableSurface;\n        this._events.dispose();\n        this._async.dispose();\n    };\n    MarqueeSelectionBase.prototype.render = function () {\n        var _a = this.props, rootProps = _a.rootProps, children = _a.children, theme = _a.theme, className = _a.className, styles = _a.styles;\n        var dragRect = this.state.dragRect;\n        var classNames = getClassNames(styles, {\n            theme: theme,\n            className: className,\n        });\n        return (react.createElement(\"div\", (0,tslib_es6/* __assign */.pi)({}, rootProps, { className: classNames.root, ref: this._root }),\n            children,\n            dragRect && react.createElement(\"div\", { className: classNames.dragMask }),\n            dragRect && (react.createElement(\"div\", { className: classNames.box, style: dragRect },\n                react.createElement(\"div\", { className: classNames.boxFill })))));\n    };\n    /** Determine if the mouse event occured on a scrollbar of the target element. */\n    MarqueeSelectionBase.prototype._isMouseEventOnScrollbar = function (ev) {\n        var targetElement = ev.target;\n        var targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n        var targetScrollbarHeight = targetElement.offsetHeight - targetElement.clientHeight;\n        if (targetScrollbarWidth || targetScrollbarHeight) {\n            var targetRect = targetElement.getBoundingClientRect();\n            // Check vertical scroll\n            if ((0,rtl/* getRTL */.zg)(this.props.theme)) {\n                if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n                    return true;\n                }\n            }\n            else {\n                if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n                    return true;\n                }\n            }\n            // Check horizontal scroll\n            if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n                return true;\n            }\n        }\n        return false;\n    };\n    MarqueeSelectionBase.prototype._getRootRect = function () {\n        return {\n            left: this._rootRect.left +\n                (this._scrollableSurface ? this._scrollLeft - this._scrollableSurface.scrollLeft : this._scrollLeft),\n            top: this._rootRect.top +\n                (this._scrollableSurface ? this._scrollTop - this._scrollableSurface.scrollTop : this._scrollTop),\n            width: this._rootRect.width,\n            height: this._rootRect.height,\n        };\n    };\n    MarqueeSelectionBase.prototype._onAsyncMouseMove = function (ev) {\n        var _this = this;\n        this._async.requestAnimationFrame(function () {\n            _this._onMouseMove(ev);\n        });\n        ev.stopPropagation();\n        ev.preventDefault();\n    };\n    MarqueeSelectionBase.prototype._onMouseMove = function (ev) {\n        if (!this._autoScroll) {\n            return;\n        }\n        if (ev.clientX !== undefined) {\n            this._lastMouseEvent = ev;\n        }\n        var rootRect = this._getRootRect();\n        var currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n        if (!this._dragOrigin) {\n            this._dragOrigin = currentPoint;\n        }\n        if (ev.buttons !== undefined && ev.buttons === 0) {\n            this._onMouseUp(ev);\n        }\n        else {\n            if (this.state.dragRect || (0,math/* getDistanceBetweenPoints */.Iw)(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n                if (!this.state.dragRect) {\n                    var selection = this.props.selection;\n                    if (!ev.shiftKey) {\n                        selection.setAllSelected(false);\n                    }\n                    this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n                }\n                // We need to constrain the current point to the rootRect boundaries.\n                var constrainedPoint = this.props.isDraggingConstrainedToRoot\n                    ? {\n                        left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent.clientX - rootRect.left)),\n                        top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent.clientY - rootRect.top)),\n                    }\n                    : {\n                        left: this._lastMouseEvent.clientX - rootRect.left,\n                        top: this._lastMouseEvent.clientY - rootRect.top,\n                    };\n                var dragRect = {\n                    left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n                    top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n                    width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n                    height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n                };\n                this._evaluateSelection(dragRect, rootRect);\n                this.setState({ dragRect: dragRect });\n            }\n        }\n        return false;\n    };\n    MarqueeSelectionBase.prototype._onMouseUp = function (ev) {\n        this._events.off(window);\n        this._events.off(this._scrollableParent, 'scroll');\n        if (this._autoScroll) {\n            this._autoScroll.dispose();\n        }\n        this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n        this._selectedIndicies = this._itemRectCache = undefined;\n        if (this.state.dragRect) {\n            this.setState({\n                dragRect: undefined,\n            });\n            ev.preventDefault();\n            ev.stopPropagation();\n        }\n    };\n    MarqueeSelectionBase.prototype._isPointInRectangle = function (rectangle, point) {\n        return (!!point.top &&\n            rectangle.top < point.top &&\n            rectangle.bottom > point.top &&\n            !!point.left &&\n            rectangle.left < point.left &&\n            rectangle.right > point.left);\n    };\n    /**\n     * We do not want to start the marquee if we're trying to marquee\n     * from within an existing marquee selection.\n     */\n    MarqueeSelectionBase.prototype._isDragStartInSelection = function (ev) {\n        var selection = this.props.selection;\n        if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n            return false;\n        }\n        var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n        for (var i = 0; i < allElements.length; i++) {\n            var element = allElements[i];\n            var index = Number(element.getAttribute('data-selection-index'));\n            if (selection.isIndexSelected(index)) {\n                var itemRect = element.getBoundingClientRect();\n                if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    MarqueeSelectionBase.prototype._isInSelectionToggle = function (ev) {\n        var element = ev.target;\n        while (element && element !== this._root.current) {\n            if (element.getAttribute('data-selection-toggle') === 'true') {\n                return true;\n            }\n            element = element.parentElement;\n        }\n        return false;\n    };\n    MarqueeSelectionBase.prototype._evaluateSelection = function (dragRect, rootRect) {\n        // Break early if we don't need to evaluate.\n        if (!dragRect || !this._root.current) {\n            return;\n        }\n        var selection = this.props.selection;\n        var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n        if (!this._itemRectCache) {\n            this._itemRectCache = {};\n        }\n        for (var i = 0; i < allElements.length; i++) {\n            var element = allElements[i];\n            var index = element.getAttribute('data-selection-index');\n            // Pull the memoized rectangle for the item, or the get the rect and memoize.\n            var itemRect = this._itemRectCache[index];\n            if (!itemRect) {\n                itemRect = element.getBoundingClientRect();\n                // Normalize the item rect to the dragRect coordinates.\n                itemRect = {\n                    left: itemRect.left - rootRect.left,\n                    top: itemRect.top - rootRect.top,\n                    width: itemRect.width,\n                    height: itemRect.height,\n                    right: itemRect.left - rootRect.left + itemRect.width,\n                    bottom: itemRect.top - rootRect.top + itemRect.height,\n                };\n                if (itemRect.width > 0 && itemRect.height > 0) {\n                    this._itemRectCache[index] = itemRect;\n                }\n            }\n            if (itemRect.top < dragRect.top + dragRect.height &&\n                itemRect.bottom > dragRect.top &&\n                itemRect.left < dragRect.left + dragRect.width &&\n                itemRect.right > dragRect.left) {\n                this._selectedIndicies[index] = true;\n            }\n            else {\n                delete this._selectedIndicies[index];\n            }\n        }\n        // set previousSelectedIndices to be all of the selected indices from last time\n        var previousSelectedIndices = this._allSelectedIndices || {};\n        this._allSelectedIndices = {};\n        // set all indices that are supposed to be selected in _allSelectedIndices\n        for (var index in this._selectedIndicies) {\n            if (this._selectedIndicies.hasOwnProperty(index)) {\n                this._allSelectedIndices[index] = true;\n            }\n        }\n        if (this._preservedIndicies) {\n            for (var _i = 0, _a = this._preservedIndicies; _i < _a.length; _i++) {\n                var index = _a[_i];\n                this._allSelectedIndices[index] = true;\n            }\n        }\n        // check if needs to update selection, only when current _allSelectedIndices\n        // is different than previousSelectedIndices\n        var needToUpdate = false;\n        for (var index in this._allSelectedIndices) {\n            if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n                needToUpdate = true;\n                break;\n            }\n        }\n        if (!needToUpdate) {\n            for (var index in previousSelectedIndices) {\n                if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n                    needToUpdate = true;\n                    break;\n                }\n            }\n        }\n        // only update selection when needed\n        if (needToUpdate) {\n            // Stop change events, clear selection to re-populate.\n            selection.setChangeEvents(false);\n            selection.setAllSelected(false);\n            for (var _b = 0, _c = Object.keys(this._allSelectedIndices); _b < _c.length; _b++) {\n                var index = _c[_b];\n                selection.setIndexSelected(Number(index), true, false);\n            }\n            selection.setChangeEvents(true);\n        }\n    };\n    MarqueeSelectionBase.defaultProps = {\n        rootTagName: 'div',\n        rootProps: {},\n        isEnabled: true,\n    };\n    return MarqueeSelectionBase;\n}(react.Component));\n\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MarqueeSelection/MarqueeSelection.styles.js\n\nvar getStyles = function (props) {\n    var _a, _b, _c;\n    var theme = props.theme, className = props.className;\n    var palette = theme.palette;\n    return {\n        root: [\n            className,\n            {\n                position: 'relative',\n                cursor: 'default',\n            },\n        ],\n        dragMask: [\n            {\n                position: 'absolute',\n                background: 'rgba(255, 0, 0, 0)',\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0,\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = {\n                        background: 'none',\n                        backgroundColor: 'transparent',\n                    },\n                    _a),\n            },\n        ],\n        box: [\n            {\n                position: 'absolute',\n                boxSizing: 'border-box',\n                border: \"1px solid \" + palette.themePrimary,\n                pointerEvents: 'none',\n                zIndex: 10,\n                selectors: (_b = {},\n                    _b[lib/* HighContrastSelector */.qJ] = {\n                        borderColor: 'Highlight',\n                    },\n                    _b),\n            },\n        ],\n        boxFill: [\n            {\n                position: 'absolute',\n                boxSizing: 'border-box',\n                backgroundColor: palette.themePrimary,\n                opacity: 0.1,\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0,\n                selectors: (_c = {},\n                    _c[lib/* HighContrastSelector */.qJ] = {\n                        background: 'none',\n                        backgroundColor: 'transparent',\n                    },\n                    _c),\n            },\n        ],\n    };\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/MarqueeSelection/MarqueeSelection.js\n\n\n\nvar MarqueeSelection = \n// TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit\n// with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not\n// in IMarqueeSelectionProps.\n(0,styled/* styled */.z)(MarqueeSelectionBase, getStyles, undefined, {\n    scope: 'MarqueeSelection',\n});\n\n\n/***/ }),\n\n/***/ 8262:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"U\": function() { return /* binding */ DelayedRender; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3499);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3370);\n/* harmony import */ var _dom_getWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6451);\n\n\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__extends */ .ZT)(DelayedRender, _super);\n    function DelayedRender(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            isRendered: (0,_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__/* .getWindow */ .J)() === undefined,\n        };\n        return _this;\n    }\n    DelayedRender.prototype.componentDidMount = function () {\n        var _this = this;\n        var delay = this.props.delay;\n        this._timeoutId = window.setTimeout(function () {\n            _this.setState({\n                isRendered: true,\n            });\n        }, delay);\n    };\n    DelayedRender.prototype.componentWillUnmount = function () {\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n        }\n    };\n    DelayedRender.prototype.render = function () {\n        return this.state.isRendered ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children) : null;\n    };\n    DelayedRender.defaultProps = {\n        delay: 0,\n    };\n    return DelayedRender;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n/***/ }),\n\n/***/ 1403:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"D\": function() { return /* binding */ getRect; }\n/* harmony export */ });\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nfunction getRect(element) {\n    var rect;\n    if (element) {\n        if (element === window) {\n            rect = {\n                left: 0,\n                top: 0,\n                width: window.innerWidth,\n                height: window.innerHeight,\n                right: window.innerWidth,\n                bottom: window.innerHeight,\n            };\n        }\n        else if (element.getBoundingClientRect) {\n            rect = element.getBoundingClientRect();\n        }\n    }\n    return rect;\n}\n\n\n/***/ }),\n\n/***/ 8228:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Y\": function() { return /* binding */ Selection; }\n/* harmony export */ });\n/* harmony import */ var _Selection_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\n/* harmony import */ var _EventGroup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9720);\n\n\n/**\n * {@docCategory Selection}\n */\nvar Selection = /** @class */ (function () {\n    /**\n     * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n     * object with a `getKey` implementation. Providing options is optional otherwise.\n     * (At most one `options` object is accepted.)\n     */\n    function Selection() {\n        var options = []; // Otherwise, arguments require options with `getKey`.\n        for (var _i = 0 // Otherwise, arguments require options with `getKey`.\n        ; _i < arguments.length // Otherwise, arguments require options with `getKey`.\n        ; _i++ // Otherwise, arguments require options with `getKey`.\n        ) {\n            options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.\n        }\n        var _a = options[0] || {}, onSelectionChanged = _a.onSelectionChanged, onItemsChanged = _a.onItemsChanged, getKey = _a.getKey, _b = _a.canSelectItem, canSelectItem = _b === void 0 ? function () { return true; } : _b, items = _a.items, _c = _a.selectionMode, selectionMode = _c === void 0 ? _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.multiple */ .oW.multiple : _c;\n        this.mode = selectionMode;\n        this._getKey = getKey || defaultGetKey;\n        this._changeEventSuppressionCount = 0;\n        this._exemptedCount = 0;\n        this._anchoredIndex = 0;\n        this._unselectableCount = 0;\n        this._onSelectionChanged = onSelectionChanged;\n        this._onItemsChanged = onItemsChanged;\n        this._canSelectItem = canSelectItem;\n        this._keyToIndexMap = {};\n        this._isModal = false;\n        this.setItems(items || [], true);\n        this.count = this.getSelectedCount();\n    }\n    Selection.prototype.canSelectItem = function (item, index) {\n        if (typeof index === 'number' && index < 0) {\n            return false;\n        }\n        return this._canSelectItem(item, index);\n    };\n    Selection.prototype.getKey = function (item, index) {\n        var key = this._getKey(item, index);\n        return typeof key === 'number' || key ? \"\" + key : '';\n    };\n    Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {\n        this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n        if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n            this._hasChanged = false;\n            if (!suppressChange) {\n                this._change();\n            }\n        }\n    };\n    Selection.prototype.isModal = function () {\n        return this._isModal;\n    };\n    Selection.prototype.setModal = function (isModal) {\n        if (this._isModal !== isModal) {\n            this.setChangeEvents(false);\n            this._isModal = isModal;\n            if (!isModal) {\n                this.setAllSelected(false);\n            }\n            this._change();\n            this.setChangeEvents(true);\n        }\n    };\n    /**\n     * Selection needs the items, call this method to set them. If the set\n     * of items is the same, this will re-evaluate selection and index maps.\n     * Otherwise, shouldClear should be set to true, so that selection is\n     * cleared.\n     */\n    Selection.prototype.setItems = function (items, shouldClear) {\n        if (shouldClear === void 0) { shouldClear = true; }\n        var newKeyToIndexMap = {};\n        var newUnselectableIndices = {};\n        var hasSelectionChanged = false;\n        this.setChangeEvents(false);\n        // Reset the unselectable count.\n        this._unselectableCount = 0;\n        var haveItemsChanged = false;\n        // Build lookup table for quick selection evaluation.\n        for (var i = 0; i < items.length; i++) {\n            var item = items[i];\n            if (item) {\n                var key = this.getKey(item, i);\n                if (key) {\n                    if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n                        haveItemsChanged = true;\n                    }\n                    newKeyToIndexMap[key] = i;\n                }\n            }\n            newUnselectableIndices[i] = item && !this.canSelectItem(item);\n            if (newUnselectableIndices[i]) {\n                this._unselectableCount++;\n            }\n        }\n        if (shouldClear || items.length === 0) {\n            this._setAllSelected(false, true);\n        }\n        // Check the exemption list for discrepencies.\n        var newExemptedIndicies = {};\n        var newExemptedCount = 0;\n        for (var indexProperty in this._exemptedIndices) {\n            if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n                var index = Number(indexProperty);\n                var item = this._items[index];\n                var exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n                var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n                if (newIndex === undefined) {\n                    // The item has likely been replaced or removed.\n                    hasSelectionChanged = true;\n                }\n                else {\n                    // We know the new index of the item. update the existing exemption table.\n                    newExemptedIndicies[newIndex] = true;\n                    newExemptedCount++;\n                    hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n                }\n            }\n        }\n        if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n            // If everything was selected but the number of items has changed, selection has changed.\n            hasSelectionChanged = true;\n        }\n        if (!haveItemsChanged) {\n            for (var _i = 0, _a = Object.keys(this._keyToIndexMap); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (!(key in newKeyToIndexMap)) {\n                    haveItemsChanged = true;\n                    break;\n                }\n            }\n        }\n        this._exemptedIndices = newExemptedIndicies;\n        this._exemptedCount = newExemptedCount;\n        this._keyToIndexMap = newKeyToIndexMap;\n        this._unselectableIndices = newUnselectableIndices;\n        this._items = items;\n        this._selectedItems = null;\n        if (hasSelectionChanged) {\n            this._updateCount();\n        }\n        if (haveItemsChanged) {\n            _EventGroup__WEBPACK_IMPORTED_MODULE_1__/* .EventGroup.raise */ .r.raise(this, _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SELECTION_ITEMS_CHANGE */ .xC);\n            if (this._onItemsChanged) {\n                this._onItemsChanged();\n            }\n        }\n        if (hasSelectionChanged) {\n            this._change();\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.getItems = function () {\n        return this._items;\n    };\n    Selection.prototype.getSelection = function () {\n        if (!this._selectedItems) {\n            this._selectedItems = [];\n            var items = this._items;\n            if (items) {\n                for (var i = 0; i < items.length; i++) {\n                    if (this.isIndexSelected(i)) {\n                        this._selectedItems.push(items[i]);\n                    }\n                }\n            }\n        }\n        return this._selectedItems;\n    };\n    Selection.prototype.getSelectedCount = function () {\n        return this._isAllSelected\n            ? this._items.length - this._exemptedCount - this._unselectableCount\n            : this._exemptedCount;\n    };\n    Selection.prototype.getSelectedIndices = function () {\n        if (!this._selectedIndices) {\n            this._selectedIndices = [];\n            var items = this._items;\n            if (items) {\n                for (var i = 0; i < items.length; i++) {\n                    if (this.isIndexSelected(i)) {\n                        this._selectedIndices.push(i);\n                    }\n                }\n            }\n        }\n        return this._selectedIndices;\n    };\n    Selection.prototype.getItemIndex = function (key) {\n        var index = this._keyToIndexMap[key];\n        return index !== null && index !== void 0 ? index : -1;\n    };\n    Selection.prototype.isRangeSelected = function (fromIndex, count) {\n        if (count === 0) {\n            return false;\n        }\n        var endIndex = fromIndex + count;\n        for (var i = fromIndex; i < endIndex; i++) {\n            if (!this.isIndexSelected(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Selection.prototype.isAllSelected = function () {\n        var selectableCount = this._items.length - this._unselectableCount;\n        // In single mode, we can only have a max of 1 item.\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.single */ .oW.single) {\n            selectableCount = Math.min(selectableCount, 1);\n        }\n        return ((this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n            (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0));\n    };\n    Selection.prototype.isKeySelected = function (key) {\n        var index = this._keyToIndexMap[key];\n        return this.isIndexSelected(index);\n    };\n    Selection.prototype.isIndexSelected = function (index) {\n        return !!((this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n            (!this._isAllSelected && this._exemptedIndices[index]));\n    };\n    Selection.prototype.setAllSelected = function (isAllSelected) {\n        if (isAllSelected && this.mode !== _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.multiple */ .oW.multiple) {\n            return;\n        }\n        var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n        this.setChangeEvents(false);\n        if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n            this._exemptedIndices = {};\n            if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n                this._exemptedCount = 0;\n                this._isAllSelected = isAllSelected;\n                this._change();\n            }\n            this._updateCount();\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {\n        var index = this._keyToIndexMap[key];\n        if (index >= 0) {\n            this.setIndexSelected(index, isSelected, shouldAnchor);\n        }\n    };\n    Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.none */ .oW.none) {\n            return;\n        }\n        // Clamp the index.\n        index = Math.min(Math.max(0, index), this._items.length - 1);\n        // No-op on out of bounds selections.\n        if (index < 0 || index >= this._items.length) {\n            return;\n        }\n        this.setChangeEvents(false);\n        var isExempt = this._exemptedIndices[index];\n        var canSelect = !this._unselectableIndices[index];\n        if (canSelect) {\n            if (isSelected && this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.single */ .oW.single) {\n                // If this is single-select, the previous selection should be removed.\n                this._setAllSelected(false, true);\n            }\n            // Determine if we need to remove the exemption.\n            if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n                delete this._exemptedIndices[index];\n                this._exemptedCount--;\n            }\n            // Determine if we need to add the exemption.\n            if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n                this._exemptedIndices[index] = true;\n                this._exemptedCount++;\n            }\n            if (shouldAnchor) {\n                this._anchoredIndex = index;\n            }\n        }\n        this._updateCount();\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.setRangeSelected = function (fromIndex, count, isSelected, shouldAnchor) {\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.none */ .oW.none) {\n            return;\n        }\n        // Clamp the index.\n        fromIndex = Math.min(Math.max(0, fromIndex), this._items.length - 1);\n        // Clamp the range.\n        count = Math.min(Math.max(0, count), this._items.length - fromIndex);\n        // No-op on out of bounds selections.\n        if (fromIndex < 0 || fromIndex >= this._items.length || count === 0) {\n            return;\n        }\n        this.setChangeEvents(false);\n        var anchorIndex = this._anchoredIndex || 0;\n        var startIndex = fromIndex;\n        var endIndex = fromIndex + count - 1;\n        var newAnchorIndex = anchorIndex >= endIndex ? startIndex : endIndex;\n        for (; startIndex <= endIndex; startIndex++) {\n            this.setIndexSelected(startIndex, isSelected, shouldAnchor ? startIndex === newAnchorIndex : false);\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.selectToKey = function (key, clearSelection) {\n        this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n    };\n    Selection.prototype.selectToRange = function (fromIndex, count, clearSelection) {\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.none */ .oW.none) {\n            return;\n        }\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.single */ .oW.single) {\n            if (count === 1) {\n                this.setIndexSelected(fromIndex, true, true);\n            }\n            return;\n        }\n        var anchorIndex = this._anchoredIndex || 0;\n        var startIndex = Math.min(fromIndex, anchorIndex);\n        var endIndex = Math.max(fromIndex + count - 1, anchorIndex);\n        this.setChangeEvents(false);\n        if (clearSelection) {\n            this._setAllSelected(false, true);\n        }\n        for (; startIndex <= endIndex; startIndex++) {\n            this.setIndexSelected(startIndex, true, false);\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.selectToIndex = function (index, clearSelection) {\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.none */ .oW.none) {\n            return;\n        }\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.single */ .oW.single) {\n            this.setIndexSelected(index, true, true);\n            return;\n        }\n        var anchorIndex = this._anchoredIndex || 0;\n        var startIndex = Math.min(index, anchorIndex);\n        var endIndex = Math.max(index, anchorIndex);\n        this.setChangeEvents(false);\n        if (clearSelection) {\n            this._setAllSelected(false, true);\n        }\n        for (; startIndex <= endIndex; startIndex++) {\n            this.setIndexSelected(startIndex, true, false);\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype.toggleAllSelected = function () {\n        this.setAllSelected(!this.isAllSelected());\n    };\n    Selection.prototype.toggleKeySelected = function (key) {\n        this.setKeySelected(key, !this.isKeySelected(key), true);\n    };\n    Selection.prototype.toggleIndexSelected = function (index) {\n        this.setIndexSelected(index, !this.isIndexSelected(index), true);\n    };\n    Selection.prototype.toggleRangeSelected = function (fromIndex, count) {\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.none */ .oW.none) {\n            return;\n        }\n        var isRangeSelected = this.isRangeSelected(fromIndex, count);\n        var endIndex = fromIndex + count;\n        if (this.mode === _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.single */ .oW.single && count > 1) {\n            return;\n        }\n        this.setChangeEvents(false);\n        for (var i = fromIndex; i < endIndex; i++) {\n            this.setIndexSelected(i, !isRangeSelected, false);\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype._updateCount = function (preserveModalState) {\n        if (preserveModalState === void 0) { preserveModalState = false; }\n        var count = this.getSelectedCount();\n        if (count !== this.count) {\n            this.count = count;\n            this._change();\n        }\n        if (!this.count && !preserveModalState) {\n            this.setModal(false);\n        }\n    };\n    Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {\n        if (preserveModalState === void 0) { preserveModalState = false; }\n        if (isAllSelected && this.mode !== _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SelectionMode.multiple */ .oW.multiple) {\n            return;\n        }\n        var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n        this.setChangeEvents(false);\n        if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n            this._exemptedIndices = {};\n            if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n                this._exemptedCount = 0;\n                this._isAllSelected = isAllSelected;\n                this._change();\n            }\n            this._updateCount(preserveModalState);\n        }\n        this.setChangeEvents(true);\n    };\n    Selection.prototype._change = function () {\n        if (this._changeEventSuppressionCount === 0) {\n            this._selectedItems = null;\n            this._selectedIndices = undefined;\n            _EventGroup__WEBPACK_IMPORTED_MODULE_1__/* .EventGroup.raise */ .r.raise(this, _Selection_types__WEBPACK_IMPORTED_MODULE_0__/* .SELECTION_CHANGE */ .F5);\n            if (this._onSelectionChanged) {\n                this._onSelectionChanged();\n            }\n        }\n        else {\n            this._hasChanged = true;\n        }\n    };\n    return Selection;\n}());\n\nfunction defaultGetKey(item, index) {\n    // 0 may be used as a key\n    var _a = (item || {}).key, key = _a === void 0 ? \"\" + index : _a;\n    return key;\n}\n\n\n/***/ }),\n\n/***/ 8487:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"F5\": function() { return /* binding */ SELECTION_CHANGE; },\n/* harmony export */   \"oW\": function() { return /* binding */ SelectionMode; },\n/* harmony export */   \"xC\": function() { return /* binding */ SELECTION_ITEMS_CHANGE; }\n/* harmony export */ });\n/* unused harmony export SelectionDirection */\nvar SELECTION_CHANGE = 'change';\nvar SELECTION_ITEMS_CHANGE = 'items-change';\n/**\n * {@docCategory Selection}\n */\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[SelectionMode[\"none\"] = 0] = \"none\";\n    SelectionMode[SelectionMode[\"single\"] = 1] = \"single\";\n    SelectionMode[SelectionMode[\"multiple\"] = 2] = \"multiple\";\n})(SelectionMode || (SelectionMode = {}));\n/**\n * {@docCategory Selection}\n */\nvar SelectionDirection;\n(function (SelectionDirection) {\n    SelectionDirection[SelectionDirection[\"horizontal\"] = 0] = \"horizontal\";\n    SelectionDirection[SelectionDirection[\"vertical\"] = 1] = \"vertical\";\n})(SelectionDirection || (SelectionDirection = {}));\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","e","assertPath","JSON","stringify","normalizeStringPosix","r","f","t","i","n","a","l","length","charCodeAt","s","lastIndexOf","slice","resolve","arguments","undefined","normalize","isAbsolute","join","relative","o","u","h","c","g","_makeLong","dirname","basename","extname","format","dir","root","base","name","ext","parse","sep","delimiter","win32","posix","exports","__nccwpck_require__","ab","__dirname","__unused_webpack_module","__webpack_exports__","__webpack_require__","FileIconType","d","FileTypeIconMap","accdb","extensions","archive","audio","calendar","classifier","code","contact","csv","desktopfolder","docset","documentsfolder","docx","dotx","email","exe","favoritesfolder","folder","font","form","genericfile","html","ipynb","link","linkedfolder","listitem","loop","officescript","splist","model","mpp","mpt","multiple","one","onetoc","pbiapp","pdf","photo","photo360","picturesfolder","potx","powerbi","ppsx","pptx","presentation","pub","spo","sponews","spreadsheet","rtf","sharedfolder","playlist","sway","sysfile","txt","vaultclosed","vaultopen","vector","video","video360","vsdx","vssx","vstx","whiteboard","xlsx","xltx","xml","xsn","zip","getFileTypeIconProps","_extensionToIconName","_FileTypeIconMap__WEBPACK_IMPORTED_MODULE_0__","_FileIconType__WEBPACK_IMPORTED_MODULE_1__","GENERIC_FILE","options","size","imageFileType","devicePixelRatio","devicePixelRatioSuffix","extension","type","iconName","iconBaseName","$","hasOwnProperty","replace","toLowerCase","I","listItem","sharedFolder","stream","news","desktopFolder","documentsFolder","picturesFolder","linkedFolder","list","window","initializeFileTypeIcons","react__WEBPACK_IMPORTED_MODULE_0__","_fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__","_FileTypeIconMap__WEBPACK_IMPORTED_MODULE_2__","PNG_SUFFIX","SVG_SUFFIX","ICON_SIZES","baseUrl","forEach","iconTypes","fileTypeIcons","Object","keys","baseUrlSizeType","createElement","src","alt","height","width","fm","fontFace","style","overflow","icons","mergeImageProps","Breadcrumb","styled","tslib_es6","react","classNamesFunction","rtl","properties","initializeComponentRef","FocusZone","FocusZone_types","Link","Icon","IconButton","DirectionalHint","ResizeGroup","TooltipHost","TooltipHost_types","composeRenderFunction","getClassNames","y","nullFunction","nonActionableItemProps","styles","props","selectors","color","theme","semanticColors","bodyText","BreadcrumbBase","_super","_this","call","_focusZone","createRef","_onReduceData","data","renderedItems","renderedOverflowItems","overflowIndex","movedItem","ev","splice","pi","_onGrowData","_a","maxDisplayedItems","pop","_onRenderBreadcrumb","ariaLabel","_b","dividerAs","DividerType","J","onRenderItem","overflowAriaLabel","onRenderOverflowIcon","overflowButtonAs","contextualItems","map","item","isActionable","onClick","href","text","key","_onBreadcrumbClicked","bind","disabled","itemProps","lastItemIndex","hasOverflowItems","itemElements","index","finalOnRenderItem","_onRenderItem","onRender","k","className","_classNames","String","chevron","zg","OverflowButton","overflowButton","iconProps","role","onRenderMenuIcon","menuProps","items","directionalHint","b","bottomLeftEdge","nativeProps","pq","iY","componentRef","direction","U","horizontal","focusZoneProps","as","isCurrentItem","onRenderContent","additionalProps","_T","finalOnRenderContent","defaultOnRenderCrumbContent","onRenderItemContent","itemLink","G","content","overflowMode","Parent","tooltipHostProps","_validateProps","ZT","prototype","focus","current","render","onReduceData","_c","onGrowData","breadcrumbData","N","onRenderData","defaultProps","Component","Fragment","lib","setFocusVisibility","GlobalClassNames","SingleLineTextStyle","whiteSpace","textOverflow","MinimumScreenSelector","sK","mV","MediumScreenSelector","dd","yp","z","_d","_e","palette","fonts","classNames","Cn","itemBackgroundHoveredColor","menuItemBackgroundHovered","itemBackgroundPressedColor","menuItemBackgroundPressed","itemTextColor","neutralSecondary","itemTextFontWeight","lq","regular","itemTextHoveredOrPressedColor","neutralPrimary","itemLastChildTextColor","itemLastChildTextFontWeight","semibold","chevronButtonColor","overflowButtonColor","lastChildItemStyles","fontWeight","itemStateSelectors","backgroundColor","cursor","qJ","textDecoration","commonItemStyles","padding","lineHeight","fontSize","medium","margin","display","alignItems","listStyleType","position","MsHighContrastAdjust","forcedColorAdjust","small","xM","GL","highContrastStyle","left","right","top","bottom","mediumPlus","neutralDark","G$","outline","scope","ColumnActionsMode","ConstrainMode","ColumnDragEndLocation","DetailsListLayoutMode","CheckboxVisibility","ShimmeredDetailsList","CollapseAllVisibility","SelectAllVisibility","SpinnerSize","SpinnerType","ShimmerElementType","ShimmerElementsDefaultHeights","css","Selection_types","memoize","KeyCodes","useFocusRects","Async","elementContains","DetailsList_types","EventGroup","getId","FontIcon","Layer","GroupSpacer","count","indentWidth","nativeElementMap","label","mp","vF","NI","ol","t$","li","PT","h2","button","Yq","input","Gg","textarea","FI","select","bL","option","Qy","table","$B","tr","PC","th","fI","td","IX","colGroup","YG","col","qi","NX","iframe","SZ","img","it","CheckBase","forwardRef","ref","checked","useFastIcons","IconComponent","xu","circle","check","displayName","CheckGlobalClassNames","checkHost","Check","_f","checkBoxHeight","isRTL","sharedCircleCheck","textAlign","justifyContent","verticalAlign","userSelect","borderRadius","opacity","background","bodyBackground","themePrimary","white","ld","border","Link_styles","DetailsRowGlobalClassNames","compact","cell","cellAnimation","cellCheck","cellMeasurer","listCellFirstChild","isContentUnselectable","isSelected","isCheckVisible","isRowHeader","fields","DEFAULT_CELL_STYLE_PROPS","cellLeftPadding","cellRightPadding","cellExtraRightPadding","DEFAULT_ROW_HEIGHTS","rowHeight","compactRowHeight","values","rowVerticalPadding","compactRowVerticalPadding","tooltipHost","cellIsCheck","collapseButton","isCollapsed","isAllSelected","isSelectAllHidden","isResizingColumn","cellSizer","isResizing","dropHintCircleStyle","dropHintCaretStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVertical","checkTooltip","getCellStyles","cellStyleProps","boxSizing","DetailsRowCheck_styles_GlobalClassNames","isDisabled","isHeader","DetailsRowCheck_getClassNames","FastCheck","memo","_defaultCheckboxRender","checkboxProps","_fastDefaultCheckboxRender","DetailsRowCheck","allowedPropNames","isVisible","canSelect","anySelected","selected","selectionMode","checkClassName","onRenderDetailsCheckbox","buttonProps","defaultCheckboxRender","onRenderCheckbox","divProps","checkRole","oW","single","tabIndex","getDocument","DragDropHelper","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","dispose","_events","subscribe","events","dragDropOptions","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","doc","M","on","body","_onMouseUp","_onDocumentMouseUp","handlers","eventMap","context","updateDropState_1","updateDropState","dragDropTarget","_isDraggable","_isDroppable","_i","eventMap_1","event_1","handler","callback","eventName","event","isHandled","preventDefault","_onMouseDown","_onDragEnd","getSelection","_isDragging","dataTransfer","setData","id","target","handlers_1","off","unsubscribe","_dragData","dropTarget","raise","documentElement","_onMouseMove","buttons","_isChild","_onMouseLeave","clientX","clientY","eventTarget","dragTarget","parentElement","childElement","canDrag","dragContext","canDrop","DetailsColumn_base_getClassNames","defaultOnRenderHeader","column","isIconOnly","accessibleLabel","DetailsColumnBase","_root","_onRenderFilterIcon","columnProps","_onRenderColumnHeaderTooltip","hostClassName","children","_onColumnClick","onColumnClick","columnActionsMode","_1","_onDragStart","itemIndex","selectedItems","_updateHeaderDragInfo","classList","add","borderWhileDragging","_async","setTimeout","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","_onColumnContextMenu","onColumnContextMenu","_onRootMouseDown","stopPropagation","parentId","onRenderColumnHeaderTooltip","headerClassName","iconClassName","isEmpty","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","transitionDurationDrag","transitionDurationDrop","onRenderFilterIcon","onRenderHeader","hasInnerButton","accNameDescription","_hasAccessibleDescription","isSortedDescending","draggable","calculatedWidth","gripperBarVerticalStyle","cellTooltip","setAriaDescribedBy","onContextMenu","hasDropdown","isMenuOpen","nearIcon","showSortIconWhenUnsorted","sortIcon","_renderAccessibleDescription","componentDidMount","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","TRANSITION_DURATION_DROP","componentWillUnmount","_dragDropSubscription","componentDidUpdate","_getColumnDragDropOptions","columnIndex","selectionIndex","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","sortableAriaLabel","hidden","DetailsColumn_styles_GlobalClassNames","DetailsColumn","colors","iconForegroundColor","bodySubtext","headerForegroundColor","headerBackgroundColor","dropdownChevronForegroundColor","resizerColor","neutralTertiaryAlt","nearIconStyle","paddingLeft","borderAfterDragOrDrop","outlineColor","listHeaderBackgroundHovered","listHeaderBackgroundPressed","paddingRight","neutralTertiary","flexDirection","alignContent","maxHeight","flexWrap","flex","ul","transition","DetailsHeader_base_getClassNames","NO_COLUMNS","DetailsHeaderBase","_rootElement","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","_resetDropHints","_onDragOver","_computeDropHintToBeShown","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevRef","columns","prevX","prevMid","frozenColumnCountFromStart","frozenColumnCountFromEnd","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","eventXRelativePosition","clientRect","getBoundingClientRect","currentDropHintIndex","_liesBetween","lastValidColumn","indexToUpdate","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_renderColumnSizer","columnResizeDetails","state","isResizable","_stopPropagation","onBlur","_onSizerBlur","cellSizerStart","cellSizerEnd","cellIsResizing","onDoubleClick","_onSizerDoubleClick","_onSelectAllClicked","toggleAllSelected","columnIndexAttr","getAttribute","Number","setState","columnMinWidth","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","increment","which","m","enter","shiftKey","_onSizerMouseMove","onColumnIsSizingChanged","_onSizerMouseUp","movement","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_id","_dragDropHelper","minimumPixelsForDrag","F5","_onSelectionChanged","_subscriptionObject","_getHeaderDragDropOptions","prevProps","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","groupNestingDepth","checkboxVisibility","showCheckbox","none","isCheckboxHidden","isCheckboxAlwaysVisible","tY","always","showGroupExpander","collapseAllVisibility","visible","columnIndexOffset","elementRef","onMouseMove","cellIsGroupExpander","_renderDropHint","_renderColumnDivider","sizingOverlay","onMouseUp","columnReorderOptions","element","displayProperty","childNodes","fQ","header","onRenderDivider","dropHintIndex","dropHintStyle","onColumnAutoResized","DetailsHeader","cellSizerFadeInStyles","cellStyles","minWidth","paddingBottom","paddingTop","borderBottom","bodyDivider","cellWrapperPadded","neutralLighter","neutralLight","cellIsActionable","cellIsEmpty","e2","zIndex","boxShadow","marginLeft","transformOrigin","transform","visibility","object","composeComponentAs","getCellText","value","fieldName","toString","DetailsRowFields","rowClassNames","onRenderItemColumn","getCellValueKey","propsOnRenderField","onRenderField","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","useRef","cellValueKeys","defaultOnRenderField","useCallback","fieldProps","cellValueKey","fieldItem","fieldItemIndex","isMultiline","cellPadded","cellUnpadded","getValueKey","defaultOnRender","previousValueKey","showAnimation","DetailsRow_base_getClassNames","DetailsRow_base_NO_COLUMNS","DetailsRowBase","_cellMeasurer","selectionState","getSelectionState","Vv","isDropping","dragDropEvents","_droppingClassNames","columnMeasureInfo","getDerivedStateFromProps","nextProps","previousState","onDidMount","_getRowDragDropOptions","_onDidMountCalled","previousProps","newWidth","onMeasureDone","onWillUnmount","shouldComponentUpdate","nextState","useReducedRowRenderer","newSelectionState","flatIndexOffset","onRenderCheck","_onRenderCheck","rowWidth","getRowAriaLabel","getRowAriaDescription","getRowAriaDescribedBy","isGridRow","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","group","_g","_h","_j","_k","_l","isSelectionModal","droppingClassName","ariaRowDescription","ariaDescribedBy","canSelectItem","ariaSelected","ariaPositionInSet","ariaSetSize","focusZoneDirection","_rowClassNames","RowFields","Z","rowFields","columnStartIndex","_ariaRowDescriptionId","hasRowHeader","some","n7","allowFocusRoot","checkCell","checkCover","measureCell","maxWidth","forceIntoFirstElement","eventsToRegister","isIndexSelected","isModal","DetailsRow","_m","_o","_p","_q","neutralQuaternaryAlt","_r","focusBorder","focusedLinkColor","linkHovered","defaultHeaderText","defaultMetaText","defaultBackground","defaultHoverHeaderText","defaultHoverMetaText","defaultHoverBackground","selectedHeaderText","selectedMetaText","selectedBackground","selectedHoverHeaderText","selectedHoverMetaText","selectedHoverBackground","focusHeaderText","focusMetaText","focusBackground","focusHoverBackground","selectedStyles","inset","borderColor","borderTop","W","cannotSelectStyles","rootCompactStyles","minHeight","cellCompactStyles","defaultCellStyles","k4","fadeIn400","flexShrink","flexGrow","Ic","slideLeftIn40","marginTop","wordBreak","getParent","getWindow","lib_scroll","lib_focus","SELECTION_INDEX_ATTRIBUTE_NAME","SELECTION_TOGGLE_ATTRIBUTE_NAME","SELECTION_INVOKE_ATTRIBUTE_NAME","SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME","SelectionZone","ignoreNextFocus","_handleNextFocus","_onSelectionChange","_onMouseDownCapture","document","activeElement","_hasAttribute","_onFocus","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","_getSelectionMode","_shouldHandleFocus","isToggle","itemRoot","_findItemRoot","_getItemIndex","_getItemSpan","setIndexSelected","enterModalOnTouch","_isTouch","setModal","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","toggleWithoutModifierPressed","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","disableAutoSelectOnInputElements","tagName","_onInvokeMouseDown","_onTouchStartCapture","_onClick","enableTouchInvocationTarget","isSelectionDisabled","_onToggleAllClick","span","_onToggleClick","_onInvokeClick","_onContextMenu","onItemContextMenu","getItems","nativeEvent","_onDoubleClick","onItemInvoked","_isInputElement","_onKeyDownCapture","_onKeyDown","selectionClearedOnEscapePress","isSelectAllKey","isClearSelectionKey","escape","setAllSelected","getSelectedCount","space","prevState","win","_findScrollParentAndTryClearOnEmptyClick","onKeyDown","onKeyDownCapture","onMouseDownCapture","onFocusCapture","setChangeEvents","isRangeSelected","toggleRangeSelected","toggleIndexSelected","_isTabPressed","selectToRange","selectToIndex","_clearAndSelectIndex","scrollParent","zj","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","selectionClearedOnSurfaceClick","setRangeSelected","ctrlKey","metaKey","keyCode","tab","indexValue","parseInt","isNaN","spanValue","attributeName","MW","hasAttribute","handleFocus","_shouldHandleFocusTimeoutId","clearTimeout","isTouch","_isTouchTimeoutId","mode","Selection","GroupedList_styles_GlobalClassNames","listCell","beziers","easeInOutSine","GroupHeader_styles_GlobalClassNames","dropIcon","expand","title","iconTag","GroupHeader_styles_beziers","easeOutCirc","easeOutSine","easeInBack","DelayedRender","Spinner_base_getClassNames","SpinnerBase","apply","ariaLive","labelPosition","styleSize","large","statusMessage","screenReaderText","Spinner_styles_GlobalClassNames","spinAnimation","NF","F4","Spinner","themeLight","borderTopColor","animationName","animationDuration","animationIterationCount","animationTimingFunction","xSmall","GroupHeader_base_getClassNames","GroupHeaderBase","_toggleCollapse","onToggleCollapse","isGroupLoading","newLoadingVisible","isLoadingVisible","_onKeyUp","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","dP","shouldClose","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","onRenderName","_onRenderName","ariaColSpan","headerCount","hasMoreData","groupLevel","viewport","loadingText","onRenderGroupHeaderCheckbox","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","ariaLevel","ariaPosInSet","ariaRowIndex","onRenderTitle","canSelectGroup","isSelectionCheckVisible","currentlySelected","onKeyUp","groupHeaderContainer","expandIsCollapsed","GroupHeader_base_FastCheck","GroupHeader","finalRowHeight","checkExpandResetStyles","listBackground","listItemBackgroundHovered","actionLinkHovered","D1","durationValue4","durationValue1","transitionDelay","durationValue3","listItemBackgroundChecked","listItemBackgroundCheckedHovered","neutralQuaternary","durationValue2","GroupShowAll_styles_GlobalClassNames","GroupShowAll_base_getClassNames","GroupShowAll","showAllLinkText","onToggleSummarize","memoizedOnClick","GroupFooter_styles_GlobalClassNames","GroupFooter_base_getClassNames","GroupFooter","footerText","canUseDOM","array","ScrollToMode","auto","center","getScrollHeight","el","scrollHeight","getScrollYPosition","scrollPos","scrollTop","scrollY","setScrollYPosition","pos","scrollTo","scrollX","SPACER_KEY_PREFIX","EMPTY_RECT","_measurePageRect","List","_surface","_pageRefs","_getDerivedStateFromProps","renderCount","version","hasMounted","_resetRequiredWindows","_requiredRect","_measureVersion","_invalidatePageCache","_updatePages","_onRenderRoot","rootRef","surfaceElement","_onRenderSurface","surfaceRef","pageElements","_onRenderPage","pageProps","defaultRender","onRenderCell","onRenderCellConditional","page","cellRole","cells","itemKey","getKey","renderCell","ignoreScrollingState","isScrolling","pages","_estimatedPageHeight","_totalEstimates","_requiredWindowsAhead","_requiredWindowsBehind","_onAsyncScroll","debounce","leading","maxWait","_onAsyncIdle","_onAsyncResize","_onScrollingDone","_cachedPageHeights","_focusedIndex","_pageCache","defineProperty","get","enumerable","configurable","scrollToIndex","measureItem","scrollToMode","_getRenderCount","allowedRect","_allowedRect","itemsPerPage","pageSpecification","_getPageSpecification","pageHeight","itemCount","_scrollElement","scrollRect","_measureScrollRect","scrollPosition","scrollWindow","itemPositionWithinPage","itemIndexInPage","scrollBottom","itemIsPartiallyAbove","itemIsPartiallyBelow","getStartItemIndexInView","pages_1","isSpacer","_scrollTop","totalRowHeight","floor","getPageHeight","_updatePageMeasurements","_materializedRect","_onScroll","finalProps","finalState","pagesVersion","onPagesUpdated","newProps","newState","oldPages","newPages","oldPage","newPage","forceUpdate","_updateRenderRects","getTotalListHeight","_surfaceRect","onRenderSurface","onRenderRoot","pages_2","_renderPage","finalOnRenderSurface","finalOnRenderRoot","_shouldVirtualize","onShouldVirtualize","cachedPage","usePageCache","pageElement","pageStyle","_getPageStyle","onRenderPage","newRef","getPageStyle","indexString","innerRect","outerRect","renderedWindowsAhead","renderedWindowsBehind","requiredWindowsAhead","requiredWindowsBehind","windowsAhead","min","windowsBehind","newListState","_buildPages","oldListPages","_notifyPageChanges","onPageAdded","onPageRemoved","renderedIndexes","oldPages_1","newPages_1","_onPageAdded","_onPageRemoved","heightChanged","_measurePage","hasChangedHeight","cachedHeight","measureVersion","newClientRect","clientWidth","clientHeight","round","materializedRect","pageTop","currentSpacer","focusedIndex","shouldVirtualize","isFirstRender","_loop_1","this_1","pageData","pageBottom","isPageRendered","cx","isPageInAllowedRange","isPageInRequiredRange","isPageFocused","isPageVisible","targetRect","newRect","itemsInPage","_createPage","_visibleRect","state_1","visibleRect","getPageSpecification","_getItemCountForPage","_getPageHeight","visibileRect","getItemCountForPage","pageKey","PAGE_KEY_PREFIX","surfaceRect","_scrollHeight","abs","_measureSurfaceRect","visibleTop","max","innerHeight","_expandRect","containsFocus","rect","pagesBefore","pagesAfter","GroupedListSection","_list","_subGroupRefs","_droppingClassName","_onRenderGroupHeader","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","getGroupItemLimit","groupProps","headerProps","showAllProps","footerProps","listProps","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","nestingDepth","level","showEmptyGroups","_getGroupKey","groupIndex","groups","_getGroupDragDropOptions","isGroup","newIsDropping","groupedListClassNames","Infinity","isShowAllVisible","isShowingAll","hasNestedGroups","dividerProps","ariaControlsProps","groupedListId","groupHeaderProps","groupShowAllProps","groupFooterProps","canDragGroups","_getDroppingClassName","_returnOne","_onRenderGroup","forceListUpdate","subGroupCount","pageRefs","_onRenderGroupCell","groupIsDropping","GroupedList_base_getClassNames","ROW_HEIGHT","COMPACT_ROW_HEIGHT","GroupedListBase","_renderGroup","onToggleSelectGroup","_onToggleSelectGroup","_onToggleCollapse","_onToggleSummarize","_getGroupNestingDepth","finalListProps","onRenderShowAll","onRenderFooter","_getDefaultGroupItemLimit","_getGroupItemLimit","_getGroupHeight","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","_isInnerZoneKeystroke","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","listVersion","shouldForceUpdates","isAllGroupsCollapsed","_setGroupsCollapsedState","rootListProps","shouldEnterInnerZone","vertical","_forceListUpdates","toggleCollapseAll","allCollapsed","groupsInLevel","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","GroupedList","BaseDecorator","getRect","withViewport","ComposedComponent","WithViewportComponent","_registerResizeObserver","_viewportResizeObserver","ResizeObserver","observe","_unregisterResizeObserver","disconnect","_updateViewport","withForceUpdate","viewportElement","scrollElement","D","isSizeChanged","_resizeAttempts","_composedComponentInstance","delayFirstMeasure","disableResizeObserver","skipViewportMeasures","_isResizeObserverAvailable","previousSkipViewportMeasures","newViewport","_updateComposedComponentRef","P","GetGroupCount","total","remainingGroups","currentGroup","useConst","DetailsList_base_getClassNames","DetailsListInner","ariaLabelForListHeader","constrainMode","isPlaceholderData","layoutMode","onColumnHeaderClick","onColumnHeaderContextMenu","selectionZoneProps","ariaLabelForGrid","rowElementEventMap","shouldApplyApplicationRole","adjustedColumns","isSomeGroupExpanded","listRef","focusZoneRef","groupedListRef","headerRef","onRowDidMount","onRowWillUnmount","disableSelectionZone","onActiveRowChanged","onRenderMissingItem","checkButtonGroupAriaLabel","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","defaultRole","rowId","getGroupNestingDepth","groupedDetailsListIndexMap","useMemo","indexMap","rowCount","numGroupHeaders","groups_1","numOfGroupHeadersBeforeItem","totalRowCount","additionalListProps","isSelectAllVisible","defaultOnRenderDetailsHeader","detailsHeaderProps","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columnReorderOnDragEnd","finalDropLocation","outside","surface","colCount","isFixed","Oh","fixedColumns","isHorizontalConstrained","ov","horizontalConstrained","onRenderDetailsGroupFooter","finalOnRenderDetailsGroupFooter","onRenderDetailsGroupHeader","finalOnRenderDetailsGroupHeader","groupKey","ariaRowCount","finalGroupProps","sumColumnWidths","B","totalWidth","finalOnRenderRow","onRenderRow","rowProps","onRenderListCell","isRightArrow","focusZoneInnerProps","focusZone","onActiveElementChanged","shouldRaiseClicksOnEnter","FinalGroupedList","groupedListAs","onHeaderKeyDown","down","getSelectedIndices","onContentKeyDown","up","altKey","headerWrapper","contentWrapper","DetailsListBase","_header","_groupedList","_selectionZone","_onRenderRow","setKey","newViewportWidth","oldViewportWidth","shouldResetSelection","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","setItems","_adjustColumns","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","row","_getItemKey","_activeRows","_setFocusToRowIfPending","_onRowWillUnmount","collapsed","_onColumnResized","resizingColumn","resizingColumnIndex","newCalculatedWidth","onColumnResize","_rememberCalculatedWidth","_onColumnAutoResized","totalCount","currentRow","_onActiveRowChanged","onActiveItemChanged","_onBlur","_columnOverrides","lastWidth","_getAdjustedColumns","Y","onSelectionChanged","focusIndex","_setFocusToRow","updateColumn","newColumnIndex","findIndex","isCheckboxColumnHidden","_notifyColumnsResized","onDidUpdate","currentWidth","viewportWidth","newItems","newColumns","lastSelectionMode","buildColumns","canResizeColumns","sortedColumnKey","groupedColumnKey","firstItem","propName","isCollapsible","clickable","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","remainingWidth","sumProportionalWidth","getPaddedWidth","widthFraction","rowCheckWidth","newColumn","fullWidth","shrinkWidth","MAX_VALUE","groupExpandWidth","availableWidth","baseColumn","lastIndex","overflowWidth","isCollapsable","originalWidth","isLast","overrides","spaceLeft","justified","onHover","gn","paddingOnly","DetailsList_styles_GlobalClassNames","DetailsList","listText","overflowX","overflowY","WebkitOverflowScrolling","Shimmer_styles_GlobalClassNames","shimmerWrapper","shimmerGradient","dataWrapper","BACKGROUND_OFF_SCREEN_POSITION","shimmerAnimation","shimmerAnimationRTL","ShimmerLine_base_getClassNames","ShimmerLine_styles_GlobalClassNames","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","ShimmerLine","borderStyle","globalClassNames","sharedCornerStyles","fill","borderTopStyle","borderBottomStyle","borderWidth","ShimmerGap_base_getClassNames","ShimmerGap_styles_GlobalClassNames","ShimmerGap","ShimmerCircle_styles_GlobalClassNames","svg","ShimmerCircle_base_getClassNames","ShimmerCircle","viewBox","ShimmerElementsGroup_base_getClassNames","getElementStyles","elementType","elementHeight","dif","borderBottomWidth","borderTopWidth","gap","line","ShimmerElementsGroup_styles_GlobalClassNames","ShimmerElementsGroup","shimmerElements","shimmerElementsDefaulted","reduce","acc","next","filteredElem","useSetTimeout","Shimmer_base_getClassNames","ShimmerBase","customElementsGroup","shimmerColors","isDataLoaded","improveCSSPerformance","transitionAnimationInterval","shimmerColor","shimmer","shimmerWaveColor","shimmerWave","internalState","lastTimeoutId","L","useState","contentLoaded","setContentLoaded","useEffect","Shimmer","disabledBackground","animationDirection","ShimmeredDetailsList_base_getClassNames","ShimmeredDetailsListBase","_onRenderShimmerPlaceholder","onRenderCustomPlaceholder","placeholderElements","_renderDefaultShimmerPlaceholder","gapHeight","shimmerElementsRow","columnIdx","groupWidth","_shimmerItems","shimmerLines","detailsListStyles","enableShimmer","removeFadingOverlay","ariaLabelForShimmer","restProps","listClassName","newListProps","backgroundImage","whiteTranslucent40","MarqueeSelection","AutoScroll","_scrollableParent","_incrementScroll","_scrollRect","_onTouchMove","_stopScroll","_computeScrollVelocity","touches","clientDirection","scrollClient","scrollRectTop","scrollRectLeft","scrollClientBottom","scrollClientRight","_isVerticalScroll","_scrollVelocity","SCROLL_GUTTER","MAX_SCROLL_VELOCITY","_startScroll","_timeoutId","scrollLeft","math","MarqueeSelectionBase","isEnabled","onShouldStartSelection","_isMouseEventOnScrollbar","_isInSelectionToggle","_isDragStartInSelection","_scrollableSurface","_selectedIndicies","_preservedIndicies","_onAsyncMouseMove","_autoScroll","_scrollLeft","_rootRect","_onTouchStart","_onPointerDown","pointerType","dragRect","hitTarget","isDraggingConstrainedToRoot","rootProps","dragMask","box","boxFill","targetElement","targetScrollbarWidth","offsetWidth","targetScrollbarHeight","offsetHeight","_getRootRect","requestAnimationFrame","_lastMouseEvent","rootRect","currentPoint","_dragOrigin","Iw","constrainedPoint","_evaluateSelection","_itemRectCache","_isPointInRectangle","rectangle","point","allElements","itemRect","previousSelectedIndices","_allSelectedIndices","needToUpdate","rootTagName","pointerEvents","tslib__WEBPACK_IMPORTED_MODULE_1__","_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__","isRendered","delay","Children","only","innerWidth","_Selection_types__WEBPACK_IMPORTED_MODULE_0__","_EventGroup__WEBPACK_IMPORTED_MODULE_1__","onItemsChanged","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_onItemsChanged","_canSelectItem","_keyToIndexMap","_isModal","suppressChange","_hasChanged","_change","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","haveItemsChanged","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","_items","exemptKey","newIndex","_isAllSelected","_unselectableIndices","_selectedItems","_updateCount","xC","_selectedIndices","getItemIndex","fromIndex","selectableCount","isKeySelected","setKeySelected","shouldAnchor","isExempt","anchorIndex","newAnchorIndex","selectToKey","clearSelection","toggleKeySelected","preserveModalState","SELECTION_CHANGE","SelectionMode","SELECTION_ITEMS_CHANGE","SelectionDirection"],"sourceRoot":""}