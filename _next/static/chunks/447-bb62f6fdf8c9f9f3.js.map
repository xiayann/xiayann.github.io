{"version":3,"file":"static/chunks/447-bb62f6fdf8c9f9f3.js","mappings":"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A,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,UAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,IAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7iB,EAAA,qBAAAgL,EAAA,EAAA7Q,EAAA,EAAA0oB,EAAA,EAAA7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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/xterm@5.0.0/node_modules/xterm/css/xterm.css","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/SearchBox/SearchBox.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/SearchBox/SearchBox.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/SearchBox/SearchBox.tsx","webpack://_N_E/FitAddon/webpack/universalModuleDefinition","webpack://_N_E/FitAddon/./src/FitAddon.ts","webpack://_N_E/SearchAddon/webpack/universalModuleDefinition","webpack://_N_E/SearchAddon/../../src/common/EventEmitter.ts","webpack://_N_E/SearchAddon/webpack/bootstrap","webpack://_N_E/SearchAddon/./src/SearchAddon.ts","webpack://_N_E/WebglAddon/webpack/universalModuleDefinition","webpack://_N_E/WebglAddon/./src/GlyphRenderer.ts","webpack://_N_E/WebglAddon/./src/RectangleRenderer.ts","webpack://_N_E/WebglAddon/./src/RenderModel.ts","webpack://_N_E/WebglAddon/./src/WebglRenderer.ts","webpack://_N_E/WebglAddon/./src/WebglUtils.ts","webpack://_N_E/WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://_N_E/WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://_N_E/WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://_N_E/WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://_N_E/WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://_N_E/WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://_N_E/WebglAddon/../../src/browser/Lifecycle.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/Constants.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/CustomGlyphs.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/DevicePixelObserver.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/RendererUtils.ts","webpack://_N_E/WebglAddon/../../src/common/Color.ts","webpack://_N_E/WebglAddon/../../src/common/EventEmitter.ts","webpack://_N_E/WebglAddon/../../src/common/Lifecycle.ts","webpack://_N_E/WebglAddon/../../src/common/MultiKeyMap.ts","webpack://_N_E/WebglAddon/../../src/common/Platform.ts","webpack://_N_E/WebglAddon/../../src/common/TypedArrayUtils.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/AttributeData.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/CellData.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/Constants.ts","webpack://_N_E/WebglAddon/../../src/common/input/TextDecoder.ts","webpack://_N_E/WebglAddon/webpack/bootstrap","webpack://_N_E/WebglAddon/./src/WebglAddon.ts","webpack://_N_E/<anon>"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport type { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles, ISearchBox } from './SearchBox.types';\nimport type { IButtonProps, IButtonStyles } from '../../Button';\nimport type { IIconProps } from '../../Icon';\n\nconst COMPONENT_NAME = 'SearchBox';\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { height: 'auto' }, icon: { fontSize: '12px' } };\nconst iconButtonProps: IIconProps = { iconName: 'Clear' };\nconst defaultClearButtonProps: IButtonProps = { ariaLabel: 'Clear text' };\n\nconst getClassNames = classNamesFunction<ISearchBoxStyleProps, ISearchBoxStyles>();\n\nconst useComponentRef = (\n  componentRef: React.Ref<ISearchBox> | undefined,\n  inputElementRef: React.RefObject<HTMLInputElement>,\n  hasFocus: boolean,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      focus: () => inputElementRef.current?.focus(),\n      hasFocus: () => hasFocus,\n    }),\n    [inputElementRef, hasFocus],\n  );\n};\n\nexport const SearchBoxBase: React.FunctionComponent<ISearchBoxProps> = React.forwardRef<\n  HTMLDivElement,\n  ISearchBoxProps\n>((props, forwardedRef) => {\n  const {\n    ariaLabel,\n    className,\n    defaultValue = '',\n    disabled,\n    underlined,\n    styles,\n    // eslint-disable-next-line deprecation/deprecation\n    labelText,\n    // eslint-disable-next-line deprecation/deprecation\n    placeholder = labelText,\n    theme,\n    clearButtonProps = defaultClearButtonProps,\n    disableAnimation = false,\n    showIcon = false,\n    onClear: customOnClear,\n    onBlur: customOnBlur,\n    onEscape: customOnEscape,\n    onSearch: customOnSearch,\n    onKeyDown: customOnKeyDown,\n    iconProps,\n    role,\n    onChange,\n    // eslint-disable-next-line deprecation/deprecation\n    onChanged,\n  } = props;\n\n  const [hasFocus, setHasFocus] = React.useState(false);\n\n  const prevChangeTimestamp = React.useRef<number | undefined>();\n  const [uncastValue, setValue] = useControllableValue(\n    props.value,\n    defaultValue,\n    (ev: React.ChangeEvent<HTMLInputElement> | undefined, newValue: string) => {\n      if (ev && ev.timeStamp === prevChangeTimestamp.current) {\n        // For historical reasons, SearchBox handles both onInput and onChange (we can't modify this\n        // outside a major version due to potential to break partners' tests and possibly apps).\n        // Only call props.onChange for one of the events.\n        return;\n      }\n      prevChangeTimestamp.current = ev?.timeStamp;\n      onChange?.(ev, newValue);\n      onChanged?.(newValue);\n    },\n  );\n  const value = String(uncastValue);\n\n  const rootElementRef = React.useRef<HTMLDivElement>(null);\n  const inputElementRef = React.useRef<HTMLInputElement>(null);\n  const mergedRootRef = useMergedRefs(rootElementRef, forwardedRef);\n  const id = useId(COMPONENT_NAME, props.id);\n\n  const { onClick: customOnClearClick } = clearButtonProps;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    underlined,\n    hasFocus,\n    disabled,\n    hasInput: value.length > 0,\n    disableAnimation,\n    showIcon,\n  });\n\n  const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(props, inputProperties, [\n    'className',\n    'placeholder',\n    'onFocus',\n    'onBlur',\n    'value',\n    'role',\n  ]);\n\n  const onClear = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>) => {\n      customOnClear?.(ev);\n      if (!ev.defaultPrevented) {\n        setValue('');\n        inputElementRef.current?.focus();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    },\n    [customOnClear, setValue],\n  );\n\n  const onClearClick = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n      customOnClearClick?.(ev);\n      if (!ev.defaultPrevented) {\n        onClear(ev);\n      }\n    },\n    [customOnClearClick, onClear],\n  );\n\n  const onFocusCapture = (ev: React.FocusEvent<HTMLElement>) => {\n    setHasFocus(true);\n    props.onFocus?.(ev as React.FocusEvent<HTMLInputElement>);\n  };\n\n  const onClickFocus = () => {\n    if (inputElementRef.current) {\n      inputElementRef.current.focus();\n      inputElementRef.current.selectionStart = inputElementRef.current.selectionEnd = 0;\n    }\n  };\n\n  const onBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement>): void => {\n      setHasFocus(false);\n      customOnBlur?.(ev);\n    },\n    [customOnBlur],\n  );\n\n  const onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(ev.target.value, ev);\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        customOnEscape?.(ev);\n        // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n        if (value && !ev.defaultPrevented) {\n          onClear(ev);\n        }\n        break;\n\n      case KeyCodes.enter:\n        if (customOnSearch) {\n          customOnSearch(value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      default:\n        // REVIEW: Why aren't we calling customOnKeyDown for Escape or Enter?\n        customOnKeyDown?.(ev);\n        // REVIEW: Why are we calling stopPropagation if customOnKeyDown called preventDefault?\n        // customOnKeyDown should call stopPropagation if it needs it.\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n        break;\n    }\n  };\n\n  useDebugWarning(props);\n  useComponentRef(props.componentRef, inputElementRef, hasFocus);\n\n  return (\n    <div role={role} ref={mergedRootRef} className={classNames.root} onFocusCapture={onFocusCapture}>\n      <div className={classNames.iconContainer} onClick={onClickFocus} aria-hidden>\n        <Icon iconName=\"Search\" {...iconProps} className={classNames.icon} />\n      </div>\n      <input\n        {...nativeProps}\n        id={id}\n        className={classNames.field}\n        placeholder={placeholder}\n        onChange={onInputChange}\n        onInput={onInputChange}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n        value={value}\n        disabled={disabled}\n        role=\"searchbox\"\n        aria-label={ariaLabel}\n        ref={inputElementRef}\n      />\n      {value!.length > 0 && (\n        <div className={classNames.clearButton}>\n          <IconButton\n            onBlur={onBlur}\n            styles={iconButtonStyles}\n            iconProps={iconButtonProps}\n            {...clearButtonProps}\n            onClick={onClearClick}\n          />\n        </div>\n      )}\n    </div>\n  );\n});\nSearchBoxBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarning(props: ISearchBoxProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: { labelText: 'placeholder' },\n    });\n  }\n}\n","import {\n  HighContrastSelector,\n  AnimationVariables,\n  normalize,\n  getPlaceholderStyles,\n  getGlobalClassNames,\n  getInputFocusStyle,\n} from '../../Styling';\nimport { getRTL } from '../../Utilities';\nimport type { IStyle } from '../../Styling';\nimport type { ISearchBoxStyleProps, ISearchBoxStyles } from './SearchBox.types';\n\nconst GlobalClassNames = {\n  root: 'ms-SearchBox',\n  iconContainer: 'ms-SearchBox-iconContainer',\n  icon: 'ms-SearchBox-icon',\n  clearButton: 'ms-SearchBox-clearButton',\n  field: 'ms-SearchBox-field',\n};\n\nexport function getStyles(props: ISearchBoxStyleProps): ISearchBoxStyles {\n  const { theme, underlined, disabled, hasFocus, className, hasInput, disableAnimation, showIcon } = props;\n  const { palette, fonts, semanticColors, effects } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1,\n  };\n\n  const inputIconAlt = palette.neutralSecondary;\n  const inputIconAltHovered = palette.neutralPrimary;\n  const inputBorderDisabled = palette.neutralLighter;\n  const inputBackgroundHovered = palette.neutralLighter;\n  const inputBackgroundDisabled = palette.neutralLighter;\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      normalize,\n      {\n        color: semanticColors.inputText,\n        backgroundColor: semanticColors.inputBackground,\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n        alignItems: 'stretch',\n        // The 1px top and bottom padding ensure the input field does not overlap the border\n        padding: '1px 0 1px 4px',\n        borderRadius: effects.roundedCorner2,\n        border: `1px solid ${semanticColors.inputBorder}`,\n        height: 32,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'WindowText',\n          },\n          ':hover': {\n            borderColor: semanticColors.inputBorderHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n          [`:hover .${classNames.iconContainer}`]: {\n            color: semanticColors.inputIconHovered,\n          },\n        },\n      },\n      !hasFocus &&\n        hasInput && {\n          selectors: {\n            [`:hover .${classNames.iconContainer}`]: {\n              width: 4,\n            },\n            [`:hover .${classNames.icon}`]: {\n              opacity: 0,\n              pointerEvents: 'none',\n            },\n          },\n        },\n      hasFocus && [\n        'is-active',\n        {\n          position: 'relative',\n        },\n        getInputFocusStyle(\n          semanticColors.inputFocusBorderAlt,\n          underlined ? 0 : effects.roundedCorner2,\n          underlined ? 'borderBottom' : 'border',\n        ),\n      ],\n      showIcon && [\n        {\n          selectors: {\n            [`:hover .${classNames.iconContainer}`]: {\n              width: 32,\n            },\n            [`:hover .${classNames.icon}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      disabled && [\n        'is-disabled',\n        {\n          borderColor: inputBorderDisabled,\n          backgroundColor: inputBackgroundDisabled,\n          pointerEvents: 'none',\n          cursor: 'default',\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n      ],\n      underlined && [\n        'is-underlined',\n        {\n          borderWidth: '0 0 1px 0',\n          borderRadius: 0,\n          // Underlined SearchBox has a larger padding left to vertically align with the waffle in product\n          padding: '1px 0 1px 8px',\n        },\n      ],\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n      hasInput && 'can-clear',\n      className,\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        flexShrink: 0,\n        fontSize: 16,\n        width: 32,\n        textAlign: 'center',\n        color: semanticColors.inputIcon,\n        cursor: 'text',\n      },\n      hasFocus && {\n        width: 4,\n      },\n      disabled && {\n        color: semanticColors.inputIconDisabled,\n      },\n      !disableAnimation && {\n        transition: `width ${AnimationVariables.durationValue1}`,\n      },\n      showIcon &&\n        hasFocus && {\n          width: 32,\n        },\n    ],\n    icon: [\n      classNames.icon,\n      {\n        opacity: 1,\n      },\n      hasFocus && {\n        opacity: 0,\n        pointerEvents: 'none',\n      },\n      !disableAnimation && {\n        transition: `opacity ${AnimationVariables.durationValue1} 0s`,\n      },\n      showIcon &&\n        hasFocus && {\n          opacity: 1,\n        },\n    ],\n    clearButton: [\n      classNames.clearButton,\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        cursor: 'pointer',\n        flexBasis: '32px',\n        flexShrink: 0,\n        padding: 0,\n        margin: '-1px 0px',\n        selectors: {\n          '&:hover .ms-Button': {\n            backgroundColor: inputBackgroundHovered,\n          },\n          '&:hover .ms-Button-icon': {\n            color: inputIconAltHovered,\n          },\n          '.ms-Button': {\n            borderRadius: getRTL(theme) ? '1px 0 0 1px' : '0 1px 1px 0',\n          },\n          '.ms-Button-icon': {\n            color: inputIconAlt,\n          },\n        },\n      },\n    ],\n    field: [\n      classNames.field,\n      normalize,\n      getPlaceholderStyles(placeholderStyles),\n      {\n        backgroundColor: 'transparent',\n        border: 'none',\n        outline: 'none',\n        fontWeight: 'inherit',\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        color: semanticColors.inputText,\n        flex: '1 1 0px',\n        // The default implicit value of 'auto' prevents the input from shrinking. Setting min-width to\n        // 0px allows the input element to shrink to fit the container.\n        minWidth: '0px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        // This padding forces the text placement to round up.\n        paddingBottom: 0.5,\n        // This removes the IE specific clear button in the input since we implemented our own\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SearchBoxBase } from './SearchBox.base';\nimport { getStyles } from './SearchBox.styles';\nimport type { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles } from './SearchBox.types';\n\nexport const SearchBox: React.FunctionComponent<ISearchBoxProps> = styled<\n  ISearchBoxProps,\n  ISearchBoxStyleProps,\n  ISearchBoxStyles\n>(SearchBoxBase, getStyles, undefined, { scope: 'SearchBox' });\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  constructor() {}\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal || isNaN(dims.cols) || isNaN(dims.rows)) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    if (core._renderService.dimensions.actualCellWidth === 0 || core._renderService.dimensions.actualCellHeight === 0) {\n      return undefined;\n    }\n\n    const scrollbarWidth = this._terminal.options.scrollback === 0 ?\n      0 : core.viewport.scrollBarWidth;\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - scrollbarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / core._renderService.dimensions.actualCellWidth)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / core._renderService.dimensions.actualCellHeight))\n    };\n    return geometry;\n  }\n}\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IDisposable, ITerminalAddon, IBufferRange, IDecoration } from 'xterm';\nimport { EventEmitter } from 'common/EventEmitter';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n  decorations?: ISearchDecorationOptions;\n  noScroll?: boolean;\n}\n\ninterface ISearchDecorationOptions {\n  matchBackground?: string;\n  matchBorder?: string;\n  matchOverviewRuler: string;\n  activeMatchBackground?: string;\n  activeMatchBorder?: string;\n  activeMatchColorOverviewRuler: string;\n}\n\nexport interface ISearchPosition {\n  startCol: number;\n  startRow: number;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n  size: number;\n}\n\ntype LineCacheEntry = [\n  /**\n   * The string representation of a line (as opposed to the buffer cell representation).\n   */\n  lineAsString: string,\n  /**\n   * The offsets where each line starts when the entry describes a wrapped line.\n   */\n  lineOffsets: number[]\n];\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\n\nexport class SearchAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n  private _cachedSearchTerm: string | undefined;\n  private _selectedDecoration: IDecoration | undefined;\n  private _resultDecorations: Map<number, IDecoration[]> | undefined;\n  private _searchResults: Map<string, ISearchResult> | undefined;\n  private _onDataDisposable: IDisposable | undefined;\n  private _onResizeDisposable: IDisposable | undefined;\n  private _lastSearchOptions: ISearchOptions | undefined;\n  private _highlightTimeout: number | undefined;\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: LineCacheEntry[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  private _resultIndex: number | undefined;\n\n  private readonly _onDidChangeResults = new EventEmitter<{ resultIndex: number, resultCount: number } | undefined>();\n  public readonly onDidChangeResults = this._onDidChangeResults.event;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n    this._onDataDisposable = this._terminal.onWriteParsed(() => this._updateMatches());\n    this._onResizeDisposable = this._terminal.onResize(() => this._updateMatches());\n  }\n\n  private _updateMatches(): void {\n    if (this._highlightTimeout) {\n      window.clearTimeout(this._highlightTimeout);\n    }\n    if (this._cachedSearchTerm && this._lastSearchOptions?.decorations) {\n      this._highlightTimeout = setTimeout(() => {\n        this.findPrevious(this._cachedSearchTerm!, { ...this._lastSearchOptions, incremental: true, noScroll: true });\n        this._resultIndex = this._searchResults ? this._searchResults.size - 1 : -1;\n        this._onDidChangeResults.fire({ resultIndex: this._resultIndex, resultCount: this._searchResults?.size ?? -1 });\n      }, 200);\n    }\n  }\n\n  public dispose(): void {\n    this.clearDecorations();\n    this._onDataDisposable?.dispose();\n    this._onResizeDisposable?.dispose();\n  }\n\n  public clearDecorations(retainCachedSearchTerm?: boolean): void {\n    this._selectedDecoration?.dispose();\n    this._searchResults?.clear();\n    this._resultDecorations?.forEach(decorations => {\n      for (const d of decorations) {\n        d.dispose();\n      }\n    });\n    this._resultDecorations?.clear();\n    this._searchResults = undefined;\n    this._resultDecorations = undefined;\n    if (!retainCachedSearchTerm) {\n      this._cachedSearchTerm = undefined;\n    }\n  }\n\n  public clearActiveDecoration(): void {\n    this._selectedDecoration?.dispose();\n    this._selectedDecoration = undefined;\n  }\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined || this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n    return this._fireResults(term, this._findNextAndSelect(term, searchOptions), searchOptions);\n  }\n\n  private _highlightAllMatches(term: string, searchOptions: ISearchOptions): void {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    if (!term || term.length === 0) {\n      this.clearDecorations();\n      return;\n    }\n    searchOptions = searchOptions || {};\n\n    // new search, clear out the old decorations\n    this.clearDecorations(true);\n    this._searchResults = new Map<string, ISearchResult>();\n    this._resultDecorations = new Map<number, IDecoration[]>();\n    const resultDecorations = this._resultDecorations;\n    let result = this._find(term, 0, 0, searchOptions);\n    while (result && !this._searchResults.get(`${result.row}-${result.col}`)) {\n      this._searchResults.set(`${result.row}-${result.col}`, result);\n      result = this._find(\n        term,\n        result.col + result.term.length >= this._terminal.cols ? result.row + 1 : result.row,\n        result.col + result.term.length >= this._terminal.cols ? 0 : result.col + 1,\n        searchOptions\n      );\n      if (this._searchResults.size > 1000) {\n        this.clearDecorations();\n        this._resultIndex = undefined;\n        return;\n      }\n    }\n    this._searchResults.forEach(result => {\n      const resultDecoration = this._createResultDecoration(result, searchOptions.decorations!);\n      if (resultDecoration) {\n        const decorationsForLine = resultDecorations.get(resultDecoration.marker.line) || [];\n        decorationsForLine.push(resultDecoration);\n        resultDecorations.set(resultDecoration.marker.line, decorationsForLine);\n      }\n    });\n  }\n\n  private _find(term: string, startRow: number, startCol: number, searchOptions?: ISearchOptions): ISearchResult | undefined {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      return undefined;\n    }\n    if (startCol > this._terminal.cols) {\n      throw new Error(`Invalid col: ${startCol} to search in terminal of ${this._terminal.cols} cols`);\n    }\n\n    let result: ISearchResult | undefined = undefined;\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  private _findNextAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      this._cachedSearchTerm = undefined;\n      this._resultIndex = -1;\n      return false;\n    }\n\n    if (this._cachedSearchTerm !== term) {\n      this._resultIndex = undefined;\n      this._terminal.clearSelection();\n    }\n\n    let startCol = 0;\n    let startRow = 0;\n    let currentSelection: IBufferRange | undefined;\n    if (this._terminal.hasSelection()) {\n      const incremental = searchOptions ? searchOptions.incremental : false;\n      // Start from the selection end if there is a selection\n      // For incremental search, use existing row\n      currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = incremental ? currentSelection.start.y : currentSelection.end.y;\n      startCol = incremental ? currentSelection.start.x : currentSelection.end.x;\n    }\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    let result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the bottom and didn't search from the very top wrap back up\n    if (!result && startRow !== 0) {\n      for (let y = 0; y < startRow; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, wrap back and return selection if it exists.\n    if (!result && currentSelection) {\n      searchPosition.startRow = currentSelection.start.y;\n      searchPosition.startCol = 0;\n      result = this._findInLine(term, searchPosition, searchOptions);\n    }\n\n    if (this._searchResults) {\n      if (this._searchResults.size === 0) {\n        this._resultIndex = -1;\n      } else if (this._resultIndex === undefined) {\n        this._resultIndex = 0;\n      } else {\n        this._resultIndex++;\n        if (this._resultIndex >= this._searchResults.size) {\n          this._resultIndex = 0;\n        }\n      }\n    }\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined || this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n    return this._fireResults(term, this._findPreviousAndSelect(term, searchOptions), searchOptions);\n  }\n\n  private _fireResults(term: string, found: boolean, searchOptions?: ISearchOptions): boolean {\n    if (searchOptions?.decorations) {\n      if (this._resultIndex !== undefined && this._searchResults?.size !== undefined) {\n        this._onDidChangeResults.fire({ resultIndex: this._resultIndex, resultCount: this._searchResults.size });\n      } else {\n        this._onDidChangeResults.fire(undefined);\n      }\n    }\n    this._cachedSearchTerm = term;\n    return found;\n  }\n\n  private _findPreviousAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    let result: ISearchResult | undefined;\n    if (!this._terminal || !term || term.length === 0) {\n      result = undefined;\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      this._resultIndex = -1;\n      return false;\n    }\n\n    if (this._cachedSearchTerm !== term) {\n      this._resultIndex = undefined;\n      this._terminal.clearSelection();\n    }\n\n    let startRow = this._terminal.buffer.active.baseY + this._terminal.rows;\n    let startCol = this._terminal.cols;\n    const isReverseSearch = true;\n\n    const incremental = searchOptions ? searchOptions.incremental : false;\n    let currentSelection: IBufferRange | undefined;\n    if (this._terminal.hasSelection()) {\n      currentSelection = this._terminal.getSelectionPosition()!;\n      // Start from selection start if there is a selection\n      startRow = currentSelection.start.y;\n      startCol = currentSelection.start.x;\n    }\n\n    this._initLinesCache();\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    if (incremental) {\n      // Try to expand selection to right first.\n      result = this._findInLine(term, searchPosition, searchOptions, false);\n      const isOldResultHighlighted = result && result.row === startRow && result.col === startCol;\n      if (!isOldResultHighlighted) {\n        // If selection was not able to be expanded to the right, then try reverse search\n        if (currentSelection) {\n          searchPosition.startRow = currentSelection.end.y;\n          searchPosition.startCol = currentSelection.end.x;\n        }\n        result = this._findInLine(term, searchPosition, searchOptions, true);\n      }\n    } else {\n      result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n    }\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      searchPosition.startCol = Math.max(searchPosition.startCol, this._terminal.cols);\n      for (let y = startRow - 1; y >= 0; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the top and didn't search from the very bottom wrap back down\n    if (!result && startRow !== (this._terminal.buffer.active.baseY + this._terminal.rows)) {\n      for (let y = (this._terminal.buffer.active.baseY + this._terminal.rows); y >= startRow; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    if (this._searchResults) {\n      if (this._searchResults.size === 0) {\n        this._resultIndex = -1;\n      } else if (this._resultIndex === undefined || this._resultIndex < 0) {\n        this._resultIndex = this._searchResults.size - 1;\n      } else {\n        this._resultIndex--;\n        if (this._resultIndex === -1) {\n          this._resultIndex = this._searchResults.size - 1;\n        }\n      }\n    }\n\n    // If there is only one result, return true.\n    if (!result && currentSelection) return true;\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.active.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return ((searchIndex === 0) || (NON_WORD_CHARACTERS.includes(line[searchIndex - 1]))) &&\n      (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.includes(line[searchIndex + term.length])));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line, which may contain\n   * subsequent terminal lines if the text is wrapped. If the provided line number is part of a wrapped text line that\n   * started on an earlier line then it is skipped since it will be properly searched when the terminal line that the\n   * text starts on is searched.\n   * @param term The search term.\n   * @param position The position to start the search.\n   * @param searchOptions Search options.\n   * @param isReverseSearch Whether the search should start from the right side of the terminal and search to the left.\n   * @return The search result if it was found.\n   */\n  protected _findInLine(term: string, searchPosition: ISearchPosition, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n    const row = searchPosition.startRow;\n    const col = searchPosition.startCol;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.active.getLine(row);\n    if (firstLine?.isWrapped) {\n      if (isReverseSearch) {\n        searchPosition.startCol += terminal.cols;\n        return;\n      }\n\n      // This will iterate until we find the line start.\n      // When we find it, we will search using the calculated start column.\n      searchPosition.startRow--;\n      searchPosition.startCol += terminal.cols;\n      return this._findInLine(term, searchPosition, searchOptions);\n    }\n    let cache = this._linesCache?.[row];\n    if (!cache) {\n      cache = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = cache;\n      }\n    }\n    const [stringLine, offsets] = cache;\n\n    const offset = this._bufferColsToStringOffset(row, col);\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..offset\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, offset))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(offset));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = offset + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (offset - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, offset - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, offset);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple rows\n      let startRowOffset = 0;\n      while (startRowOffset < offsets.length - 1 && resultIndex >= offsets[startRowOffset + 1]) {\n        startRowOffset++;\n      }\n      let endRowOffset = startRowOffset;\n      while (endRowOffset < offsets.length - 1 && resultIndex + term.length >= offsets[endRowOffset + 1]) {\n        endRowOffset++;\n      }\n      const startColOffset = resultIndex - offsets[startRowOffset];\n      const endColOffset = resultIndex + term.length - offsets[endRowOffset];\n      const startColIndex = this._stringLengthToBufferSize(row + startRowOffset, startColOffset);\n      const endColIndex = this._stringLengthToBufferSize(row + endRowOffset, endColOffset);\n      const size = endColIndex - startColIndex + terminal.cols * (endRowOffset - startRowOffset);\n\n      return {\n        term,\n        col: startColIndex,\n        row: row + startRowOffset,\n        size\n      };\n    }\n  }\n\n  private _stringLengthToBufferSize(row: number, offset: number): number {\n    const line = this._terminal!.buffer.active.getLine(row);\n    if (!line) {\n      return 0;\n    }\n    for (let i = 0; i < offset; i++) {\n      const cell = line.getCell(i);\n      if (!cell) {\n        break;\n      }\n      // Adjust the searchIndex to normalize emoji into single chars\n      const char = cell.getChars();\n      if (char.length > 1) {\n        offset -= char.length - 1;\n      }\n      // Adjust the searchIndex for empty characters following wide unicode\n      // chars (eg. CJK)\n      const nextCell = line.getCell(i + 1);\n      if (nextCell && nextCell.getWidth() === 0) {\n        offset++;\n      }\n    }\n    return offset;\n  }\n\n  private _bufferColsToStringOffset(startRow: number, cols: number): number {\n    const terminal = this._terminal!;\n    let lineIndex = startRow;\n    let offset = 0;\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (cols > 0 && line) {\n      for (let i = 0; i < cols && i < terminal.cols; i++) {\n        const cell = line.getCell(i);\n        if (!cell) {\n          break;\n        }\n        if (cell.getWidth()) {\n          // Treat null characters as whitespace to align with the translateToString API\n          offset += cell.getCode() === 0 ? 1 : cell.getChars().length;\n        }\n      }\n      lineIndex++;\n      line = terminal.buffer.active.getLine(lineIndex);\n      if (line && !line.isWrapped) {\n        break;\n      }\n      cols -= terminal.cols;\n    }\n    return offset;\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): LineCacheEntry {\n    const terminal = this._terminal!;\n    const strings = [];\n    const lineOffsets = [0];\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (line) {\n      const nextLine = terminal.buffer.active.getLine(lineIndex + 1);\n      const lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      let string = line.translateToString(!lineWrapsToNext && trimRight);\n      if (lineWrapsToNext && nextLine) {\n        const lastCell = line.getCell(line.length - 1);\n        const lastCellIsNull = lastCell && lastCell.getCode() === 0 && lastCell.getWidth() === 1;\n        // a wide character wrapped to the next line\n        if (lastCellIsNull && nextLine.getCell(0)?.getWidth() === 2) {\n          string = string.slice(0, -1);\n        }\n      }\n      strings.push(string);\n      if (lineWrapsToNext) {\n        lineOffsets.push(lineOffsets[lineOffsets.length - 1] + string.length);\n      } else {\n        break;\n      }\n      lineIndex++;\n      line = nextLine;\n    }\n    return [strings.join(''), lineOffsets];\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @return Whether a result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined, options?: ISearchDecorationOptions, noScroll?: boolean): boolean {\n    const terminal = this._terminal!;\n    this.clearActiveDecoration();\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.size);\n    if (options) {\n      const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n      if (marker) {\n        this._selectedDecoration = terminal.registerDecoration({\n          marker,\n          x: result.col,\n          width: result.size,\n          backgroundColor: options.activeMatchBackground,\n          layer: 'top',\n          overviewRulerOptions: {\n            color: options.activeMatchColorOverviewRuler\n          }\n        });\n        this._selectedDecoration?.onRender((e) => this._applyStyles(e, options.activeMatchBorder, true));\n        this._selectedDecoration?.onDispose(() => marker.dispose());\n      }\n    }\n\n    if (!noScroll) {\n      // If it is not in the viewport then we scroll else it just gets selected\n      if (result.row >= (terminal.buffer.active.viewportY + terminal.rows) || result.row < terminal.buffer.active.viewportY) {\n        let scroll = result.row - terminal.buffer.active.viewportY;\n        scroll -= Math.floor(terminal.rows / 2);\n        terminal.scrollLines(scroll);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Applies styles to the decoration when it is rendered\n   * @param element the decoration's element\n   * @param backgroundColor the background color to apply\n   * @param borderColor the border color to apply\n   * @returns\n   */\n  private _applyStyles(element: HTMLElement, borderColor: string | undefined, isActiveResult: boolean): void {\n    if (element.clientWidth <= 0) {\n      return;\n    }\n    if (!element.classList.contains('xterm-find-result-decoration')) {\n      element.classList.add('xterm-find-result-decoration');\n      if (borderColor) {\n        element.style.outline = `1px solid ${borderColor}`;\n      }\n    }\n    if (isActiveResult) {\n      element.classList.add('xterm-find-active-result-decoration');\n    }\n  }\n\n  /**\n   * Creates a decoration for the result and applies styles\n   * @param result the search result for which to create the decoration\n   * @param options the options for the decoration\n   * @returns the {@link IDecoration} or undefined if the marker has already been disposed of\n   */\n  private _createResultDecoration(result: ISearchResult, options: ISearchDecorationOptions): IDecoration | undefined {\n    const terminal = this._terminal!;\n    const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n    if (!marker) {\n      return undefined;\n    }\n    const findResultDecoration = terminal.registerDecoration({\n      marker,\n      x: result.col,\n      width: result.size,\n      backgroundColor: options.matchBackground,\n      overviewRulerOptions: this._resultDecorations?.get(marker.line) ? undefined : {\n        color: options.matchOverviewRuler,\n        position: 'center'\n      }\n    });\n    findResultDecoration?.onRender((e) => this._applyStyles(e, options.matchBorder, false));\n    findResultDecoration?.onDispose(() => marker.dispose());\n    return findResultDecoration;\n  }\n}\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\n/** Work variables to avoid garbage collection. */\nconst w: { i: number, glyph: IRasterizedGlyph | undefined, leftCellPadding: number, clippedPixels: number } = {\n  i: 0,\n  glyph: undefined,\n  leftCellPadding: 0,\n  clippedPixels: 0\n};\n\nexport class GlyphRenderer  extends Disposable {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ]\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    super();\n\n    const gl = this._gl;\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    this.register(toDisposable(() => gl.deleteTexture(this._atlasTexture)));\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    // Since this function is called for every cell (`rows*cols`), it must be very optimized. It\n    // should not instantiate any variables unless a new glyph is drawn to the cache where the\n    // slight slowdown is acceptable for the developer ergonomics provided as it's a once of for\n    // each glyph.\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, ext, chars, lastBg);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    w.i = (y * this._terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null character, allow space character to continue as it may have\n    // underline/strikethrough styles\n    if (code === NULL_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, w.i, w.i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    if (!this._atlas) {\n      return;\n    }\n\n    // Get the glyph\n    if (chars && chars.length > 1) {\n      w.glyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg, ext);\n    } else {\n      w.glyph = this._atlas.getRasterizedGlyph(code, bg, fg, ext);\n    }\n\n    w.leftCellPadding = Math.floor((this._dimensions.scaledCellWidth - this._dimensions.scaledCharWidth) / 2);\n    if (bg !== lastBg && w.glyph.offset.x > w.leftCellPadding) {\n      w.clippedPixels = w.glyph.offset.x - w.leftCellPadding;\n      // a_origin\n      array[w.i    ] = -(w.glyph.offset.x - w.clippedPixels) + this._dimensions.scaledCharLeft;\n      array[w.i + 1] = -w.glyph.offset.y + this._dimensions.scaledCharTop;\n      // a_size\n      array[w.i + 2] = (w.glyph.size.x - w.clippedPixels) / this._dimensions.scaledCanvasWidth;\n      array[w.i + 3] = w.glyph.size.y / this._dimensions.scaledCanvasHeight;\n      // a_texcoord\n      array[w.i + 4] = w.glyph.texturePositionClipSpace.x + w.clippedPixels / this._atlas.cacheCanvas.width;\n      array[w.i + 5] = w.glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[w.i + 6] = w.glyph.sizeClipSpace.x - w.clippedPixels / this._atlas.cacheCanvas.width;\n      array[w.i + 7] = w.glyph.sizeClipSpace.y;\n    } else {\n      // a_origin\n      array[w.i    ] = -w.glyph.offset.x + this._dimensions.scaledCharLeft;\n      array[w.i + 1] = -w.glyph.offset.y + this._dimensions.scaledCharTop;\n      // a_size\n      array[w.i + 2] = w.glyph.size.x / this._dimensions.scaledCanvasWidth;\n      array[w.i + 3] = w.glyph.size.y / this._dimensions.scaledCanvasHeight;\n      // a_texcoord\n      array[w.i + 4] = w.glyph.texturePositionClipSpace.x;\n      array[w.i + 5] = w.glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[w.i + 6] = w.glyph.sizeClipSpace.x;\n      array[w.i + 7] = w.glyph.sizeClipSpace.y;\n    }\n    // a_cellpos only changes on resize\n  }\n\n  public clear(): void {\n    const terminal = this._terminal;\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n\n    // Clear vertices\n    if (this._vertices.count !== newCount) {\n      this._vertices.attributes = new Float32Array(newCount);\n    } else {\n      this._vertices.attributes.fill(0);\n    }\n    for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n      if (this._vertices.count !== newCount) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      } else {\n        this._vertices.attributesBuffers[i].fill(0);\n      }\n    }\n    this._vertices.count = newCount;\n    let i = 0;\n    for (let y = 0; y < terminal.rows; y++) {\n      for (let x = 0; x < terminal.cols; x++) {\n        this._vertices.attributes[i + 8] = x / terminal.cols;\n        this._vertices.attributes[i + 9] = y / terminal.rows;\n        i += INDICES_PER_CELL;\n      }\n    }\n  }\n\n  public onResize(): void {\n    const gl = this._gl;\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    this.clear();\n  }\n\n  public render(renderModel: IRenderModel): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = this._vertices.attributes.subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext } from './Types';\nimport { Attributes, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColor } from 'common/Types';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { DIM_OPACITY } from 'browser/renderer/Constants';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = a_position + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\n/** Work variables to avoid garbage collection. */\nconst w: { rgba: number, isDefault: boolean, x1: number, y1: number, r: number, g: number, b: number, a: number } = {\n  rgba: 0,\n  isDefault: false,\n  x1: 0,\n  y1: 0,\n  r: 0,\n  g: 0,\n  b: 0,\n  a: 0\n};\n\nexport class RectangleRenderer extends Disposable {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let rectangleCount = 1;\n    let y: number;\n    let x: number;\n    let currentStartX: number;\n    let currentBg: number;\n    let currentFg: number;\n    let currentInverse: boolean;\n    let modelIndex: number;\n    let bg: number;\n    let fg: number;\n    let inverse: boolean;\n    let offset: number;\n\n    for (y = 0; y < terminal.rows; y++) {\n      currentStartX = -1;\n      currentBg = 0;\n      currentFg = 0;\n      currentInverse = false;\n      for (x = 0; x < terminal.cols; x++) {\n        modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    w.isDefault = false;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          w.rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          w.rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          w.rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          w.rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          w.rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          w.rgba = this._colors.background.rgba;\n          w.isDefault = true;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    w.x1 = startX * this._dimensions.scaledCellWidth;\n    w.y1 = y * this._dimensions.scaledCellHeight;\n    w.r = ((w.rgba >> 24) & 0xFF) / 255;\n    w.g = ((w.rgba >> 16) & 0xFF) / 255;\n    w.b = ((w.rgba >> 8 ) & 0xFF) / 255;\n    w.a = (!w.isDefault && bg & BgFlags.DIM) ? DIM_OPACITY : 1;\n\n    this._addRectangle(vertices.attributes, offset, w.x1, w.y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, w.r, w.g, w.b, w.a);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1 / this._dimensions.scaledCanvasWidth;\n    array[offset + 1] = y1 / this._dimensions.scaledCanvasHeight;\n    array[offset + 2] = width / this._dimensions.scaledCanvasWidth;\n    array[offset + 3] = height / this._dimensions.scaledCanvasHeight;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1 / this._dimensions.scaledCanvasWidth;\n    array[offset + 1] = y1 / this._dimensions.scaledCanvasHeight;\n    array[offset + 2] = width / this._dimensions.scaledCanvasWidth;\n    array[offset + 3] = height / this._dimensions.scaledCanvasHeight;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 4;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\nexport const RENDER_MODEL_EXT_OFFSET = 3;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas, removeTerminalFromCache } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_EXT_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { Attributes, BgFlags, Content, FgFlags, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { observeDevicePixelDimensions } from 'browser/renderer/DevicePixelObserver';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICharacterJoinerService, ICoreBrowserService } from 'browser/services/Services';\nimport { CharData, IBufferLine, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IDecorationService } from 'common/services/Services';\n\n/** Work variables to avoid garbage collection. */\nconst w: { fg: number, bg: number, hasFg: boolean, hasBg: boolean, isSelected: boolean } = {\n  fg: 0,\n  bg: 0,\n  hasFg: false,\n  hasBg: false,\n  isSelected: false\n};\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n  private _workColors: { fg: number, bg: number, ext: number } = { fg: 0, bg: 0, ext: 0 };\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer!: RectangleRenderer;\n  private _glyphRenderer!: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n  private _contextRestorationTimeout: number | undefined;\n\n  private _onChangeTextureAtlas = new EventEmitter<HTMLCanvasElement>();\n  public get onChangeTextureAtlas(): IEvent<HTMLCanvasElement> { return this._onChangeTextureAtlas.event; }\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    coreService: ICoreService,\n    private readonly _decorationService: IDecorationService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core, this._coreBrowserService),\n      new CursorRenderLayer(_terminal, this._core.screenElement!, 3, this._colors, this._onRequestRedraw, this._coreBrowserService, coreService)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = this._coreBrowserService.dpr;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => {\n      console.log('webglcontextlost event received');\n      // Prevent the default behavior in order to enable WebGL context restoration.\n      e.preventDefault();\n      // Wait a few seconds to see if the 'webglcontextrestored' event is fired.\n      // If not, dispatch the onContextLoss notification to observers.\n      this._contextRestorationTimeout = setTimeout(() => {\n        this._contextRestorationTimeout = undefined;\n        console.warn('webgl context not restored; firing onContextLoss');\n        this._onContextLoss.fire(e);\n      }, 3000 /* ms */);\n    }));\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextrestored', (e) => {\n      console.warn('webglcontextrestored event received');\n      clearTimeout(this._contextRestorationTimeout);\n      this._contextRestorationTimeout = undefined;\n      // The texture atlas and glyph renderer must be fully reinitialized\n      // because their contents have been lost.\n      removeTerminalFromCache(this._terminal);\n      this._initializeWebGLState();\n      this._requestRedrawViewport();\n    }));\n\n    this.register(observeDevicePixelDimensions(this._canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h)));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._initializeWebGLState();\n\n    this._isAttached = this._coreBrowserService.window.document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    this._canvas.parentElement?.removeChild(this._canvas);\n    removeTerminalFromCache(this._terminal);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    }\n\n    this._rectangleRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._clearModel(true);\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\n      this._devicePixelRatio = this._coreBrowserService.dpr;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n\n    this._rectangleRenderer.setDimensions(this.dimensions);\n    this._rectangleRenderer.onResize();\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh. Resizing `_glyphRenderer` should clear it already,\n    // so there is no need to clear it again here.\n    this._clearModel(false);\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    for (const l of this._renderLayers) {\n      l.onBlur(this._terminal);\n    }\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public onFocus(): void {\n    for (const l of this._renderLayers) {\n      l.onFocus(this._terminal);\n    }\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.onSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n    this._updateSelectionModel(start, end, columnSelectMode);\n    this._requestRedrawViewport();\n  }\n\n  public onCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.onCursorMove(this._terminal);\n    }\n  }\n\n  public onOptionsChanged(): void {\n    for (const l of this._renderLayers) {\n      l.onOptionsChanged(this._terminal);\n    }\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Initializes members dependent on WebGL context state.\n   */\n  private _initializeWebGLState(): void {\n    // Dispose any previous rectangle and glyph renderers before creating new ones.\n    this._rectangleRenderer?.dispose();\n    this._glyphRenderer?.dispose();\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCellWidth, this.dimensions.scaledCellHeight, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight, this._coreBrowserService.dpr);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    if (this._charAtlas !== atlas) {\n      this._onChangeTextureAtlas.fire(atlas.cacheCanvas);\n    }\n    this._charAtlas = atlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  /**\n   * Clear the model.\n   * @param clearGlyphRenderer Whether to also clear the glyph renderer. This\n   * should be true generally to make sure it is in the same state as the model.\n   */\n  private _clearModel(clearGlyphRenderer: boolean): void {\n    this._model.clear();\n    if (clearGlyphRenderer) {\n      this._glyphRenderer.clear();\n    }\n  }\n\n  public clearCharAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._clearModel(true);\n    this._updateModel(0, this._terminal.rows - 1);\n    this._requestRedrawViewport();\n  }\n\n  public clear(): void {\n    this._clearModel(true);\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (this._coreBrowserService.window.document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.onGridChanged(this._terminal, start, end);\n    }\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._clearModel(true);\n      this._updateSelectionModel(undefined, undefined);\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let lastBg: number;\n    let y: number;\n    let row: number;\n    let line: IBufferLine;\n    let joinedRanges: [number, number][];\n    let isJoined: boolean;\n    let lastCharX: number;\n    let range: [number, number];\n    let chars: string;\n    let code: number;\n    let i: number;\n    let x: number;\n    let j: number;\n\n    for (y = start; y <= end; y++) {\n      row = y + terminal.buffer.ydisp;\n      line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (x = 0; x < terminal.cols; x++) {\n        lastBg = this._workColors.bg;\n        line.loadCell(x, cell);\n\n        if (x === 0) {\n          lastBg = this._workColors.bg;\n        }\n\n        // If true, indicates that the current character(s) to draw were joined.\n        isJoined = false;\n        lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly.\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        chars = cell.getChars();\n        code = cell.getCode();\n        i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        // Load colors/resolve overrides into work colors\n        this._loadColorsForCell(x, row);\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workColors.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workColors.fg &&\n            this._model.cells[i + RENDER_MODEL_EXT_OFFSET] === this._workColors.ext) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code |= COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workColors.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workColors.fg;\n        this._model.cells[i + RENDER_MODEL_EXT_OFFSET] = this._workColors.ext;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workColors.bg, this._workColors.fg, this._workColors.ext, chars, lastBg);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer.updateCell(x, y, NULL_CELL_CODE, 0, 0, 0, NULL_CELL_CHAR, 0);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._workColors.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._workColors.fg;\n            this._model.cells[j + RENDER_MODEL_EXT_OFFSET] = this._workColors.ext;\n          }\n        }\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n  }\n\n  /**\n   * Loads colors for the cell into the work colors object. This resolves overrides/inverse if\n   * necessary which is why the work cell object is not used.\n   */\n  private _loadColorsForCell(x: number, y: number): void {\n    this._workColors.bg = this._workCell.bg;\n    this._workColors.fg = this._workCell.fg;\n    this._workColors.ext = this._workCell.bg & BgFlags.HAS_EXTENDED ? this._workCell.extended.ext : 0;\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\n    // override logic throughout the different sub-renderers\n\n    // Reset overrides work variables\n    w.bg = 0;\n    w.fg = 0;\n    w.hasBg = false;\n    w.hasFg = false;\n    w.isSelected = false;\n\n    // Apply decorations on the bottom layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\n      if (d.backgroundColorRGB) {\n        w.bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        w.fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    });\n\n    // Apply the selection color if needed\n    w.isSelected = this._isCellSelected(x, y);\n    if (w.isSelected) {\n      w.bg = (this._coreBrowserService.isFocused ? this._colors.selectionBackgroundOpaque : this._colors.selectionInactiveBackgroundOpaque).rgba >> 8 & 0xFFFFFF;\n      w.hasBg = true;\n      if (this._colors.selectionForeground) {\n        w.fg = this._colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    }\n\n    // Apply decorations on the top layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\n      if (d.backgroundColorRGB) {\n        w.bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        w.fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    });\n\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\n    // ahead of time in order to use the correct cache key\n    if (w.hasBg) {\n      if (w.isSelected) {\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\n        w.bg = (this._workCell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | w.bg | Attributes.CM_RGB;\n      } else {\n        // Non-RGB attributes from model + override + force RGB color mode\n        w.bg = (this._workCell.bg & ~Attributes.RGB_MASK) | w.bg | Attributes.CM_RGB;\n      }\n    }\n    if (w.hasFg) {\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\n      w.fg = (this._workCell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | w.fg | Attributes.CM_RGB;\n    }\n\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\n    // resolving the other inverse color and setting the inverse flag if needed.\n    if (this._workColors.fg & FgFlags.INVERSE) {\n      if (w.hasBg && !w.hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this._workColors.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          w.fg = (this._workColors.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | ((this._colors.background.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          w.fg = (this._workColors.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this._workColors.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        w.hasFg = true;\n      }\n      if (!w.hasBg && w.hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this._workColors.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          w.bg = (this._workColors.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | ((this._colors.foreground.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          w.bg = (this._workColors.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this._workColors.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        w.hasBg = true;\n      }\n    }\n\n    // Use the override if it exists\n    this._workColors.bg = w.hasBg ? w.bg : this._workColors.bg;\n    this._workColors.fg = w.hasFg ? w.fg : this._workColors.fg;\n  }\n\n  private _isCellSelected(x: number, y: number): boolean {\n    if (!this._model.selection.hasSelection) {\n      return false;\n    }\n    y -= this._terminal.buffer.active.viewportY;\n    if (this._model.selection.columnSelectMode) {\n      if (this._model.selection.startCol <= this._model.selection.endCol) {\n        return x >= this._model.selection.startCol && y >= this._model.selection.viewportCappedStartRow &&\n          x < this._model.selection.endCol && y <= this._model.selection.viewportCappedEndRow;\n      }\n      return x < this._model.selection.startCol && y >= this._model.selection.viewportCappedStartRow &&\n        x >= this._model.selection.endCol && y <= this._model.selection.viewportCappedEndRow;\n    }\n    return (y > this._model.selection.viewportStartRow && y < this._model.selection.viewportEndRow) ||\n      (this._model.selection.viewportStartRow === this._model.selection.viewportEndRow && y === this._model.selection.viewportStartRow && x >= this._model.selection.startCol && x < this._model.selection.endCol) ||\n      (this._model.selection.viewportStartRow < this._model.selection.viewportEndRow && y === this._model.selection.viewportEndRow && x < this._model.selection.endCol) ||\n      (this._model.selection.viewportStartRow < this._model.selection.viewportEndRow && y === this._model.selection.viewportStartRow && x >= this._model.selection.startCol);\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be drawn to an integer grid\n    // in order for the char atlas glyphs to not be blurry.\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case devicePixelRatio is a\n    // floating point number in order to ensure there is enough space to draw the character to the\n    // cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is _not_ 1, the resulting value will be\n    // floored since lineHeight can never be lower then 1, this guarentees the scaled cell height\n    // will always be larger than scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n\n    // Calculate the y offset within a cell that glyph should draw at in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n\n    // Calculate the x offset with a cell that text should draw from in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions, the scaled dimensions define the actual number of pixel in\n    // the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's important that this rounds to nearest integer\n    // and not ceils as browsers often have floating point precision issues where\n    // `window.devicePixelRatio` ends up being something like `1.100000023841858` for example, when\n    // it's actually 1.1. Ceiling may causes blurriness as the backing canvas image is 1 pixel too\n    // large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // Get the CSS dimensions of an individual cell. This needs to be derived from the calculated\n    // device pixel canvas value above. CharMeasure.width/height by itself is insufficient when the\n    // page is not at 100% zoom level as CharMeasure is measured in CSS pixels, but the actual char\n    // size on the canvas can differ.\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    if (this._canvas.width === width && this._canvas.height === height) {\n      return;\n    }\n    // While the actual canvas size has changed, keep scaledCanvasWidth/Height as the value before\n    // the change as it's an exact multiple of the cell sizes.\n    this._canvas.width = width;\n    this._canvas.height = height;\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet, ITerminal } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  scaledCharWidth: number,\n  scaledCharHeight: number,\n  devicePixelRatio: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCellWidth, scaledCellHeight, scaledCharWidth, scaledCharHeight, terminal, colors, devicePixelRatio);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const core: ITerminal = (terminal as any)._core;\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig, core.unicodeService),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IColor } from 'common/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCellWidth: number, scaledCellHeight: number, scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet, devicePixelRatio: number): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionForeground: NULL_COLOR,\n    selectionBackgroundTransparent: NULL_COLOR,\n    selectionBackgroundOpaque: NULL_COLOR,\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    customGlyphs: terminal.options.customGlyphs,\n    devicePixelRatio,\n    letterSpacing: terminal.options.letterSpacing,\n    lineHeight: terminal.options.lineHeight,\n    scaledCellWidth,\n    scaledCellHeight,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.options.fontFamily,\n    fontSize: terminal.options.fontSize,\n    fontWeight: terminal.options.fontWeight,\n    fontWeightBold: terminal.options.fontWeightBold,\n    allowTransparency: terminal.options.allowTransparency,\n    drawBoldTextInBrightColors: terminal.options.drawBoldTextInBrightColors,\n    minimumContrastRatio: terminal.options.minimumContrastRatio,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { IRasterizedGlyph, IBoundingBox } from '../Types';\nimport { DEFAULT_COLOR, Attributes, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'common/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { color, rgba } from 'common/Color';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\nimport { excludeFromContrastRatioDemands, isPowerlineGlyph, isRestrictedPowerlineGlyph } from 'browser/renderer/RendererUtils';\nimport { IUnicodeService } from 'common/services/Services';\nimport { FourKeyMap } from 'common/MultiKeyMap';\n\n// For debugging purposes, it can be useful to set this to a really tiny value,\n// to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\ninterface ICharAtlasActiveRow {\n  x: number;\n  y: number;\n  height: number;\n}\n\n/** Work variables to avoid garbage collection. */\nconst w: { glyph: IRasterizedGlyph | undefined } = {\n  glyph: undefined\n};\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\n  // row's height, the following happens:\n  //\n  // - The current row becomes the fixed height row A\n  // - A new fixed height row B the exact size of the glyph is created below the current row\n  // - A new dynamic height current row is created below B\n  //\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\n  // underscores, hyphens etc. or those with underlines rendered.\n  private _currentRow: ICharAtlasActiveRow = {\n    x: 0,\n    y: 0,\n    height: 0\n  };\n  private readonly _fixedRows: ICharAtlasActiveRow[] = [];\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private readonly _config: ICharAtlasConfig,\n    private readonly _unicodeService: IUnicodeService\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', { alpha: true }));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCellHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\n      this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRow.y > TEXTURE_CAPACITY) {\n      this.clearTexture();\n      this.warmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public clearTexture(): void {\n    if (this._currentRow.x === 0 && this._currentRow.y === 0) {\n      return;\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._cacheMap.clear();\n    this._cacheMapCombined.clear();\n    this._currentRow.x = 0;\n    this._currentRow.y = 0;\n    this._currentRow.height = 0;\n    this._fixedRows.length = 0;\n    this._didWarmUp = false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext);\n  }\n\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext);\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  private _getFromCacheMap(\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\n    key: string | number,\n    bg: number,\n    fg: number,\n    ext: number\n  ): IRasterizedGlyph {\n    w.glyph = cacheMap.get(key, bg, fg, ext);\n    if (!w.glyph) {\n      w.glyph = this._drawToCache(key, bg, fg, ext);\n      cacheMap.set(key, bg, fg, ext, w.glyph);\n    }\n    return w.glyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    let result: IColor;\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        result = this._getColorFromAnsiIndex(bgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.foreground;\n        } else {\n          result = this._config.colors.background;\n        }\n        break;\n    }\n\n    if (dim) {\n      // Blend here instead of using opacity because transparent colors mess with clipping the\n      // glyph's bounding box\n      result = color.blend(this._config.colors.background, color.multiplyOpacity(result, DIM_OPACITY));\n    }\n\n    return result;\n  }\n\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\n    // TODO: Pass dim along to get min contrast?\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, false, bold, excludeFromContrastRatioDemands);\n    if (minimumContrastColor) {\n      return minimumContrastColor;\n    }\n\n    let result: IColor;\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        result = this._getColorFromAnsiIndex(fgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.background;\n        } else {\n          result = this._config.colors.foreground;\n        }\n    }\n\n    // Always use an opaque color regardless of allowTransparency\n    if (this._config.allowTransparency) {\n      result = color.opaque(result);\n    }\n\n    // Apply dim to the color, opacity is fine to use for the foreground color\n    if (dim) {\n      result = color.multiplyOpacity(result, DIM_OPACITY);\n    }\n\n    return result;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getColor(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setColor(bg, fg, null);\n      return undefined;\n    }\n\n    const color = rgba.toColor(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setColor(bg, fg, color);\n\n    return color;\n  }\n\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = this._config.scaledCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2;\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    // Include line height when drawing glyphs\n    const allowedHeight = this._config.scaledCellHeight + TMP_CANVAS_GLYPH_PADDING * 4;\n    if (this._tmpCanvas.height < allowedHeight) {\n      this._tmpCanvas.height = allowedHeight;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n    this._workAttributeData.extended.ext = ext;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, excludeFromContrastRatioDemands(chars.charCodeAt(0)));\n    this._tmpCtx.fillStyle = foregroundColor.css;\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\n\n    // Draw custom characters if applicable\n    let customGlyph = false;\n    if (this._config.customGlyphs !== false) {\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight, this._config.fontSize, this._config.devicePixelRatio);\n    }\n\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\n    // background color. This should be disabled when the glyph contains multiple colors such as\n    // underline colors to prevent important colors could get cleared.\n    let enableClearThresholdCheck = !powerlineGlyph;\n\n    let chWidth: number;\n    if (typeof codeOrChars === 'number') {\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\n    } else {\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\n    }\n\n    // Draw underline\n    if (underline) {\n      this._tmpCtx.save();\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      // When the line width is odd, draw at a 0.5 position\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n\n      // Underline color\n      if (this._workAttributeData.isUnderlineColorDefault()) {\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\n        enableClearThresholdCheck = false;\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\n      } else {\n        enableClearThresholdCheck = false;\n        let fg = this._workAttributeData.getUnderlineColor();\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\n      }\n\n      // Underline style/stroke\n      this._tmpCtx.beginPath();\n      const xLeft = padding;\n      const yTop = Math.ceil(padding + this._config.scaledCharHeight) - yOffset;\n      const yMid = padding + this._config.scaledCharHeight + lineWidth - yOffset;\n      const yBot = Math.ceil(padding + this._config.scaledCharHeight + lineWidth * 2) - yOffset;\n\n      for (let i = 0; i < chWidth; i++) {\n        this._tmpCtx.save();\n        const xChLeft = xLeft + i * this._config.scaledCellWidth;\n        const xChRight = xLeft + (i + 1) * this._config.scaledCellWidth;\n        const xChMid = xChLeft + this._config.scaledCellWidth / 2;\n        switch (this._workAttributeData.extended.underlineStyle) {\n          case UnderlineStyle.DOUBLE:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            this._tmpCtx.moveTo(xChLeft, yBot);\n            this._tmpCtx.lineTo(xChRight, yBot);\n            break;\n          case UnderlineStyle.CURLY:\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.scaledCharHeight - lineWidth / 2) - yOffset;\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.scaledCharHeight + lineWidth / 2) - yOffset;\n            // Clip the left and right edges of the underline such that it can be drawn just outside\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\n            // glyphs adjacent to one another.\n            const clipRegion = new Path2D();\n            clipRegion.rect(xChLeft, yTop, this._config.scaledCellWidth, yBot - yTop);\n            this._tmpCtx.clip(clipRegion);\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other cells\n            this._tmpCtx.moveTo(xChLeft - this._config.scaledCellWidth / 2, yMid);\n            this._tmpCtx.bezierCurveTo(\n              xChLeft - this._config.scaledCellWidth / 2, yCurlyTop,\n              xChLeft, yCurlyTop,\n              xChLeft, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChLeft, yCurlyBot,\n              xChMid, yCurlyBot,\n              xChMid, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChMid, yCurlyTop,\n              xChRight, yCurlyTop,\n              xChRight, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChRight, yCurlyBot,\n              xChRight + this._config.scaledCellWidth / 2, yCurlyBot,\n              xChRight + this._config.scaledCellWidth / 2, yMid\n            );\n            break;\n          case UnderlineStyle.DOTTED:\n            this._tmpCtx.setLineDash([this._config.devicePixelRatio * 2, this._config.devicePixelRatio]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.DASHED:\n            this._tmpCtx.setLineDash([this._config.devicePixelRatio * 4, this._config.devicePixelRatio * 3]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.SINGLE:\n          default:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n        }\n        this._tmpCtx.stroke();\n        this._tmpCtx.restore();\n      }\n      this._tmpCtx.restore();\n\n      // Draw stroke in the background color for non custom characters in order to give an outline\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\n      // looks odd when the font size is too small\n      if (!customGlyph && this._config.fontSize >= 12) {\n        // This only works when transparency is disabled because it's not clear how to clear stroked\n        // text\n        if (!this._config.allowTransparency && chars !== ' ') {\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\n          // baseline\n          this._tmpCtx.save();\n          this._tmpCtx.textBaseline = 'alphabetic';\n          const metrics = this._tmpCtx.measureText(chars);\n          this._tmpCtx.restore();\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\n            // This translates to 1/2 the line width in either direction\n            this._tmpCtx.save();\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\n            // which would increase GPU memory demands\n            const clipRegion = new Path2D();\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.scaledCellWidth, yBot - yTop + Math.ceil(lineWidth / 2));\n            this._tmpCtx.clip(clipRegion);\n            this._tmpCtx.lineWidth = this._config.devicePixelRatio * 3;\n            this._tmpCtx.strokeStyle = backgroundColor.css;\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.scaledCharHeight);\n            this._tmpCtx.restore();\n          }\n        }\n      }\n    }\n\n    // Draw the character\n    if (!customGlyph) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight);\n    }\n\n    // If this charcater is underscore and beyond the cell bounds, shift it up until it is visible\n    // even on the bottom row, try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.save();\n          this._tmpCtx.fillStyle = backgroundColor.css;\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.restore();\n          this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw strokethrough\n    if (strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n      this._tmpCtx.lineTo(padding + this._config.scaledCharWidth * chWidth, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // Clear out the background color and determine if the glyph is empty.\n    let isEmpty: boolean;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\n    } else {\n      isEmpty = checkCompletelyTransparent(imageData);\n    }\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Find the best atlas row to use\n    let activeRow: ICharAtlasActiveRow;\n    while (true) {\n      // Select the ideal existing row, preferring fixed rows over the current row\n      activeRow = this._currentRow;\n      for (const row of this._fixedRows) {\n        if ((activeRow === this._currentRow || row.height < activeRow.height) && rasterizedGlyph.size.y <= row.height) {\n          activeRow = row;\n        }\n      }\n\n      // Create a new one if vertical space would be wasted, fixing the previously active row in the\n      // process as it now has a fixed height\n      if (activeRow.height > rasterizedGlyph.size.y * 2) {\n        // Fix the current row as the new row is being added below\n        if (this._currentRow.height > 0) {\n          this._fixedRows.push(this._currentRow);\n        }\n\n        // Create the new fixed height row\n        activeRow = {\n          x: 0,\n          y: this._currentRow.y + this._currentRow.height,\n          height: rasterizedGlyph.size.y\n        };\n        this._fixedRows.push(activeRow);\n\n        // Create the new current row below the new fixed height row\n        this._currentRow = {\n          x: 0,\n          y: activeRow.y + activeRow.height,\n          height: 0\n        };\n      }\n\n      // Exit the loop if there is enough room in the row\n      if (activeRow.x + rasterizedGlyph.size.x <= TEXTURE_WIDTH) {\n        break;\n      }\n\n      // If there is enough room in the current row, finish it and try again\n      if (activeRow === this._currentRow) {\n        activeRow.x = 0;\n        activeRow.y += activeRow.height;\n        activeRow.height = 0;\n      } else {\n        this._fixedRows.splice(this._fixedRows.indexOf(activeRow), 1);\n      }\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = activeRow.x;\n    rasterizedGlyph.texturePosition.y = activeRow.y;\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / TEXTURE_HEIGHT;\n\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\n    // height\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\n    activeRow.x += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.scaledCellHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.scaledCellWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = width - 1; x >= 0; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.scaledCellWidth - this._config.scaledCharWidth) / 2) : 0),\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.scaledCellHeight - this._config.scaledCharHeight) / 2) : 0)\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\n  // Get color channels\n  const r = bg.rgba >>> 24;\n  const g = bg.rgba >>> 16 & 0xFF;\n  const b = bg.rgba >>> 8 & 0xFF;\n  const fgR = fg.rgba >>> 24;\n  const fgG = fg.rgba >>> 16 & 0xFF;\n  const fgB = fg.rgba >>> 8 & 0xFF;\n\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\n  // threshold is calculated relative to the difference between the background and foreground to\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\n  // were covered (fg=#8ae234, bg=#c4a000).\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\n\n  // Set alpha channel of relevent pixels to 0\n  let isEmpty = true;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    // Check exact match\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      // Check the threshold based difference\n      if (enableThresholdCheck &&\n          (Math.abs(imageData.data[offset] - r) +\n          Math.abs(imageData.data[offset + 1] - g) +\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\n        imageData.data[offset + 3] = 0;\n      } else {\n        isEmpty = false;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset + 3] > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { ICoreBrowserService } from 'browser/services/Services';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet,\n    protected readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._canvas.remove();\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCellWidth, this._scaledCellHeight, this._scaledCharWidth, this._scaledCharHeight, this._coreBrowserService.dpr);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      this._coreBrowserService.dpr * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = this._coreBrowserService.dpr;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + this._coreBrowserService.dpr / 2,\n      y * this._scaledCellHeight + (this._coreBrowserService.dpr / 2),\n      width * this._scaledCellWidth - this._coreBrowserService.dpr,\n      (height * this._scaledCellHeight) - this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipCell(x, y, cell.getWidth());\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n  }\n\n  /**\n   * Clips a cell to ensure no pixels will be drawn outside of it.\n   * @param x The column to clip.\n   * @param y The row to clip.\n   * @param width The number of columns to clip.\n   */\n  private _clipCell(x: number, y: number, width: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.options.fontSize! * this._coreBrowserService.dpr}px ${terminal.options.fontFamily}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>,\n    coreBrowserService: ICoreBrowserService,\n    private readonly _coreService: ICoreService\n  ) {\n    super(container, 'cursor', zIndex, true, colors, coreBrowserService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    this.onOptionsChanged(terminal);\n  }\n\n  public override dispose(): void {\n    this._cursorBlinkStateManager?.dispose();\n    this._cursorBlinkStateManager = undefined;\n    super.dispose();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n    this.onOptionsChanged(terminal);\n  }\n\n  public onBlur(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.resume(terminal);\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.options.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(() => {\n          this._render(terminal, true);\n        }, this._coreBrowserService);\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.options.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle!;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === terminal.options.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.options.cursorStyle!;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (this._coreBrowserService.dpr < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.options.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    private _renderCallback: () => void,\n    private _coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (this._coreBrowserService.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    terminal: ITerminal,\n    coreBrowserService: ICoreBrowserService\n  ) {\n    super(container, 'link', zIndex, true, colors, coreBrowserService);\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid,\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line,\n  '\\u{E0B5}': { d: 'M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid,\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line,\n  '\\u{E0B7}': { d: 'M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.STROKE, leftPadding: 1 }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight, devicePixelRatio);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight, fontSize, devicePixelRatio);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  devicePixelRatio: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset, true, devicePixelRatio));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): void {\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      scaledCellWidth,\n      scaledCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  try {\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  } catch {\n    observer.disconnect();\n    observer = undefined;\n  }\n  return toDisposable(() => observer?.disconnect());\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    const a = color.rgba & 0xFF;\n    return opacity(color, (a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IEvent } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { ICharacterJoinerService, ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { isSafari } from 'common/Platform';\nimport { ICoreService, IDecorationService } from 'common/services/Services';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  private _onChangeTextureAtlas = new EventEmitter<HTMLElement>();\n  public get onChangeTextureAtlas(): IEvent<HTMLElement> { return this._onChangeTextureAtlas.event; }\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    if (isSafari) {\n      throw new Error('Webgl is not currently supported on Safari');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (terminal as any)._core._renderService;\n    const characterJoinerService: ICharacterJoinerService = (terminal as any)._core._characterJoinerService;\n    const coreBrowserService: ICoreBrowserService = (terminal as any)._core._coreBrowserService;\n    const coreService: ICoreService = (terminal as any)._core.coreService;\n    const decorationService: IDecorationService = (terminal as any)._core._decorationService;\n    const colors: IColorSet = (terminal as any)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, characterJoinerService, coreBrowserService, coreService, decorationService, this._preserveDrawingBuffer);\n    forwardEvent(this._renderer.onContextLoss, this._onContextLoss);\n    forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas);\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer?.dispose();\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearCharAtlas();\n  }\n}\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[447],{\n\n/***/ 1714:\n/***/ (function() {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ 7162:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"R\": function() { return /* binding */ SearchBox; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/KeyCodes.js\nvar KeyCodes = __webpack_require__(7218);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useControllableValue.js\nvar useControllableValue = __webpack_require__(4169);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useMergedRefs.js\nvar useMergedRefs = __webpack_require__(6355);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.6.14_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/react-hooks/lib/useId.js\nvar useId = __webpack_require__(4976);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.js + 1 modules\nvar IconButton = __webpack_require__(1197);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/Icon.js + 2 modules\nvar Icon = __webpack_require__(8415);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/SearchBox/SearchBox.base.js\n\n\n\n\n\n\nvar COMPONENT_NAME = 'SearchBox';\nvar iconButtonStyles = { root: { height: 'auto' }, icon: { fontSize: '12px' } };\nvar iconButtonProps = { iconName: 'Clear' };\nvar defaultClearButtonProps = { ariaLabel: 'Clear text' };\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar useComponentRef = function (componentRef, inputElementRef, hasFocus) {\n    react.useImperativeHandle(componentRef, function () { return ({\n        focus: function () { var _a; return (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus(); },\n        hasFocus: function () { return hasFocus; },\n    }); }, [inputElementRef, hasFocus]);\n};\nvar SearchBoxBase = react.forwardRef(function (props, forwardedRef) {\n    var ariaLabel = props.ariaLabel, className = props.className, _a = props.defaultValue, defaultValue = _a === void 0 ? '' : _a, disabled = props.disabled, underlined = props.underlined, styles = props.styles, \n    // eslint-disable-next-line deprecation/deprecation\n    labelText = props.labelText, \n    // eslint-disable-next-line deprecation/deprecation\n    _b = props.placeholder, \n    // eslint-disable-next-line deprecation/deprecation\n    placeholder = _b === void 0 ? labelText : _b, theme = props.theme, _c = props.clearButtonProps, clearButtonProps = _c === void 0 ? defaultClearButtonProps : _c, _d = props.disableAnimation, disableAnimation = _d === void 0 ? false : _d, _e = props.showIcon, showIcon = _e === void 0 ? false : _e, customOnClear = props.onClear, customOnBlur = props.onBlur, customOnEscape = props.onEscape, customOnSearch = props.onSearch, customOnKeyDown = props.onKeyDown, iconProps = props.iconProps, role = props.role, onChange = props.onChange, \n    // eslint-disable-next-line deprecation/deprecation\n    onChanged = props.onChanged;\n    var _f = react.useState(false), hasFocus = _f[0], setHasFocus = _f[1];\n    var prevChangeTimestamp = react.useRef();\n    var _g = (0,useControllableValue/* useControllableValue */.G)(props.value, defaultValue, function (ev, newValue) {\n        if (ev && ev.timeStamp === prevChangeTimestamp.current) {\n            // For historical reasons, SearchBox handles both onInput and onChange (we can't modify this\n            // outside a major version due to potential to break partners' tests and possibly apps).\n            // Only call props.onChange for one of the events.\n            return;\n        }\n        prevChangeTimestamp.current = ev === null || ev === void 0 ? void 0 : ev.timeStamp;\n        onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);\n        onChanged === null || onChanged === void 0 ? void 0 : onChanged(newValue);\n    }), uncastValue = _g[0], setValue = _g[1];\n    var value = String(uncastValue);\n    var rootElementRef = react.useRef(null);\n    var inputElementRef = react.useRef(null);\n    var mergedRootRef = (0,useMergedRefs/* useMergedRefs */.r)(rootElementRef, forwardedRef);\n    var id = (0,useId/* useId */.M)(COMPONENT_NAME, props.id);\n    var customOnClearClick = clearButtonProps.onClick;\n    var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        underlined: underlined,\n        hasFocus: hasFocus,\n        disabled: disabled,\n        hasInput: value.length > 0,\n        disableAnimation: disableAnimation,\n        showIcon: showIcon,\n    });\n    var nativeProps = (0,properties/* getNativeProps */.pq)(props, properties/* inputProperties */.Gg, [\n        'className',\n        'placeholder',\n        'onFocus',\n        'onBlur',\n        'value',\n        'role',\n    ]);\n    var onClear = react.useCallback(function (ev) {\n        var _a;\n        customOnClear === null || customOnClear === void 0 ? void 0 : customOnClear(ev);\n        if (!ev.defaultPrevented) {\n            setValue('');\n            (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    }, [customOnClear, setValue]);\n    var onClearClick = react.useCallback(function (ev) {\n        customOnClearClick === null || customOnClearClick === void 0 ? void 0 : customOnClearClick(ev);\n        if (!ev.defaultPrevented) {\n            onClear(ev);\n        }\n    }, [customOnClearClick, onClear]);\n    var onFocusCapture = function (ev) {\n        var _a;\n        setHasFocus(true);\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n    };\n    var onClickFocus = function () {\n        if (inputElementRef.current) {\n            inputElementRef.current.focus();\n            inputElementRef.current.selectionStart = inputElementRef.current.selectionEnd = 0;\n        }\n    };\n    var onBlur = react.useCallback(function (ev) {\n        setHasFocus(false);\n        customOnBlur === null || customOnBlur === void 0 ? void 0 : customOnBlur(ev);\n    }, [customOnBlur]);\n    var onInputChange = function (ev) {\n        setValue(ev.target.value, ev);\n    };\n    var onKeyDown = function (ev) {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n            case KeyCodes/* KeyCodes.escape */.m.escape:\n                customOnEscape === null || customOnEscape === void 0 ? void 0 : customOnEscape(ev);\n                // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n                // to propagate from the empty search box to a parent element such as a dialog, etc.\n                if (value && !ev.defaultPrevented) {\n                    onClear(ev);\n                }\n                break;\n            case KeyCodes/* KeyCodes.enter */.m.enter:\n                if (customOnSearch) {\n                    customOnSearch(value);\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n                break;\n            default:\n                // REVIEW: Why aren't we calling customOnKeyDown for Escape or Enter?\n                customOnKeyDown === null || customOnKeyDown === void 0 ? void 0 : customOnKeyDown(ev);\n                // REVIEW: Why are we calling stopPropagation if customOnKeyDown called preventDefault?\n                // customOnKeyDown should call stopPropagation if it needs it.\n                if (ev.defaultPrevented) {\n                    ev.stopPropagation();\n                }\n                break;\n        }\n    };\n    useDebugWarning(props);\n    useComponentRef(props.componentRef, inputElementRef, hasFocus);\n    return (react.createElement(\"div\", { role: role, ref: mergedRootRef, className: classNames.root, onFocusCapture: onFocusCapture },\n        react.createElement(\"div\", { className: classNames.iconContainer, onClick: onClickFocus, \"aria-hidden\": true },\n            react.createElement(Icon/* Icon */.J, (0,tslib_es6/* __assign */.pi)({ iconName: \"Search\" }, iconProps, { className: classNames.icon }))),\n        react.createElement(\"input\", (0,tslib_es6/* __assign */.pi)({}, nativeProps, { id: id, className: classNames.field, placeholder: placeholder, onChange: onInputChange, onInput: onInputChange, onBlur: onBlur, onKeyDown: onKeyDown, value: value, disabled: disabled, role: \"searchbox\", \"aria-label\": ariaLabel, ref: inputElementRef })),\n        value.length > 0 && (react.createElement(\"div\", { className: classNames.clearButton },\n            react.createElement(IconButton/* IconButton */.h, (0,tslib_es6/* __assign */.pi)({ onBlur: onBlur, styles: iconButtonStyles, iconProps: iconButtonProps }, clearButtonProps, { onClick: onClearClick }))))));\n});\nSearchBoxBase.displayName = COMPONENT_NAME;\nfunction useDebugWarning(props) {\n    if (false) {}\n}\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/rtl.js\nvar rtl = __webpack_require__(327);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/SearchBox/SearchBox.styles.js\n\n\nvar GlobalClassNames = {\n    root: 'ms-SearchBox',\n    iconContainer: 'ms-SearchBox-iconContainer',\n    icon: 'ms-SearchBox-icon',\n    clearButton: 'ms-SearchBox-clearButton',\n    field: 'ms-SearchBox-field',\n};\nfunction getStyles(props) {\n    var _a, _b, _c, _d, _e;\n    var theme = props.theme, underlined = props.underlined, disabled = props.disabled, hasFocus = props.hasFocus, className = props.className, hasInput = props.hasInput, disableAnimation = props.disableAnimation, showIcon = props.showIcon;\n    var palette = theme.palette, fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(GlobalClassNames, theme);\n    // placeholder style constants\n    var placeholderStyles = {\n        color: semanticColors.inputPlaceholderText,\n        opacity: 1,\n    };\n    var inputIconAlt = palette.neutralSecondary;\n    var inputIconAltHovered = palette.neutralPrimary;\n    var inputBorderDisabled = palette.neutralLighter;\n    var inputBackgroundHovered = palette.neutralLighter;\n    var inputBackgroundDisabled = palette.neutralLighter;\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            lib/* normalize */.Fv,\n            {\n                color: semanticColors.inputText,\n                backgroundColor: semanticColors.inputBackground,\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'nowrap',\n                alignItems: 'stretch',\n                // The 1px top and bottom padding ensure the input field does not overlap the border\n                padding: '1px 0 1px 4px',\n                borderRadius: effects.roundedCorner2,\n                border: \"1px solid \" + semanticColors.inputBorder,\n                height: 32,\n                selectors: (_a = {},\n                    _a[lib/* HighContrastSelector */.qJ] = {\n                        borderColor: 'WindowText',\n                    },\n                    _a[':hover'] = {\n                        borderColor: semanticColors.inputBorderHovered,\n                        selectors: (_b = {},\n                            _b[lib/* HighContrastSelector */.qJ] = {\n                                borderColor: 'Highlight',\n                            },\n                            _b),\n                    },\n                    _a[\":hover .\" + classNames.iconContainer] = {\n                        color: semanticColors.inputIconHovered,\n                    },\n                    _a),\n            },\n            !hasFocus &&\n                hasInput && {\n                selectors: (_c = {},\n                    _c[\":hover .\" + classNames.iconContainer] = {\n                        width: 4,\n                    },\n                    _c[\":hover .\" + classNames.icon] = {\n                        opacity: 0,\n                        pointerEvents: 'none',\n                    },\n                    _c),\n            },\n            hasFocus && [\n                'is-active',\n                {\n                    position: 'relative',\n                },\n                (0,lib/* getInputFocusStyle */.$Y)(semanticColors.inputFocusBorderAlt, underlined ? 0 : effects.roundedCorner2, underlined ? 'borderBottom' : 'border'),\n            ],\n            showIcon && [\n                {\n                    selectors: (_d = {},\n                        _d[\":hover .\" + classNames.iconContainer] = {\n                            width: 32,\n                        },\n                        _d[\":hover .\" + classNames.icon] = {\n                            opacity: 1,\n                        },\n                        _d),\n                },\n            ],\n            disabled && [\n                'is-disabled',\n                {\n                    borderColor: inputBorderDisabled,\n                    backgroundColor: inputBackgroundDisabled,\n                    pointerEvents: 'none',\n                    cursor: 'default',\n                    selectors: (_e = {},\n                        _e[lib/* HighContrastSelector */.qJ] = {\n                            borderColor: 'GrayText',\n                        },\n                        _e),\n                },\n            ],\n            underlined && [\n                'is-underlined',\n                {\n                    borderWidth: '0 0 1px 0',\n                    borderRadius: 0,\n                    // Underlined SearchBox has a larger padding left to vertically align with the waffle in product\n                    padding: '1px 0 1px 8px',\n                },\n            ],\n            underlined &&\n                disabled && {\n                backgroundColor: 'transparent',\n            },\n            hasInput && 'can-clear',\n            className,\n        ],\n        iconContainer: [\n            classNames.iconContainer,\n            {\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                flexShrink: 0,\n                fontSize: 16,\n                width: 32,\n                textAlign: 'center',\n                color: semanticColors.inputIcon,\n                cursor: 'text',\n            },\n            hasFocus && {\n                width: 4,\n            },\n            disabled && {\n                color: semanticColors.inputIconDisabled,\n            },\n            !disableAnimation && {\n                transition: \"width \" + lib/* AnimationVariables.durationValue1 */.D1.durationValue1,\n            },\n            showIcon &&\n                hasFocus && {\n                width: 32,\n            },\n        ],\n        icon: [\n            classNames.icon,\n            {\n                opacity: 1,\n            },\n            hasFocus && {\n                opacity: 0,\n                pointerEvents: 'none',\n            },\n            !disableAnimation && {\n                transition: \"opacity \" + lib/* AnimationVariables.durationValue1 */.D1.durationValue1 + \" 0s\",\n            },\n            showIcon &&\n                hasFocus && {\n                opacity: 1,\n            },\n        ],\n        clearButton: [\n            classNames.clearButton,\n            {\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'stretch',\n                cursor: 'pointer',\n                flexBasis: '32px',\n                flexShrink: 0,\n                padding: 0,\n                margin: '-1px 0px',\n                selectors: {\n                    '&:hover .ms-Button': {\n                        backgroundColor: inputBackgroundHovered,\n                    },\n                    '&:hover .ms-Button-icon': {\n                        color: inputIconAltHovered,\n                    },\n                    '.ms-Button': {\n                        borderRadius: (0,rtl/* getRTL */.zg)(theme) ? '1px 0 0 1px' : '0 1px 1px 0',\n                    },\n                    '.ms-Button-icon': {\n                        color: inputIconAlt,\n                    },\n                },\n            },\n        ],\n        field: [\n            classNames.field,\n            lib/* normalize */.Fv,\n            (0,lib/* getPlaceholderStyles */.Sv)(placeholderStyles),\n            {\n                backgroundColor: 'transparent',\n                border: 'none',\n                outline: 'none',\n                fontWeight: 'inherit',\n                fontFamily: 'inherit',\n                fontSize: 'inherit',\n                color: semanticColors.inputText,\n                flex: '1 1 0px',\n                // The default implicit value of 'auto' prevents the input from shrinking. Setting min-width to\n                // 0px allows the input element to shrink to fit the container.\n                minWidth: '0px',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                // This padding forces the text placement to round up.\n                paddingBottom: 0.5,\n                // This removes the IE specific clear button in the input since we implemented our own\n                selectors: {\n                    '::-ms-clear': {\n                        display: 'none',\n                    },\n                },\n            },\n            disabled && {\n                color: semanticColors.disabledText,\n            },\n        ],\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/SearchBox/SearchBox.js\n\n\n\nvar SearchBox = (0,styled/* styled */.z)(SearchBoxBase, getStyles, undefined, { scope: 'SearchBox' });\n\n\n/***/ }),\n\n/***/ 8711:\n/***/ (function(module) {\n\n!function(e,t){ true?module.exports=t():0}(self,(function(){return(()=>{\"use strict\";var e={};return(()=>{var t=e;Object.defineProperty(t,\"__esModule\",{value:!0}),t.FitAddon=void 0,t.FitAddon=class{constructor(){}activate(e){this._terminal=e}dispose(){}fit(){const e=this.proposeDimensions();if(!e||!this._terminal||isNaN(e.cols)||isNaN(e.rows))return;const t=this._terminal._core;this._terminal.rows===e.rows&&this._terminal.cols===e.cols||(t._renderService.clear(),this._terminal.resize(e.cols,e.rows))}proposeDimensions(){if(!this._terminal)return;if(!this._terminal.element||!this._terminal.element.parentElement)return;const e=this._terminal._core;if(0===e._renderService.dimensions.actualCellWidth||0===e._renderService.dimensions.actualCellHeight)return;const t=0===this._terminal.options.scrollback?0:e.viewport.scrollBarWidth,r=window.getComputedStyle(this._terminal.element.parentElement),i=parseInt(r.getPropertyValue(\"height\")),n=Math.max(0,parseInt(r.getPropertyValue(\"width\"))),o=window.getComputedStyle(this._terminal.element),s=i-(parseInt(o.getPropertyValue(\"padding-top\"))+parseInt(o.getPropertyValue(\"padding-bottom\"))),a=n-(parseInt(o.getPropertyValue(\"padding-right\"))+parseInt(o.getPropertyValue(\"padding-left\")))-t;return{cols:Math.max(2,Math.floor(a/e._renderService.dimensions.actualCellWidth)),rows:Math.max(1,Math.floor(s/e._renderService.dimensions.actualCellHeight))}}}})(),e})()}));\n\n\n/***/ }),\n\n/***/ 2923:\n/***/ (function(module) {\n\n!function(e,t){ true?module.exports=t():0}(self,(function(){return(()=>{\"use strict\";var e={345:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.forwardEvent=t.EventEmitter=void 0,t.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1}get event(){return this._event||(this._event=e=>(this._listeners.push(e),{dispose:()=>{if(!this._disposed)for(let t=0;t<this._listeners.length;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)}})),this._event}fire(e,t){const i=[];for(let e=0;e<this._listeners.length;e++)i.push(this._listeners[e]);for(let s=0;s<i.length;s++)i[s].call(void 0,e,t)}dispose(){this._listeners&&(this._listeners.length=0),this._disposed=!0}},t.forwardEvent=function(e,t){return e((e=>t.fire(e)))}}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}var s={};return(()=>{var e=s;Object.defineProperty(e,\"__esModule\",{value:!0}),e.SearchAddon=void 0;const t=i(345),r=\" ~!@#$%^&*()+`-=[]{}|\\\\;:\\\"',./<>?\";e.SearchAddon=class{constructor(){this._linesCacheTimeoutId=0,this._onDidChangeResults=new t.EventEmitter,this.onDidChangeResults=this._onDidChangeResults.event}activate(e){this._terminal=e,this._onDataDisposable=this._terminal.onWriteParsed((()=>this._updateMatches())),this._onResizeDisposable=this._terminal.onResize((()=>this._updateMatches()))}_updateMatches(){var e;this._highlightTimeout&&window.clearTimeout(this._highlightTimeout),this._cachedSearchTerm&&(null===(e=this._lastSearchOptions)||void 0===e?void 0:e.decorations)&&(this._highlightTimeout=setTimeout((()=>{var e,t;this.findPrevious(this._cachedSearchTerm,Object.assign(Object.assign({},this._lastSearchOptions),{incremental:!0,noScroll:!0})),this._resultIndex=this._searchResults?this._searchResults.size-1:-1,this._onDidChangeResults.fire({resultIndex:this._resultIndex,resultCount:null!==(t=null===(e=this._searchResults)||void 0===e?void 0:e.size)&&void 0!==t?t:-1})}),200))}dispose(){var e,t;this.clearDecorations(),null===(e=this._onDataDisposable)||void 0===e||e.dispose(),null===(t=this._onResizeDisposable)||void 0===t||t.dispose()}clearDecorations(e){var t,i,s,r;null===(t=this._selectedDecoration)||void 0===t||t.dispose(),null===(i=this._searchResults)||void 0===i||i.clear(),null===(s=this._resultDecorations)||void 0===s||s.forEach((e=>{for(const t of e)t.dispose()})),null===(r=this._resultDecorations)||void 0===r||r.clear(),this._searchResults=void 0,this._resultDecorations=void 0,e||(this._cachedSearchTerm=void 0)}clearActiveDecoration(){var e;null===(e=this._selectedDecoration)||void 0===e||e.dispose(),this._selectedDecoration=void 0}findNext(e,t){if(!this._terminal)throw new Error(\"Cannot use addon until it has been loaded\");return this._lastSearchOptions=t,(null==t?void 0:t.decorations)&&(void 0===this._resultIndex&&void 0!==this._cachedSearchTerm&&e===this._cachedSearchTerm||this._highlightAllMatches(e,t)),this._fireResults(e,this._findNextAndSelect(e,t),t)}_highlightAllMatches(e,t){if(!this._terminal)throw new Error(\"Cannot use addon until it has been loaded\");if(!e||0===e.length)return void this.clearDecorations();t=t||{},this.clearDecorations(!0),this._searchResults=new Map,this._resultDecorations=new Map;const i=this._resultDecorations;let s=this._find(e,0,0,t);for(;s&&!this._searchResults.get(`${s.row}-${s.col}`);)if(this._searchResults.set(`${s.row}-${s.col}`,s),s=this._find(e,s.col+s.term.length>=this._terminal.cols?s.row+1:s.row,s.col+s.term.length>=this._terminal.cols?0:s.col+1,t),this._searchResults.size>1e3)return this.clearDecorations(),void(this._resultIndex=void 0);this._searchResults.forEach((e=>{const s=this._createResultDecoration(e,t.decorations);if(s){const e=i.get(s.marker.line)||[];e.push(s),i.set(s.marker.line,e)}}))}_find(e,t,i,s){var r;if(!this._terminal||!e||0===e.length)return null===(r=this._terminal)||void 0===r||r.clearSelection(),void this.clearDecorations();if(i>this._terminal.cols)throw new Error(`Invalid col: ${i} to search in terminal of ${this._terminal.cols} cols`);let n;this._initLinesCache();const o={startRow:t,startCol:i};if(n=this._findInLine(e,o,s),!n)for(let i=t+1;i<this._terminal.buffer.active.baseY+this._terminal.rows&&(o.startRow=i,o.startCol=0,n=this._findInLine(e,o,s),!n);i++);return n}_findNextAndSelect(e,t){var i;if(!this._terminal||!e||0===e.length)return null===(i=this._terminal)||void 0===i||i.clearSelection(),this.clearDecorations(),this._cachedSearchTerm=void 0,this._resultIndex=-1,!1;this._cachedSearchTerm!==e&&(this._resultIndex=void 0,this._terminal.clearSelection());let s,r=0,n=0;if(this._terminal.hasSelection()){const e=!!t&&t.incremental;s=this._terminal.getSelectionPosition(),n=e?s.start.y:s.end.y,r=e?s.start.x:s.end.x}this._initLinesCache();const o={startRow:n,startCol:r};let l=this._findInLine(e,o,t);if(!l)for(let i=n+1;i<this._terminal.buffer.active.baseY+this._terminal.rows&&(o.startRow=i,o.startCol=0,l=this._findInLine(e,o,t),!l);i++);if(!l&&0!==n)for(let i=0;i<n&&(o.startRow=i,o.startCol=0,l=this._findInLine(e,o,t),!l);i++);return!l&&s&&(o.startRow=s.start.y,o.startCol=0,l=this._findInLine(e,o,t)),this._searchResults&&(0===this._searchResults.size?this._resultIndex=-1:void 0===this._resultIndex?this._resultIndex=0:(this._resultIndex++,this._resultIndex>=this._searchResults.size&&(this._resultIndex=0))),this._selectResult(l,null==t?void 0:t.decorations,null==t?void 0:t.noScroll)}findPrevious(e,t){if(!this._terminal)throw new Error(\"Cannot use addon until it has been loaded\");return this._lastSearchOptions=t,(null==t?void 0:t.decorations)&&(void 0===this._resultIndex&&void 0!==this._cachedSearchTerm&&e===this._cachedSearchTerm||this._highlightAllMatches(e,t)),this._fireResults(e,this._findPreviousAndSelect(e,t),t)}_fireResults(e,t,i){var s;return(null==i?void 0:i.decorations)&&(void 0!==this._resultIndex&&void 0!==(null===(s=this._searchResults)||void 0===s?void 0:s.size)?this._onDidChangeResults.fire({resultIndex:this._resultIndex,resultCount:this._searchResults.size}):this._onDidChangeResults.fire(void 0)),this._cachedSearchTerm=e,t}_findPreviousAndSelect(e,t){var i;if(!this._terminal)throw new Error(\"Cannot use addon until it has been loaded\");let s;if(!this._terminal||!e||0===e.length)return s=void 0,null===(i=this._terminal)||void 0===i||i.clearSelection(),this.clearDecorations(),this._resultIndex=-1,!1;this._cachedSearchTerm!==e&&(this._resultIndex=void 0,this._terminal.clearSelection());let r=this._terminal.buffer.active.baseY+this._terminal.rows,n=this._terminal.cols;const o=!0,l=!!t&&t.incremental;let h;this._terminal.hasSelection()&&(h=this._terminal.getSelectionPosition(),r=h.start.y,n=h.start.x),this._initLinesCache();const a={startRow:r,startCol:n};if(l?(s=this._findInLine(e,a,t,!1),s&&s.row===r&&s.col===n||(h&&(a.startRow=h.end.y,a.startCol=h.end.x),s=this._findInLine(e,a,t,!0))):s=this._findInLine(e,a,t,o),!s){a.startCol=Math.max(a.startCol,this._terminal.cols);for(let i=r-1;i>=0&&(a.startRow=i,s=this._findInLine(e,a,t,o),!s);i--);}if(!s&&r!==this._terminal.buffer.active.baseY+this._terminal.rows)for(let i=this._terminal.buffer.active.baseY+this._terminal.rows;i>=r&&(a.startRow=i,s=this._findInLine(e,a,t,o),!s);i--);return this._searchResults&&(0===this._searchResults.size?this._resultIndex=-1:void 0===this._resultIndex||this._resultIndex<0?this._resultIndex=this._searchResults.size-1:(this._resultIndex--,-1===this._resultIndex&&(this._resultIndex=this._searchResults.size-1))),!(s||!h)||this._selectResult(s,null==t?void 0:t.decorations,null==t?void 0:t.noScroll)}_initLinesCache(){const e=this._terminal;this._linesCache||(this._linesCache=new Array(e.buffer.active.length),this._cursorMoveListener=e.onCursorMove((()=>this._destroyLinesCache())),this._resizeListener=e.onResize((()=>this._destroyLinesCache()))),window.clearTimeout(this._linesCacheTimeoutId),this._linesCacheTimeoutId=window.setTimeout((()=>this._destroyLinesCache()),15e3)}_destroyLinesCache(){this._linesCache=void 0,this._cursorMoveListener&&(this._cursorMoveListener.dispose(),this._cursorMoveListener=void 0),this._resizeListener&&(this._resizeListener.dispose(),this._resizeListener=void 0),this._linesCacheTimeoutId&&(window.clearTimeout(this._linesCacheTimeoutId),this._linesCacheTimeoutId=0)}_isWholeWord(e,t,i){return(0===e||r.includes(t[e-1]))&&(e+i.length===t.length||r.includes(t[e+i.length]))}_findInLine(e,t,i={},s=!1){var r;const n=this._terminal,o=t.startRow,l=t.startCol,h=n.buffer.active.getLine(o);if(null==h?void 0:h.isWrapped)return s?void(t.startCol+=n.cols):(t.startRow--,t.startCol+=n.cols,this._findInLine(e,t,i));let a=null===(r=this._linesCache)||void 0===r?void 0:r[o];a||(a=this._translateBufferLineToStringWithWrap(o,!0),this._linesCache&&(this._linesCache[o]=a));const[c,d]=a,u=this._bufferColsToStringOffset(o,l),_=i.caseSensitive?e:e.toLowerCase(),f=i.caseSensitive?c:c.toLowerCase();let v=-1;if(i.regex){const t=RegExp(_,\"g\");let i;if(s)for(;i=t.exec(f.slice(0,u));)v=t.lastIndex-i[0].length,e=i[0],t.lastIndex-=e.length-1;else i=t.exec(f.slice(u)),i&&i[0].length>0&&(v=u+(t.lastIndex-i[0].length),e=i[0])}else s?u-_.length>=0&&(v=f.lastIndexOf(_,u-_.length)):v=f.indexOf(_,u);if(v>=0){if(i.wholeWord&&!this._isWholeWord(v,f,e))return;let t=0;for(;t<d.length-1&&v>=d[t+1];)t++;let s=t;for(;s<d.length-1&&v+e.length>=d[s+1];)s++;const r=v-d[t],l=v+e.length-d[s],h=this._stringLengthToBufferSize(o+t,r);return{term:e,col:h,row:o+t,size:this._stringLengthToBufferSize(o+s,l)-h+n.cols*(s-t)}}}_stringLengthToBufferSize(e,t){const i=this._terminal.buffer.active.getLine(e);if(!i)return 0;for(let e=0;e<t;e++){const s=i.getCell(e);if(!s)break;const r=s.getChars();r.length>1&&(t-=r.length-1);const n=i.getCell(e+1);n&&0===n.getWidth()&&t++}return t}_bufferColsToStringOffset(e,t){const i=this._terminal;let s=e,r=0,n=i.buffer.active.getLine(s);for(;t>0&&n;){for(let e=0;e<t&&e<i.cols;e++){const t=n.getCell(e);if(!t)break;t.getWidth()&&(r+=0===t.getCode()?1:t.getChars().length)}if(s++,n=i.buffer.active.getLine(s),n&&!n.isWrapped)break;t-=i.cols}return r}_translateBufferLineToStringWithWrap(e,t){var i;const s=this._terminal,r=[],n=[0];let o=s.buffer.active.getLine(e);for(;o;){const l=s.buffer.active.getLine(e+1),h=!!l&&l.isWrapped;let a=o.translateToString(!h&&t);if(h&&l){const e=o.getCell(o.length-1);e&&0===e.getCode()&&1===e.getWidth()&&2===(null===(i=l.getCell(0))||void 0===i?void 0:i.getWidth())&&(a=a.slice(0,-1))}if(r.push(a),!h)break;n.push(n[n.length-1]+a.length),e++,o=l}return[r.join(\"\"),n]}_selectResult(e,t,i){var s,r;const n=this._terminal;if(this.clearActiveDecoration(),!e)return n.clearSelection(),!1;if(n.select(e.col,e.row,e.size),t){const i=n.registerMarker(-n.buffer.active.baseY-n.buffer.active.cursorY+e.row);i&&(this._selectedDecoration=n.registerDecoration({marker:i,x:e.col,width:e.size,backgroundColor:t.activeMatchBackground,layer:\"top\",overviewRulerOptions:{color:t.activeMatchColorOverviewRuler}}),null===(s=this._selectedDecoration)||void 0===s||s.onRender((e=>this._applyStyles(e,t.activeMatchBorder,!0))),null===(r=this._selectedDecoration)||void 0===r||r.onDispose((()=>i.dispose())))}if(!i&&(e.row>=n.buffer.active.viewportY+n.rows||e.row<n.buffer.active.viewportY)){let t=e.row-n.buffer.active.viewportY;t-=Math.floor(n.rows/2),n.scrollLines(t)}return!0}_applyStyles(e,t,i){e.clientWidth<=0||(e.classList.contains(\"xterm-find-result-decoration\")||(e.classList.add(\"xterm-find-result-decoration\"),t&&(e.style.outline=`1px solid ${t}`)),i&&e.classList.add(\"xterm-find-active-result-decoration\"))}_createResultDecoration(e,t){var i;const s=this._terminal,r=s.registerMarker(-s.buffer.active.baseY-s.buffer.active.cursorY+e.row);if(!r)return;const n=s.registerDecoration({marker:r,x:e.col,width:e.size,backgroundColor:t.matchBackground,overviewRulerOptions:(null===(i=this._resultDecorations)||void 0===i?void 0:i.get(r.line))?void 0:{color:t.matchOverviewRuler,position:\"center\"}});return null==n||n.onRender((e=>this._applyStyles(e,t.matchBorder,!1))),null==n||n.onDispose((()=>r.dispose())),n}}})(),s})()}));\n\n\n/***/ }),\n\n/***/ 8874:\n/***/ (function(module) {\n\n!function(t,e){ true?module.exports=e():0}(self,(function(){return(()=>{\"use strict\";var t={965:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.GlyphRenderer=void 0;const s=i(381),r=i(455),o=i(855),n=i(859),a=10,l=a*Float32Array.BYTES_PER_ELEMENT,h={i:0,glyph:void 0,leftCellPadding:0,clippedPixels:0};class c extends n.Disposable{constructor(t,e,i,r){super(),this._terminal=t,this._colors=e,this._gl=i,this._dimensions=r,this._activeBuffer=0,this._vertices={count:0,attributes:new Float32Array(0),attributesBuffers:[new Float32Array(0),new Float32Array(0)]};const o=this._gl;this._program=(0,s.throwIfFalsy)((0,s.createProgram)(o,\"#version 300 es\\nlayout (location = 0) in vec2 a_unitquad;\\nlayout (location = 1) in vec2 a_cellpos;\\nlayout (location = 2) in vec2 a_offset;\\nlayout (location = 3) in vec2 a_size;\\nlayout (location = 4) in vec2 a_texcoord;\\nlayout (location = 5) in vec2 a_texsize;\\n\\nuniform mat4 u_projection;\\nuniform vec2 u_resolution;\\n\\nout vec2 v_texcoord;\\n\\nvoid main() {\\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\\n}\",\"#version 300 es\\nprecision lowp float;\\n\\nin vec2 v_texcoord;\\n\\nuniform sampler2D u_texture;\\n\\nout vec4 outColor;\\n\\nvoid main() {\\n  outColor = texture(u_texture, v_texcoord);\\n}\")),this.register((0,n.toDisposable)((()=>o.deleteProgram(this._program)))),this._projectionLocation=(0,s.throwIfFalsy)(o.getUniformLocation(this._program,\"u_projection\")),this._resolutionLocation=(0,s.throwIfFalsy)(o.getUniformLocation(this._program,\"u_resolution\")),this._textureLocation=(0,s.throwIfFalsy)(o.getUniformLocation(this._program,\"u_texture\")),this._vertexArrayObject=o.createVertexArray(),o.bindVertexArray(this._vertexArrayObject);const a=new Float32Array([0,0,1,0,0,1,1,1]),h=o.createBuffer();this.register((0,n.toDisposable)((()=>o.deleteBuffer(h)))),o.bindBuffer(o.ARRAY_BUFFER,h),o.bufferData(o.ARRAY_BUFFER,a,o.STATIC_DRAW),o.enableVertexAttribArray(0),o.vertexAttribPointer(0,2,this._gl.FLOAT,!1,0,0);const c=new Uint8Array([0,1,3,0,2,3]),_=o.createBuffer();this.register((0,n.toDisposable)((()=>o.deleteBuffer(_)))),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,_),o.bufferData(o.ELEMENT_ARRAY_BUFFER,c,o.STATIC_DRAW),this._attributesBuffer=(0,s.throwIfFalsy)(o.createBuffer()),this.register((0,n.toDisposable)((()=>o.deleteBuffer(this._attributesBuffer)))),o.bindBuffer(o.ARRAY_BUFFER,this._attributesBuffer),o.enableVertexAttribArray(2),o.vertexAttribPointer(2,2,o.FLOAT,!1,l,0),o.vertexAttribDivisor(2,1),o.enableVertexAttribArray(3),o.vertexAttribPointer(3,2,o.FLOAT,!1,l,2*Float32Array.BYTES_PER_ELEMENT),o.vertexAttribDivisor(3,1),o.enableVertexAttribArray(4),o.vertexAttribPointer(4,2,o.FLOAT,!1,l,4*Float32Array.BYTES_PER_ELEMENT),o.vertexAttribDivisor(4,1),o.enableVertexAttribArray(5),o.vertexAttribPointer(5,2,o.FLOAT,!1,l,6*Float32Array.BYTES_PER_ELEMENT),o.vertexAttribDivisor(5,1),o.enableVertexAttribArray(1),o.vertexAttribPointer(1,2,o.FLOAT,!1,l,8*Float32Array.BYTES_PER_ELEMENT),o.vertexAttribDivisor(1,1),this._atlasTexture=(0,s.throwIfFalsy)(o.createTexture()),this.register((0,n.toDisposable)((()=>o.deleteTexture(this._atlasTexture)))),o.bindTexture(o.TEXTURE_2D,this._atlasTexture),o.texImage2D(o.TEXTURE_2D,0,o.RGBA,1,1,0,o.RGBA,o.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA),this.onResize()}beginFrame(){return!this._atlas||this._atlas.beginFrame()}updateCell(t,e,i,s,r,o,n,a){this._updateCell(this._vertices.attributes,t,e,i,s,r,o,n,a)}_updateCell(t,e,i,s,n,l,c,_,d){h.i=(i*this._terminal.cols+e)*a,s!==o.NULL_CELL_CODE&&void 0!==s?this._atlas&&(_&&_.length>1?h.glyph=this._atlas.getRasterizedGlyphCombinedChar(_,n,l,c):h.glyph=this._atlas.getRasterizedGlyph(s,n,l,c),h.leftCellPadding=Math.floor((this._dimensions.scaledCellWidth-this._dimensions.scaledCharWidth)/2),n!==d&&h.glyph.offset.x>h.leftCellPadding?(h.clippedPixels=h.glyph.offset.x-h.leftCellPadding,t[h.i]=-(h.glyph.offset.x-h.clippedPixels)+this._dimensions.scaledCharLeft,t[h.i+1]=-h.glyph.offset.y+this._dimensions.scaledCharTop,t[h.i+2]=(h.glyph.size.x-h.clippedPixels)/this._dimensions.scaledCanvasWidth,t[h.i+3]=h.glyph.size.y/this._dimensions.scaledCanvasHeight,t[h.i+4]=h.glyph.texturePositionClipSpace.x+h.clippedPixels/this._atlas.cacheCanvas.width,t[h.i+5]=h.glyph.texturePositionClipSpace.y,t[h.i+6]=h.glyph.sizeClipSpace.x-h.clippedPixels/this._atlas.cacheCanvas.width,t[h.i+7]=h.glyph.sizeClipSpace.y):(t[h.i]=-h.glyph.offset.x+this._dimensions.scaledCharLeft,t[h.i+1]=-h.glyph.offset.y+this._dimensions.scaledCharTop,t[h.i+2]=h.glyph.size.x/this._dimensions.scaledCanvasWidth,t[h.i+3]=h.glyph.size.y/this._dimensions.scaledCanvasHeight,t[h.i+4]=h.glyph.texturePositionClipSpace.x,t[h.i+5]=h.glyph.texturePositionClipSpace.y,t[h.i+6]=h.glyph.sizeClipSpace.x,t[h.i+7]=h.glyph.sizeClipSpace.y)):(0,r.fill)(t,0,h.i,h.i+a-1-2)}clear(){const t=this._terminal,e=t.cols*t.rows*a;this._vertices.count!==e?this._vertices.attributes=new Float32Array(e):this._vertices.attributes.fill(0);for(let t=0;t<this._vertices.attributesBuffers.length;t++)this._vertices.count!==e?this._vertices.attributesBuffers[t]=new Float32Array(e):this._vertices.attributesBuffers[t].fill(0);this._vertices.count=e;let i=0;for(let e=0;e<t.rows;e++)for(let s=0;s<t.cols;s++)this._vertices.attributes[i+8]=s/t.cols,this._vertices.attributes[i+9]=e/t.rows,i+=a}onResize(){const t=this._gl;t.viewport(0,0,t.canvas.width,t.canvas.height),this.clear()}render(t){if(!this._atlas)return;const e=this._gl;e.useProgram(this._program),e.bindVertexArray(this._vertexArrayObject),this._activeBuffer=(this._activeBuffer+1)%2;const i=this._vertices.attributesBuffers[this._activeBuffer];let r=0;for(let e=0;e<t.lineLengths.length;e++){const s=e*this._terminal.cols*a,o=this._vertices.attributes.subarray(s,s+t.lineLengths[e]*a);i.set(o,r),r+=o.length}e.bindBuffer(e.ARRAY_BUFFER,this._attributesBuffer),e.bufferData(e.ARRAY_BUFFER,i.subarray(0,r),e.STREAM_DRAW),this._atlas.hasCanvasChanged&&(this._atlas.hasCanvasChanged=!1,e.uniform1i(this._textureLocation,0),e.activeTexture(e.TEXTURE0+0),e.bindTexture(e.TEXTURE_2D,this._atlasTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this._atlas.cacheCanvas),e.generateMipmap(e.TEXTURE_2D)),e.uniformMatrix4fv(this._projectionLocation,!1,s.PROJECTION_MATRIX),e.uniform2f(this._resolutionLocation,e.canvas.width,e.canvas.height),e.drawElementsInstanced(e.TRIANGLES,6,e.UNSIGNED_BYTE,0,r/a)}setAtlas(t){const e=this._gl;this._atlas=t,e.bindTexture(e.TEXTURE_2D,this._atlasTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t.cacheCanvas),e.generateMipmap(e.TEXTURE_2D)}setDimensions(t){this._dimensions=t}}e.GlyphRenderer=c},742:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.RectangleRenderer=void 0;const s=i(381),r=i(310),o=i(859),n=i(302),a=8*Float32Array.BYTES_PER_ELEMENT,l={rgba:0,isDefault:!1,x1:0,y1:0,r:0,g:0,b:0,a:0};class h extends o.Disposable{constructor(t,e,i,r){super(),this._terminal=t,this._colors=e,this._gl=i,this._dimensions=r,this._vertices={count:0,attributes:new Float32Array(160)};const n=this._gl;this._program=(0,s.throwIfFalsy)((0,s.createProgram)(n,\"#version 300 es\\nlayout (location = 0) in vec2 a_position;\\nlayout (location = 1) in vec2 a_size;\\nlayout (location = 2) in vec4 a_color;\\nlayout (location = 3) in vec2 a_unitquad;\\n\\nuniform mat4 u_projection;\\n\\nout vec4 v_color;\\n\\nvoid main() {\\n  vec2 zeroToOne = a_position + (a_unitquad * a_size);\\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\\n  v_color = a_color;\\n}\",\"#version 300 es\\nprecision lowp float;\\n\\nin vec4 v_color;\\n\\nout vec4 outColor;\\n\\nvoid main() {\\n  outColor = v_color;\\n}\")),this.register((0,o.toDisposable)((()=>n.deleteProgram(this._program)))),this._projectionLocation=(0,s.throwIfFalsy)(n.getUniformLocation(this._program,\"u_projection\")),this._vertexArrayObject=n.createVertexArray(),n.bindVertexArray(this._vertexArrayObject);const l=new Float32Array([0,0,1,0,0,1,1,1]),h=n.createBuffer();this.register((0,o.toDisposable)((()=>n.deleteBuffer(h)))),n.bindBuffer(n.ARRAY_BUFFER,h),n.bufferData(n.ARRAY_BUFFER,l,n.STATIC_DRAW),n.enableVertexAttribArray(3),n.vertexAttribPointer(3,2,this._gl.FLOAT,!1,0,0);const c=new Uint8Array([0,1,3,0,2,3]),_=n.createBuffer();this.register((0,o.toDisposable)((()=>n.deleteBuffer(_)))),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,_),n.bufferData(n.ELEMENT_ARRAY_BUFFER,c,n.STATIC_DRAW),this._attributesBuffer=(0,s.throwIfFalsy)(n.createBuffer()),this.register((0,o.toDisposable)((()=>n.deleteBuffer(this._attributesBuffer)))),n.bindBuffer(n.ARRAY_BUFFER,this._attributesBuffer),n.enableVertexAttribArray(0),n.vertexAttribPointer(0,2,n.FLOAT,!1,a,0),n.vertexAttribDivisor(0,1),n.enableVertexAttribArray(1),n.vertexAttribPointer(1,2,n.FLOAT,!1,a,2*Float32Array.BYTES_PER_ELEMENT),n.vertexAttribDivisor(1,1),n.enableVertexAttribArray(2),n.vertexAttribPointer(2,4,n.FLOAT,!1,a,4*Float32Array.BYTES_PER_ELEMENT),n.vertexAttribDivisor(2,1),this._updateCachedColors()}render(){const t=this._gl;t.useProgram(this._program),t.bindVertexArray(this._vertexArrayObject),t.uniformMatrix4fv(this._projectionLocation,!1,s.PROJECTION_MATRIX),t.bindBuffer(t.ARRAY_BUFFER,this._attributesBuffer),t.bufferData(t.ARRAY_BUFFER,this._vertices.attributes,t.DYNAMIC_DRAW),t.drawElementsInstanced(this._gl.TRIANGLES,6,t.UNSIGNED_BYTE,0,this._vertices.count)}onResize(){this._updateViewportRectangle()}setColors(){this._updateCachedColors(),this._updateViewportRectangle()}setDimensions(t){this._dimensions=t}_updateCachedColors(){this._bgFloat=this._colorToFloat32Array(this._colors.background)}_updateViewportRectangle(){this._addRectangleFloat(this._vertices.attributes,0,0,0,this._terminal.cols*this._dimensions.scaledCellWidth,this._terminal.rows*this._dimensions.scaledCellHeight,this._bgFloat)}updateBackgrounds(t){const e=this._terminal,i=this._vertices;let s,o,n,a,l,h,c,_,d,u,g,f=1;for(s=0;s<e.rows;s++){for(n=-1,a=0,l=0,h=!1,o=0;o<e.cols;o++)c=(s*e.cols+o)*r.RENDER_MODEL_INDICIES_PER_CELL,_=t.cells[c+r.RENDER_MODEL_BG_OFFSET],d=t.cells[c+r.RENDER_MODEL_FG_OFFSET],u=!!(67108864&d),(_!==a||d!==l&&(h||u))&&((0!==a||h&&0!==l)&&(g=8*f++,this._updateRectangle(i,g,l,a,n,o,s)),n=o,a=_,l=d,h=u);(0!==a||h&&0!==l)&&(g=8*f++,this._updateRectangle(i,g,l,a,n,e.cols,s))}i.count=f}_updateRectangle(t,e,i,r,o,a,h){if(l.isDefault=!1,67108864&i)switch(50331648&i){case 16777216:case 33554432:l.rgba=this._colors.ansi[255&i].rgba;break;case 50331648:l.rgba=(16777215&i)<<8;break;default:l.rgba=this._colors.foreground.rgba}else switch(50331648&r){case 16777216:case 33554432:l.rgba=this._colors.ansi[255&r].rgba;break;case 50331648:l.rgba=(16777215&r)<<8;break;default:l.rgba=this._colors.background.rgba,l.isDefault=!0}t.attributes.length<e+4&&(t.attributes=(0,s.expandFloat32Array)(t.attributes,this._terminal.rows*this._terminal.cols*8)),l.x1=o*this._dimensions.scaledCellWidth,l.y1=h*this._dimensions.scaledCellHeight,l.r=(l.rgba>>24&255)/255,l.g=(l.rgba>>16&255)/255,l.b=(l.rgba>>8&255)/255,l.a=!l.isDefault&&134217728&r?n.DIM_OPACITY:1,this._addRectangle(t.attributes,e,l.x1,l.y1,(a-o)*this._dimensions.scaledCellWidth,this._dimensions.scaledCellHeight,l.r,l.g,l.b,l.a)}_addRectangle(t,e,i,s,r,o,n,a,l,h){t[e]=i/this._dimensions.scaledCanvasWidth,t[e+1]=s/this._dimensions.scaledCanvasHeight,t[e+2]=r/this._dimensions.scaledCanvasWidth,t[e+3]=o/this._dimensions.scaledCanvasHeight,t[e+4]=n,t[e+5]=a,t[e+6]=l,t[e+7]=h}_addRectangleFloat(t,e,i,s,r,o,n){t[e]=i/this._dimensions.scaledCanvasWidth,t[e+1]=s/this._dimensions.scaledCanvasHeight,t[e+2]=r/this._dimensions.scaledCanvasWidth,t[e+3]=o/this._dimensions.scaledCanvasHeight,t[e+4]=n[0],t[e+5]=n[1],t[e+6]=n[2],t[e+7]=n[3]}_colorToFloat32Array(t){return new Float32Array([(t.rgba>>24&255)/255,(t.rgba>>16&255)/255,(t.rgba>>8&255)/255,(255&t.rgba)/255])}}e.RectangleRenderer=h},310:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.RenderModel=e.COMBINED_CHAR_BIT_MASK=e.RENDER_MODEL_EXT_OFFSET=e.RENDER_MODEL_FG_OFFSET=e.RENDER_MODEL_BG_OFFSET=e.RENDER_MODEL_INDICIES_PER_CELL=void 0;const s=i(455);e.RENDER_MODEL_INDICIES_PER_CELL=4,e.RENDER_MODEL_BG_OFFSET=1,e.RENDER_MODEL_FG_OFFSET=2,e.RENDER_MODEL_EXT_OFFSET=3,e.COMBINED_CHAR_BIT_MASK=2147483648,e.RenderModel=class{constructor(){this.cells=new Uint32Array(0),this.lineLengths=new Uint32Array(0),this.selection={hasSelection:!1,columnSelectMode:!1,viewportStartRow:0,viewportEndRow:0,viewportCappedStartRow:0,viewportCappedEndRow:0,startCol:0,endCol:0}}resize(t,i){const s=t*i*e.RENDER_MODEL_INDICIES_PER_CELL;s!==this.cells.length&&(this.cells=new Uint32Array(s),this.lineLengths=new Uint32Array(i))}clear(){(0,s.fill)(this.cells,0,0),(0,s.fill)(this.lineLengths,0,0)}clearSelection(){this.selection.hasSelection=!1,this.selection.viewportStartRow=0,this.selection.viewportEndRow=0,this.selection.viewportCappedStartRow=0,this.selection.viewportCappedEndRow=0,this.selection.startCol=0,this.selection.endCol=0}}},666:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.JoinedCellData=e.WebglRenderer=void 0;const s=i(965),r=i(733),o=i(461),n=i(713),a=i(742),l=i(310),h=i(859),c=i(855),_=i(476),d=i(345),u=i(782),g=i(820),f=i(147),C={fg:0,bg:0,hasFg:!1,hasBg:!1,isSelected:!1};class p extends h.Disposable{constructor(t,e,i,s,a,h,c){super(),this._terminal=t,this._colors=e,this._characterJoinerService=i,this._coreBrowserService=s,this._decorationService=h,this._model=new l.RenderModel,this._workCell=new u.CellData,this._workColors={fg:0,bg:0,ext:0},this._onChangeTextureAtlas=new d.EventEmitter,this._onRequestRedraw=new d.EventEmitter,this._onContextLoss=new d.EventEmitter,this._core=this._terminal._core,this._renderLayers=[new r.LinkRenderLayer(this._core.screenElement,2,this._colors,this._core,this._coreBrowserService),new o.CursorRenderLayer(t,this._core.screenElement,3,this._colors,this._onRequestRedraw,this._coreBrowserService,a)],this.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},this._devicePixelRatio=this._coreBrowserService.dpr,this._updateDimensions(),this._canvas=document.createElement(\"canvas\");const f={antialias:!1,depth:!1,preserveDrawingBuffer:c};if(this._gl=this._canvas.getContext(\"webgl2\",f),!this._gl)throw new Error(\"WebGL2 not supported \"+this._gl);this.register((0,g.addDisposableDomListener)(this._canvas,\"webglcontextlost\",(t=>{console.log(\"webglcontextlost event received\"),t.preventDefault(),this._contextRestorationTimeout=setTimeout((()=>{this._contextRestorationTimeout=void 0,console.warn(\"webgl context not restored; firing onContextLoss\"),this._onContextLoss.fire(t)}),3e3)}))),this.register((0,g.addDisposableDomListener)(this._canvas,\"webglcontextrestored\",(t=>{console.warn(\"webglcontextrestored event received\"),clearTimeout(this._contextRestorationTimeout),this._contextRestorationTimeout=void 0,(0,n.removeTerminalFromCache)(this._terminal),this._initializeWebGLState(),this._requestRedrawViewport()}))),this.register((0,_.observeDevicePixelDimensions)(this._canvas,this._coreBrowserService.window,((t,e)=>this._setCanvasDevicePixelDimensions(t,e)))),this._core.screenElement.appendChild(this._canvas),this._initializeWebGLState(),this._isAttached=this._coreBrowserService.window.document.body.contains(this._core.screenElement)}get onChangeTextureAtlas(){return this._onChangeTextureAtlas.event}get onRequestRedraw(){return this._onRequestRedraw.event}get onContextLoss(){return this._onContextLoss.event}dispose(){var t;for(const t of this._renderLayers)t.dispose();null===(t=this._canvas.parentElement)||void 0===t||t.removeChild(this._canvas),(0,n.removeTerminalFromCache)(this._terminal),super.dispose()}get textureAtlas(){var t;return null===(t=this._charAtlas)||void 0===t?void 0:t.cacheCanvas}setColors(t){this._colors=t;for(const t of this._renderLayers)t.setColors(this._terminal,this._colors),t.reset(this._terminal);this._rectangleRenderer.setColors(),this._refreshCharAtlas(),this._clearModel(!0)}onDevicePixelRatioChange(){this._devicePixelRatio!==this._coreBrowserService.dpr&&(this._devicePixelRatio=this._coreBrowserService.dpr,this.onResize(this._terminal.cols,this._terminal.rows))}onResize(t,e){this._updateDimensions(),this._model.resize(this._terminal.cols,this._terminal.rows);for(const t of this._renderLayers)t.resize(this._terminal,this.dimensions);this._canvas.width=this.dimensions.scaledCanvasWidth,this._canvas.height=this.dimensions.scaledCanvasHeight,this._canvas.style.width=`${this.dimensions.canvasWidth}px`,this._canvas.style.height=`${this.dimensions.canvasHeight}px`,this._core.screenElement.style.width=`${this.dimensions.canvasWidth}px`,this._core.screenElement.style.height=`${this.dimensions.canvasHeight}px`,this._rectangleRenderer.setDimensions(this.dimensions),this._rectangleRenderer.onResize(),this._glyphRenderer.setDimensions(this.dimensions),this._glyphRenderer.onResize(),this._refreshCharAtlas(),this._clearModel(!1)}onCharSizeChanged(){this.onResize(this._terminal.cols,this._terminal.rows)}onBlur(){for(const t of this._renderLayers)t.onBlur(this._terminal);this._requestRedrawViewport()}onFocus(){for(const t of this._renderLayers)t.onFocus(this._terminal);this._requestRedrawViewport()}onSelectionChanged(t,e,i){for(const s of this._renderLayers)s.onSelectionChanged(this._terminal,t,e,i);this._updateSelectionModel(t,e,i),this._requestRedrawViewport()}onCursorMove(){for(const t of this._renderLayers)t.onCursorMove(this._terminal)}onOptionsChanged(){for(const t of this._renderLayers)t.onOptionsChanged(this._terminal);this._updateDimensions(),this._refreshCharAtlas()}_initializeWebGLState(){var t,e;null===(t=this._rectangleRenderer)||void 0===t||t.dispose(),null===(e=this._glyphRenderer)||void 0===e||e.dispose(),this._rectangleRenderer=new a.RectangleRenderer(this._terminal,this._colors,this._gl,this.dimensions),this._glyphRenderer=new s.GlyphRenderer(this._terminal,this._colors,this._gl,this.dimensions),this.onCharSizeChanged()}_refreshCharAtlas(){if(this.dimensions.scaledCharWidth<=0&&this.dimensions.scaledCharHeight<=0)return void(this._isAttached=!1);const t=(0,n.acquireCharAtlas)(this._terminal,this._colors,this.dimensions.scaledCellWidth,this.dimensions.scaledCellHeight,this.dimensions.scaledCharWidth,this.dimensions.scaledCharHeight,this._coreBrowserService.dpr);if(!(\"getRasterizedGlyph\"in t))throw new Error(\"The webgl renderer only works with the webgl char atlas\");this._charAtlas!==t&&this._onChangeTextureAtlas.fire(t.cacheCanvas),this._charAtlas=t,this._charAtlas.warmUp(),this._glyphRenderer.setAtlas(this._charAtlas)}_clearModel(t){this._model.clear(),t&&this._glyphRenderer.clear()}clearCharAtlas(){var t;null===(t=this._charAtlas)||void 0===t||t.clearTexture(),this._clearModel(!0),this._updateModel(0,this._terminal.rows-1),this._requestRedrawViewport()}clear(){this._clearModel(!0);for(const t of this._renderLayers)t.reset(this._terminal)}registerCharacterJoiner(t){return-1}deregisterCharacterJoiner(t){return!1}renderRows(t,e){if(!this._isAttached){if(!(this._coreBrowserService.window.document.body.contains(this._core.screenElement)&&this._core._charSizeService.width&&this._core._charSizeService.height))return;this._updateDimensions(),this._refreshCharAtlas(),this._isAttached=!0}for(const i of this._renderLayers)i.onGridChanged(this._terminal,t,e);this._glyphRenderer.beginFrame()&&(this._clearModel(!0),this._updateSelectionModel(void 0,void 0)),this._updateModel(t,e),this._rectangleRenderer.render(),this._glyphRenderer.render(this._model)}_updateModel(t,e){const i=this._core;let s,r,o,n,a,h,_,d,u,g,f,C,p,v=this._workCell;for(r=t;r<=e;r++)for(o=r+i.buffer.ydisp,n=i.buffer.lines.get(o),this._model.lineLengths[r]=0,a=this._characterJoinerService.getJoinedCharacters(o),C=0;C<i.cols;C++)if(s=this._workColors.bg,n.loadCell(C,v),0===C&&(s=this._workColors.bg),h=!1,_=C,a.length>0&&C===a[0][0]&&(h=!0,d=a.shift(),v=new m(v,n.translateToString(!0,d[0],d[1]),d[1]-d[0]),_=d[1]-1),u=v.getChars(),g=v.getCode(),f=(r*i.cols+C)*l.RENDER_MODEL_INDICIES_PER_CELL,this._loadColorsForCell(C,o),g!==c.NULL_CELL_CODE&&(this._model.lineLengths[r]=C+1),(this._model.cells[f]!==g||this._model.cells[f+l.RENDER_MODEL_BG_OFFSET]!==this._workColors.bg||this._model.cells[f+l.RENDER_MODEL_FG_OFFSET]!==this._workColors.fg||this._model.cells[f+l.RENDER_MODEL_EXT_OFFSET]!==this._workColors.ext)&&(u.length>1&&(g|=l.COMBINED_CHAR_BIT_MASK),this._model.cells[f]=g,this._model.cells[f+l.RENDER_MODEL_BG_OFFSET]=this._workColors.bg,this._model.cells[f+l.RENDER_MODEL_FG_OFFSET]=this._workColors.fg,this._model.cells[f+l.RENDER_MODEL_EXT_OFFSET]=this._workColors.ext,this._glyphRenderer.updateCell(C,r,g,this._workColors.bg,this._workColors.fg,this._workColors.ext,u,s),h))for(v=this._workCell,C++;C<_;C++)p=(r*i.cols+C)*l.RENDER_MODEL_INDICIES_PER_CELL,this._glyphRenderer.updateCell(C,r,c.NULL_CELL_CODE,0,0,0,c.NULL_CELL_CHAR,0),this._model.cells[p]=c.NULL_CELL_CODE,this._model.cells[p+l.RENDER_MODEL_BG_OFFSET]=this._workColors.bg,this._model.cells[p+l.RENDER_MODEL_FG_OFFSET]=this._workColors.fg,this._model.cells[p+l.RENDER_MODEL_EXT_OFFSET]=this._workColors.ext;this._rectangleRenderer.updateBackgrounds(this._model)}_loadColorsForCell(t,e){this._workColors.bg=this._workCell.bg,this._workColors.fg=this._workCell.fg,this._workColors.ext=268435456&this._workCell.bg?this._workCell.extended.ext:0,C.bg=0,C.fg=0,C.hasBg=!1,C.hasFg=!1,C.isSelected=!1,this._decorationService.forEachDecorationAtCell(t,e,\"bottom\",(t=>{t.backgroundColorRGB&&(C.bg=t.backgroundColorRGB.rgba>>8&16777215,C.hasBg=!0),t.foregroundColorRGB&&(C.fg=t.foregroundColorRGB.rgba>>8&16777215,C.hasFg=!0)})),C.isSelected=this._isCellSelected(t,e),C.isSelected&&(C.bg=(this._coreBrowserService.isFocused?this._colors.selectionBackgroundOpaque:this._colors.selectionInactiveBackgroundOpaque).rgba>>8&16777215,C.hasBg=!0,this._colors.selectionForeground&&(C.fg=this._colors.selectionForeground.rgba>>8&16777215,C.hasFg=!0)),this._decorationService.forEachDecorationAtCell(t,e,\"top\",(t=>{t.backgroundColorRGB&&(C.bg=t.backgroundColorRGB.rgba>>8&16777215,C.hasBg=!0),t.foregroundColorRGB&&(C.fg=t.foregroundColorRGB.rgba>>8&16777215,C.hasFg=!0)})),C.hasBg&&(C.isSelected?C.bg=-16777216&this._workCell.bg&-134217729|C.bg|50331648:C.bg=-16777216&this._workCell.bg|C.bg|50331648),C.hasFg&&(C.fg=-16777216&this._workCell.fg&-67108865|C.fg|50331648),67108864&this._workColors.fg&&(C.hasBg&&!C.hasFg&&(0==(50331648&this._workColors.bg)?C.fg=-134217728&this._workColors.fg|16777215&this._colors.background.rgba>>8|50331648:C.fg=-134217728&this._workColors.fg|67108863&this._workColors.bg,C.hasFg=!0),!C.hasBg&&C.hasFg&&(0==(50331648&this._workColors.fg)?C.bg=-67108864&this._workColors.bg|16777215&this._colors.foreground.rgba>>8|50331648:C.bg=-67108864&this._workColors.bg|67108863&this._workColors.fg,C.hasBg=!0)),this._workColors.bg=C.hasBg?C.bg:this._workColors.bg,this._workColors.fg=C.hasFg?C.fg:this._workColors.fg}_isCellSelected(t,e){return!!this._model.selection.hasSelection&&(e-=this._terminal.buffer.active.viewportY,this._model.selection.columnSelectMode?this._model.selection.startCol<=this._model.selection.endCol?t>=this._model.selection.startCol&&e>=this._model.selection.viewportCappedStartRow&&t<this._model.selection.endCol&&e<=this._model.selection.viewportCappedEndRow:t<this._model.selection.startCol&&e>=this._model.selection.viewportCappedStartRow&&t>=this._model.selection.endCol&&e<=this._model.selection.viewportCappedEndRow:e>this._model.selection.viewportStartRow&&e<this._model.selection.viewportEndRow||this._model.selection.viewportStartRow===this._model.selection.viewportEndRow&&e===this._model.selection.viewportStartRow&&t>=this._model.selection.startCol&&t<this._model.selection.endCol||this._model.selection.viewportStartRow<this._model.selection.viewportEndRow&&e===this._model.selection.viewportEndRow&&t<this._model.selection.endCol||this._model.selection.viewportStartRow<this._model.selection.viewportEndRow&&e===this._model.selection.viewportStartRow&&t>=this._model.selection.startCol)}_updateSelectionModel(t,e,i=!1){const s=this._terminal;if(!t||!e||t[0]===e[0]&&t[1]===e[1])return void this._model.clearSelection();const r=t[1]-s.buffer.active.viewportY,o=e[1]-s.buffer.active.viewportY,n=Math.max(r,0),a=Math.min(o,s.rows-1);n>=s.rows||a<0?this._model.clearSelection():(this._model.selection.hasSelection=!0,this._model.selection.columnSelectMode=i,this._model.selection.viewportStartRow=r,this._model.selection.viewportEndRow=o,this._model.selection.viewportCappedStartRow=n,this._model.selection.viewportCappedEndRow=a,this._model.selection.startCol=t[0],this._model.selection.endCol=e[0])}_updateDimensions(){this._core._charSizeService.width&&this._core._charSizeService.height&&(this.dimensions.scaledCharWidth=Math.floor(this._core._charSizeService.width*this._devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._core._charSizeService.height*this._devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharTop=1===this._terminal.options.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._terminal.options.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._terminal.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._terminal.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/this._devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/this._devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.scaledCellHeight/this._devicePixelRatio,this.dimensions.actualCellWidth=this.dimensions.scaledCellWidth/this._devicePixelRatio)}_setCanvasDevicePixelDimensions(t,e){this._canvas.width===t&&this._canvas.height===e||(this._canvas.width=t,this._canvas.height=e,this._requestRedrawViewport())}_requestRedrawViewport(){this._onRequestRedraw.fire({start:0,end:this._terminal.rows-1})}}e.WebglRenderer=p;class m extends f.AttributeData{constructor(t,e,i){super(),this.content=0,this.combinedData=\"\",this.fg=t.fg,this.bg=t.bg,this.combinedData=e,this._width=i}isCombined(){return 2097152}getWidth(){return this._width}getChars(){return this.combinedData}getCode(){return 2097151}setFromCharData(t){throw new Error(\"not implemented\")}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}e.JoinedCellData=m},381:(t,e)=>{function i(t,e,i){const r=s(t.createShader(e));if(t.shaderSource(r,i),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;console.error(t.getShaderInfoLog(r)),t.deleteShader(r)}function s(t){if(!t)throw new Error(\"value must not be falsy\");return t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.throwIfFalsy=e.expandFloat32Array=e.createShader=e.createProgram=e.PROJECTION_MATRIX=void 0,e.PROJECTION_MATRIX=new Float32Array([2,0,0,0,0,-2,0,0,0,0,1,0,-1,1,0,1]),e.createProgram=function(t,e,r){const o=s(t.createProgram());if(t.attachShader(o,s(i(t,t.VERTEX_SHADER,e))),t.attachShader(o,s(i(t,t.FRAGMENT_SHADER,r))),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;console.error(t.getProgramInfoLog(o)),t.deleteProgram(o)},e.createShader=i,e.expandFloat32Array=function(t,e){const i=Math.min(2*t.length,e),s=new Float32Array(i);for(let e=0;e<t.length;e++)s[e]=t[e];return s},e.throwIfFalsy=s},713:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.removeTerminalFromCache=e.acquireCharAtlas=void 0;const s=i(433),r=i(167),o=[];e.acquireCharAtlas=function(t,e,i,n,a,l,h){const c=(0,s.generateConfig)(i,n,a,l,t,e,h);for(let e=0;e<o.length;e++){const i=o[e],r=i.ownedBy.indexOf(t);if(r>=0){if((0,s.configEquals)(i.config,c))return i.atlas;1===i.ownedBy.length?(i.atlas.dispose(),o.splice(e,1)):i.ownedBy.splice(r,1);break}}for(let e=0;e<o.length;e++){const i=o[e];if((0,s.configEquals)(i.config,c))return i.ownedBy.push(t),i.atlas}const _=t._core,d={atlas:new r.WebglCharAtlas(document,c,_.unicodeService),config:c,ownedBy:[t]};return o.push(d),d.atlas},e.removeTerminalFromCache=function(t){for(let e=0;e<o.length;e++){const i=o[e].ownedBy.indexOf(t);if(-1!==i){1===o[e].ownedBy.length?(o[e].atlas.dispose(),o.splice(e,1)):o[e].ownedBy.splice(i,1);break}}}},433:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.is256Color=e.configEquals=e.generateConfig=void 0;const i={css:\"\",rgba:0};e.generateConfig=function(t,e,s,r,o,n,a){const l={foreground:n.foreground,background:n.background,cursor:i,cursorAccent:i,selectionForeground:i,selectionBackgroundTransparent:i,selectionBackgroundOpaque:i,selectionInactiveBackgroundTransparent:i,selectionInactiveBackgroundOpaque:i,ansi:n.ansi.slice(),contrastCache:n.contrastCache};return{customGlyphs:o.options.customGlyphs,devicePixelRatio:a,letterSpacing:o.options.letterSpacing,lineHeight:o.options.lineHeight,scaledCellWidth:t,scaledCellHeight:e,scaledCharWidth:s,scaledCharHeight:r,fontFamily:o.options.fontFamily,fontSize:o.options.fontSize,fontWeight:o.options.fontWeight,fontWeightBold:o.options.fontWeightBold,allowTransparency:o.options.allowTransparency,drawBoldTextInBrightColors:o.options.drawBoldTextInBrightColors,minimumContrastRatio:o.options.minimumContrastRatio,colors:l}},e.configEquals=function(t,e){for(let i=0;i<t.colors.ansi.length;i++)if(t.colors.ansi[i].rgba!==e.colors.ansi[i].rgba)return!1;return t.devicePixelRatio===e.devicePixelRatio&&t.customGlyphs===e.customGlyphs&&t.lineHeight===e.lineHeight&&t.letterSpacing===e.letterSpacing&&t.fontFamily===e.fontFamily&&t.fontSize===e.fontSize&&t.fontWeight===e.fontWeight&&t.fontWeightBold===e.fontWeightBold&&t.allowTransparency===e.allowTransparency&&t.scaledCharWidth===e.scaledCharWidth&&t.scaledCharHeight===e.scaledCharHeight&&t.drawBoldTextInBrightColors===e.drawBoldTextInBrightColors&&t.minimumContrastRatio===e.minimumContrastRatio&&t.colors.foreground===e.colors.foreground&&t.colors.background===e.colors.background},e.is256Color=function(t){return 16777216==(50331648&t)||33554432==(50331648&t)}},167:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.WebglCharAtlas=void 0;const s=i(302),r=i(855),o=i(381),n=i(147),a=i(160),l=i(14),h=i(634),c=i(485),_=1024,d=1024,u=Math.floor(819.2),g={css:\"rgba(0, 0, 0, 0)\",rgba:0},f={offset:{x:0,y:0},texturePosition:{x:0,y:0},texturePositionClipSpace:{x:0,y:0},size:{x:0,y:0},sizeClipSpace:{x:0,y:0}},C={glyph:void 0};function p(t,e,i,s){const r=e.rgba>>>24,o=e.rgba>>>16&255,n=e.rgba>>>8&255,a=i.rgba>>>24,l=i.rgba>>>16&255,h=i.rgba>>>8&255,c=Math.floor((Math.abs(r-a)+Math.abs(o-l)+Math.abs(n-h))/12);let _=!0;for(let e=0;e<t.data.length;e+=4)t.data[e]===r&&t.data[e+1]===o&&t.data[e+2]===n||s&&Math.abs(t.data[e]-r)+Math.abs(t.data[e+1]-o)+Math.abs(t.data[e+2]-n)<c?t.data[e+3]=0:_=!1;return _}e.WebglCharAtlas=class{constructor(t,e,i){this._config=e,this._unicodeService=i,this._didWarmUp=!1,this._cacheMap=new c.FourKeyMap,this._cacheMapCombined=new c.FourKeyMap,this._currentRow={x:0,y:0,height:0},this._fixedRows=[],this.hasCanvasChanged=!1,this._workBoundingBox={top:0,left:0,bottom:0,right:0},this._workAttributeData=new n.AttributeData,this.cacheCanvas=t.createElement(\"canvas\"),this.cacheCanvas.width=_,this.cacheCanvas.height=d,this._cacheCtx=(0,o.throwIfFalsy)(this.cacheCanvas.getContext(\"2d\",{alpha:!0})),this._tmpCanvas=t.createElement(\"canvas\"),this._tmpCanvas.width=4*this._config.scaledCellWidth+4,this._tmpCanvas.height=this._config.scaledCellHeight+4,this._tmpCtx=(0,o.throwIfFalsy)(this._tmpCanvas.getContext(\"2d\",{alpha:this._config.allowTransparency}))}dispose(){this.cacheCanvas.parentElement&&this.cacheCanvas.parentElement.removeChild(this.cacheCanvas)}warmUp(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)}_doWarmUp(){for(let t=33;t<126;t++){const e=this._drawToCache(t,r.DEFAULT_COLOR,r.DEFAULT_COLOR,r.DEFAULT_EXT);this._cacheMap.set(t,r.DEFAULT_COLOR,r.DEFAULT_COLOR,r.DEFAULT_EXT,e)}}beginFrame(){return this._currentRow.y>u&&(this.clearTexture(),this.warmUp(),!0)}clearTexture(){0===this._currentRow.x&&0===this._currentRow.y||(this._cacheCtx.clearRect(0,0,_,d),this._cacheMap.clear(),this._cacheMapCombined.clear(),this._currentRow.x=0,this._currentRow.y=0,this._currentRow.height=0,this._fixedRows.length=0,this._didWarmUp=!1)}getRasterizedGlyphCombinedChar(t,e,i,s){return this._getFromCacheMap(this._cacheMapCombined,t,e,i,s)}getRasterizedGlyph(t,e,i,s){return this._getFromCacheMap(this._cacheMap,t,e,i,s)}_getFromCacheMap(t,e,i,s,r){return C.glyph=t.get(e,i,s,r),C.glyph||(C.glyph=this._drawToCache(e,i,s,r),t.set(e,i,s,r,C.glyph)),C.glyph}_getColorFromAnsiIndex(t){if(t>=this._config.colors.ansi.length)throw new Error(\"No color found for idx \"+t);return this._config.colors.ansi[t]}_getBackgroundColor(t,e,i,r){if(this._config.allowTransparency)return g;let o;switch(t){case 16777216:case 33554432:o=this._getColorFromAnsiIndex(e);break;case 50331648:const t=n.AttributeData.toColorRGB(e);o=a.rgba.toColor(t[0],t[1],t[2]);break;default:o=i?this._config.colors.foreground:this._config.colors.background}return r&&(o=a.color.blend(this._config.colors.background,a.color.multiplyOpacity(o,s.DIM_OPACITY))),o}_getForegroundColor(t,e,i,r,o,l,h,c,_,d){const u=this._getMinimumContrastColor(t,e,i,r,o,l,!1,_,d);if(u)return u;let g;switch(o){case 16777216:case 33554432:this._config.drawBoldTextInBrightColors&&_&&l<8&&(l+=8),g=this._getColorFromAnsiIndex(l);break;case 50331648:const t=n.AttributeData.toColorRGB(l);g=a.rgba.toColor(t[0],t[1],t[2]);break;default:g=h?this._config.colors.background:this._config.colors.foreground}return this._config.allowTransparency&&(g=a.color.opaque(g)),c&&(g=a.color.multiplyOpacity(g,s.DIM_OPACITY)),g}_resolveBackgroundRgba(t,e,i){switch(t){case 16777216:case 33554432:return this._getColorFromAnsiIndex(e).rgba;case 50331648:return e<<8;default:return i?this._config.colors.foreground.rgba:this._config.colors.background.rgba}}_resolveForegroundRgba(t,e,i,s){switch(t){case 16777216:case 33554432:return this._config.drawBoldTextInBrightColors&&s&&e<8&&(e+=8),this._getColorFromAnsiIndex(e).rgba;case 50331648:return e<<8;default:return i?this._config.colors.background.rgba:this._config.colors.foreground.rgba}}_getMinimumContrastColor(t,e,i,s,r,o,n,l,h){if(1===this._config.minimumContrastRatio||h)return;const c=this._config.colors.contrastCache.getColor(t,s);if(void 0!==c)return c||void 0;const _=this._resolveBackgroundRgba(e,i,n),d=this._resolveForegroundRgba(r,o,n,l),u=a.rgba.ensureContrastRatio(_,d,this._config.minimumContrastRatio);if(!u)return void this._config.colors.contrastCache.setColor(t,s,null);const g=a.rgba.toColor(u>>24&255,u>>16&255,u>>8&255);return this._config.colors.contrastCache.setColor(t,s,g),g}_drawToCache(t,e,i,r){const o=\"number\"==typeof t?String.fromCharCode(t):t;this.hasCanvasChanged=!0;const a=this._config.scaledCellWidth*Math.max(o.length,2)+4;this._tmpCanvas.width<a&&(this._tmpCanvas.width=a);const c=this._config.scaledCellHeight+8;if(this._tmpCanvas.height<c&&(this._tmpCanvas.height=c),this._tmpCtx.save(),this._workAttributeData.fg=i,this._workAttributeData.bg=e,this._workAttributeData.extended.ext=r,this._workAttributeData.isInvisible())return f;const u=!!this._workAttributeData.isBold(),g=!!this._workAttributeData.isInverse(),C=!!this._workAttributeData.isDim(),m=!!this._workAttributeData.isItalic(),v=!!this._workAttributeData.isUnderline(),L=!!this._workAttributeData.isStrikethrough();let w=this._workAttributeData.getFgColor(),x=this._workAttributeData.getFgColorMode(),b=this._workAttributeData.getBgColor(),M=this._workAttributeData.getBgColorMode();if(g){const t=w;w=b,b=t;const e=x;x=M,M=e}const y=this._getBackgroundColor(M,b,g,C);this._tmpCtx.globalCompositeOperation=\"copy\",this._tmpCtx.fillStyle=y.css,this._tmpCtx.fillRect(0,0,this._tmpCanvas.width,this._tmpCanvas.height),this._tmpCtx.globalCompositeOperation=\"source-over\";const R=u?this._config.fontWeightBold:this._config.fontWeight,E=m?\"italic\":\"\";this._tmpCtx.font=`${E} ${R} ${this._config.fontSize*this._config.devicePixelRatio}px ${this._config.fontFamily}`,this._tmpCtx.textBaseline=s.TEXT_BASELINE;const A=1===o.length&&(0,h.isPowerlineGlyph)(o.charCodeAt(0)),D=1===o.length&&(0,h.isRestrictedPowerlineGlyph)(o.charCodeAt(0)),T=this._getForegroundColor(e,M,b,i,x,w,g,C,u,(0,h.excludeFromContrastRatioDemands)(o.charCodeAt(0)));this._tmpCtx.fillStyle=T.css;const S=D?0:4;let B=!1;!1!==this._config.customGlyphs&&(B=(0,l.tryDrawCustomChar)(this._tmpCtx,o,S,S,this._config.scaledCellWidth,this._config.scaledCellHeight,this._config.fontSize,this._config.devicePixelRatio));let F,k=!A;if(F=\"number\"==typeof t?this._unicodeService.wcwidth(t):this._unicodeService.getStringCellWidth(t),v){this._tmpCtx.save();const t=Math.max(1,Math.floor(this._config.fontSize*this._config.devicePixelRatio/15)),e=t%2==1?.5:0;if(this._tmpCtx.lineWidth=t,this._workAttributeData.isUnderlineColorDefault())this._tmpCtx.strokeStyle=this._tmpCtx.fillStyle;else if(this._workAttributeData.isUnderlineColorRGB())k=!1,this._tmpCtx.strokeStyle=`rgb(${n.AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(\",\")})`;else{k=!1;let t=this._workAttributeData.getUnderlineColor();this._config.drawBoldTextInBrightColors&&this._workAttributeData.isBold()&&t<8&&(t+=8),this._tmpCtx.strokeStyle=this._getColorFromAnsiIndex(t).css}this._tmpCtx.beginPath();const i=S,s=Math.ceil(S+this._config.scaledCharHeight)-e,r=S+this._config.scaledCharHeight+t-e,a=Math.ceil(S+this._config.scaledCharHeight+2*t)-e;for(let o=0;o<F;o++){this._tmpCtx.save();const n=i+o*this._config.scaledCellWidth,l=i+(o+1)*this._config.scaledCellWidth,h=n+this._config.scaledCellWidth/2;switch(this._workAttributeData.extended.underlineStyle){case 2:this._tmpCtx.moveTo(n,s),this._tmpCtx.lineTo(l,s),this._tmpCtx.moveTo(n,a),this._tmpCtx.lineTo(l,a);break;case 3:const i=t<=1?a:Math.ceil(S+this._config.scaledCharHeight-t/2)-e,o=t<=1?s:Math.ceil(S+this._config.scaledCharHeight+t/2)-e,c=new Path2D;c.rect(n,s,this._config.scaledCellWidth,a-s),this._tmpCtx.clip(c),this._tmpCtx.moveTo(n-this._config.scaledCellWidth/2,r),this._tmpCtx.bezierCurveTo(n-this._config.scaledCellWidth/2,o,n,o,n,r),this._tmpCtx.bezierCurveTo(n,i,h,i,h,r),this._tmpCtx.bezierCurveTo(h,o,l,o,l,r),this._tmpCtx.bezierCurveTo(l,i,l+this._config.scaledCellWidth/2,i,l+this._config.scaledCellWidth/2,r);break;case 4:this._tmpCtx.setLineDash([2*this._config.devicePixelRatio,this._config.devicePixelRatio]),this._tmpCtx.moveTo(n,s),this._tmpCtx.lineTo(l,s);break;case 5:this._tmpCtx.setLineDash([4*this._config.devicePixelRatio,3*this._config.devicePixelRatio]),this._tmpCtx.moveTo(n,s),this._tmpCtx.lineTo(l,s);break;default:this._tmpCtx.moveTo(n,s),this._tmpCtx.lineTo(l,s)}this._tmpCtx.stroke(),this._tmpCtx.restore()}if(this._tmpCtx.restore(),!B&&this._config.fontSize>=12&&!this._config.allowTransparency&&\" \"!==o){this._tmpCtx.save(),this._tmpCtx.textBaseline=\"alphabetic\";const e=this._tmpCtx.measureText(o);if(this._tmpCtx.restore(),\"actualBoundingBoxDescent\"in e&&e.actualBoundingBoxDescent>0){this._tmpCtx.save();const e=new Path2D;e.rect(i,s-Math.ceil(t/2),this._config.scaledCellWidth,a-s+Math.ceil(t/2)),this._tmpCtx.clip(e),this._tmpCtx.lineWidth=3*this._config.devicePixelRatio,this._tmpCtx.strokeStyle=y.css,this._tmpCtx.strokeText(o,S,S+this._config.scaledCharHeight),this._tmpCtx.restore()}}}if(B||this._tmpCtx.fillText(o,S,S+this._config.scaledCharHeight),\"_\"===o&&!this._config.allowTransparency){let t=p(this._tmpCtx.getImageData(S,S,this._config.scaledCellWidth,this._config.scaledCellHeight),y,T,k);if(t)for(let e=1;e<=5&&(this._tmpCtx.save(),this._tmpCtx.fillStyle=y.css,this._tmpCtx.fillRect(0,0,this._tmpCanvas.width,this._tmpCanvas.height),this._tmpCtx.restore(),this._tmpCtx.fillText(o,S,S+this._config.scaledCharHeight-e),t=p(this._tmpCtx.getImageData(S,S,this._config.scaledCellWidth,this._config.scaledCellHeight),y,T,k),t);e++);}if(L){const t=Math.max(1,Math.floor(this._config.fontSize*this._config.devicePixelRatio/10)),e=this._tmpCtx.lineWidth%2==1?.5:0;this._tmpCtx.lineWidth=t,this._tmpCtx.strokeStyle=this._tmpCtx.fillStyle,this._tmpCtx.beginPath(),this._tmpCtx.moveTo(S,S+Math.floor(this._config.scaledCharHeight/2)-e),this._tmpCtx.lineTo(S+this._config.scaledCharWidth*F,S+Math.floor(this._config.scaledCharHeight/2)-e),this._tmpCtx.stroke()}this._tmpCtx.restore();const I=this._tmpCtx.getImageData(0,0,this._tmpCanvas.width,this._tmpCanvas.height);let $;if($=this._config.allowTransparency?function(t){for(let e=0;e<t.data.length;e+=4)if(t.data[e+3]>0)return!1;return!0}(I):p(I,y,T,k),$)return f;const P=this._findGlyphBoundingBox(I,this._workBoundingBox,a,D,B,S),W=this._clipImageData(I,this._workBoundingBox);let O;for(;;){O=this._currentRow;for(const t of this._fixedRows)(O===this._currentRow||t.height<O.height)&&P.size.y<=t.height&&(O=t);if(O.height>2*P.size.y&&(this._currentRow.height>0&&this._fixedRows.push(this._currentRow),O={x:0,y:this._currentRow.y+this._currentRow.height,height:P.size.y},this._fixedRows.push(O),this._currentRow={x:0,y:O.y+O.height,height:0}),O.x+P.size.x<=_)break;O===this._currentRow?(O.x=0,O.y+=O.height,O.height=0):this._fixedRows.splice(this._fixedRows.indexOf(O),1)}return P.texturePosition.x=O.x,P.texturePosition.y=O.y,P.texturePositionClipSpace.x=O.x/_,P.texturePositionClipSpace.y=O.y/d,O.height=Math.max(O.height,P.size.y),O.x+=P.size.x,this._cacheCtx.putImageData(W,P.texturePosition.x,P.texturePosition.y),P}_findGlyphBoundingBox(t,e,i,s,r,o){e.top=0;const n=s?this._config.scaledCellHeight:this._tmpCanvas.height,a=s?this._config.scaledCellWidth:i;let l=!1;for(let i=0;i<n;i++){for(let s=0;s<a;s++){const r=i*this._tmpCanvas.width*4+4*s+3;if(0!==t.data[r]){e.top=i,l=!0;break}}if(l)break}e.left=0,l=!1;for(let i=0;i<a;i++){for(let s=0;s<n;s++){const r=s*this._tmpCanvas.width*4+4*i+3;if(0!==t.data[r]){e.left=i,l=!0;break}}if(l)break}e.right=a,l=!1;for(let i=a-1;i>=0;i--){for(let s=0;s<n;s++){const r=s*this._tmpCanvas.width*4+4*i+3;if(0!==t.data[r]){e.right=i,l=!0;break}}if(l)break}e.bottom=n,l=!1;for(let i=n-1;i>=0;i--){for(let s=0;s<a;s++){const r=i*this._tmpCanvas.width*4+4*s+3;if(0!==t.data[r]){e.bottom=i,l=!0;break}}if(l)break}return{texturePosition:{x:0,y:0},texturePositionClipSpace:{x:0,y:0},size:{x:e.right-e.left+1,y:e.bottom-e.top+1},sizeClipSpace:{x:(e.right-e.left+1)/_,y:(e.bottom-e.top+1)/d},offset:{x:-e.left+o+(s||r?Math.floor((this._config.scaledCellWidth-this._config.scaledCharWidth)/2):0),y:-e.top+o+(s||r?1===this._config.lineHeight?0:Math.round((this._config.scaledCellHeight-this._config.scaledCharHeight)/2):0)}}}_clipImageData(t,e){const i=e.right-e.left+1,s=e.bottom-e.top+1,r=new Uint8ClampedArray(i*s*4);for(let s=e.top;s<=e.bottom;s++)for(let o=e.left;o<=e.right;o++){const n=s*this._tmpCanvas.width*4+4*o,a=(s-e.top)*i*4+4*(o-e.left);r[a]=t.data[n],r[a+1]=t.data[n+1],r[a+2]=t.data[n+2],r[a+3]=t.data[n+3]}return new ImageData(r,i,s)}}},592:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.BaseRenderLayer=void 0;const s=i(713),r=i(302),o=i(381);e.BaseRenderLayer=class{constructor(t,e,i,s,r,o){this._container=t,this._alpha=s,this._colors=r,this._coreBrowserService=o,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._canvas=document.createElement(\"canvas\"),this._canvas.classList.add(`xterm-${e}-layer`),this._canvas.style.zIndex=i.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}dispose(){this._canvas.remove(),this._charAtlas&&this._charAtlas.dispose()}_initCanvas(){this._ctx=(0,o.throwIfFalsy)(this._canvas.getContext(\"2d\",{alpha:this._alpha})),this._alpha||this._clearAll()}onOptionsChanged(t){}onBlur(t){}onFocus(t){}onCursorMove(t){}onGridChanged(t,e,i){}onSelectionChanged(t,e,i,s=!1){}setColors(t,e){this._refreshCharAtlas(t,e)}_setTransparency(t,e){if(e===this._alpha)return;const i=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,i),this._refreshCharAtlas(t,this._colors),this.onGridChanged(t,0,t.rows-1)}_refreshCharAtlas(t,e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=(0,s.acquireCharAtlas)(t,e,this._scaledCellWidth,this._scaledCellHeight,this._scaledCharWidth,this._scaledCharHeight,this._coreBrowserService.dpr),this._charAtlas.warmUp())}resize(t,e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=`${e.canvasWidth}px`,this._canvas.style.height=`${e.canvasHeight}px`,this._alpha||this._clearAll(),this._refreshCharAtlas(t,this._colors)}_fillCells(t,e,i,s){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,i*this._scaledCellWidth,s*this._scaledCellHeight)}_fillBottomLineAtCells(t,e,i=1){this._ctx.fillRect(t*this._scaledCellWidth,(e+1)*this._scaledCellHeight-this._coreBrowserService.dpr-1,i*this._scaledCellWidth,this._coreBrowserService.dpr)}_fillLeftLineAtCell(t,e,i){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,this._coreBrowserService.dpr*i,this._scaledCellHeight)}_strokeRectAtCell(t,e,i,s){this._ctx.lineWidth=this._coreBrowserService.dpr,this._ctx.strokeRect(t*this._scaledCellWidth+this._coreBrowserService.dpr/2,e*this._scaledCellHeight+this._coreBrowserService.dpr/2,i*this._scaledCellWidth-this._coreBrowserService.dpr,s*this._scaledCellHeight-this._coreBrowserService.dpr)}_clearAll(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))}_clearCells(t,e,i,s){this._alpha?this._ctx.clearRect(t*this._scaledCellWidth,e*this._scaledCellHeight,i*this._scaledCellWidth,s*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,i*this._scaledCellWidth,s*this._scaledCellHeight))}_fillCharTrueColor(t,e,i,s){this._ctx.font=this._getFont(t,!1,!1),this._ctx.textBaseline=r.TEXT_BASELINE,this._clipCell(i,s,e.getWidth()),this._ctx.fillText(e.getChars(),i*this._scaledCellWidth+this._scaledCharLeft,s*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight)}_clipCell(t,e,i){this._ctx.beginPath(),this._ctx.rect(t*this._scaledCellWidth,e*this._scaledCellHeight,i*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()}_getFont(t,e,i){return`${i?\"italic\":\"\"} ${e?t.options.fontWeightBold:t.options.fontWeight} ${t.options.fontSize*this._coreBrowserService.dpr}px ${t.options.fontFamily}`}}},461:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.CursorRenderLayer=void 0;const s=i(592),r=i(782);class o extends s.BaseRenderLayer{constructor(t,e,i,s,o,n,a){super(e,\"cursor\",i,!0,s,n),this._onRequestRefreshRowsEvent=o,this._coreService=a,this._cell=new r.CellData,this._state={x:0,y:0,isFocused:!1,style:\"\",width:0},this._cursorRenderers={bar:this._renderBarCursor.bind(this),block:this._renderBlockCursor.bind(this),underline:this._renderUnderlineCursor.bind(this)},this.onOptionsChanged(t)}dispose(){var t;null===(t=this._cursorBlinkStateManager)||void 0===t||t.dispose(),this._cursorBlinkStateManager=void 0,super.dispose()}resize(t,e){super.resize(t,e),this._state={x:0,y:0,isFocused:!1,style:\"\",width:0}}reset(t){var e;this._clearCursor(),null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation(t),this.onOptionsChanged(t)}onBlur(t){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.pause(),this._onRequestRefreshRowsEvent.fire({start:t.buffer.active.cursorY,end:t.buffer.active.cursorY})}onFocus(t){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.resume(t),this._onRequestRefreshRowsEvent.fire({start:t.buffer.active.cursorY,end:t.buffer.active.cursorY})}onOptionsChanged(t){var e;t.options.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new n((()=>{this._render(t,!0)}),this._coreBrowserService)):(null===(e=this._cursorBlinkStateManager)||void 0===e||e.dispose(),this._cursorBlinkStateManager=void 0),this._onRequestRefreshRowsEvent.fire({start:t.buffer.active.cursorY,end:t.buffer.active.cursorY})}onCursorMove(t){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation(t)}onGridChanged(t,e,i){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(t,!1):this._cursorBlinkStateManager.restartBlinkAnimation(t)}_render(t,e){if(!this._coreService.isCursorInitialized||this._coreService.isCursorHidden)return void this._clearCursor();const i=t.buffer.active.baseY+t.buffer.active.cursorY,s=i-t.buffer.active.viewportY,r=Math.min(t.buffer.active.cursorX,t.cols-1);if(s<0||s>=t.rows)this._clearCursor();else if(t._core.buffer.lines.get(i).loadCell(r,this._cell),void 0!==this._cell.content){if(!this._coreBrowserService.isFocused){this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css;const e=t.options.cursorStyle;return e&&\"block\"!==e?this._cursorRenderers[e](t,r,s,this._cell):this._renderBlurCursor(t,r,s,this._cell),this._ctx.restore(),this._state.x=r,this._state.y=s,this._state.isFocused=!1,this._state.style=e,void(this._state.width=this._cell.getWidth())}if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===r&&this._state.y===s&&this._state.isFocused===this._coreBrowserService.isFocused&&this._state.style===t.options.cursorStyle&&this._state.width===this._cell.getWidth())return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[t.options.cursorStyle||\"block\"](t,r,s,this._cell),this._ctx.restore(),this._state.x=r,this._state.y=s,this._state.isFocused=!1,this._state.style=t.options.cursorStyle,this._state.width=this._cell.getWidth()}else this._clearCursor()}}_clearCursor(){this._state&&(this._coreBrowserService.dpr<1?this._clearAll():this._clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:0,y:0,isFocused:!1,style:\"\",width:0})}_renderBarCursor(t,e,i,s){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillLeftLineAtCell(e,i,t.options.cursorWidth),this._ctx.restore()}_renderBlockCursor(t,e,i,s){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillCells(e,i,s.getWidth(),1),this._ctx.fillStyle=this._colors.cursorAccent.css,this._fillCharTrueColor(t,s,e,i),this._ctx.restore()}_renderUnderlineCursor(t,e,i,s){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillBottomLineAtCells(e,i),this._ctx.restore()}_renderBlurCursor(t,e,i,s){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this._strokeRectAtCell(e,i,s.getWidth(),1),this._ctx.restore()}}e.CursorRenderLayer=o;class n{constructor(t,e){this._renderCallback=t,this._coreBrowserService=e,this.isCursorVisible=!0,this._coreBrowserService.isFocused&&this._restartInterval()}get isPaused(){return!(this._blinkStartTimeout||this._blinkInterval)}dispose(){this._blinkInterval&&(this._coreBrowserService.window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)}restartBlinkAnimation(t){this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>{this._renderCallback(),this._animationFrame=void 0}))))}_restartInterval(t=600){this._blinkInterval&&(this._coreBrowserService.window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout=this._coreBrowserService.window.setTimeout((()=>{if(this._animationTimeRestarted){const t=600-(Date.now()-this._animationTimeRestarted);if(this._animationTimeRestarted=void 0,t>0)return void this._restartInterval(t)}this.isCursorVisible=!1,this._animationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>{this._renderCallback(),this._animationFrame=void 0})),this._blinkInterval=this._coreBrowserService.window.setInterval((()=>{if(this._animationTimeRestarted){const t=600-(Date.now()-this._animationTimeRestarted);return this._animationTimeRestarted=void 0,void this._restartInterval(t)}this.isCursorVisible=!this.isCursorVisible,this._animationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>{this._renderCallback(),this._animationFrame=void 0}))}),600)}),t)}pause(){this.isCursorVisible=!0,this._blinkInterval&&(this._coreBrowserService.window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)}resume(t){this.pause(),this._animationTimeRestarted=void 0,this._restartInterval(),this.restartBlinkAnimation(t)}}},733:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.LinkRenderLayer=void 0;const s=i(592),r=i(302),o=i(433);class n extends s.BaseRenderLayer{constructor(t,e,i,s,r){super(t,\"link\",e,!0,i,r),s.linkifier2.onShowLinkUnderline((t=>this._onShowLinkUnderline(t))),s.linkifier2.onHideLinkUnderline((t=>this._onHideLinkUnderline(t)))}resize(t,e){super.resize(t,e),this._state=void 0}reset(t){this._clearCurrentLink()}_clearCurrentLink(){if(this._state){this._clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);const t=this._state.y2-this._state.y1-1;t>0&&this._clearCells(0,this._state.y1+1,this._state.cols,t),this._clearCells(0,this._state.y2,this._state.x2,1),this._state=void 0}}_onShowLinkUnderline(t){if(t.fg===r.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:void 0!==t.fg&&(0,o.is256Color)(t.fg)?this._ctx.fillStyle=this._colors.ansi[t.fg].css:this._ctx.fillStyle=this._colors.foreground.css,t.y1===t.y2)this._fillBottomLineAtCells(t.x1,t.y1,t.x2-t.x1);else{this._fillBottomLineAtCells(t.x1,t.y1,t.cols-t.x1);for(let e=t.y1+1;e<t.y2;e++)this._fillBottomLineAtCells(0,e,t.cols);this._fillBottomLineAtCells(0,t.y2,t.x2)}this._state=t}_onHideLinkUnderline(t){this._clearCurrentLink()}}e.LinkRenderLayer=n},820:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.addDisposableDomListener=void 0,e.addDisposableDomListener=function(t,e,i,s){t.addEventListener(e,i,s);let r=!1;return{dispose:()=>{r||(r=!0,t.removeEventListener(e,i,s))}}}},302:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.TEXT_BASELINE=e.DIM_OPACITY=e.INVERTED_DEFAULT_COLOR=void 0;const s=i(399);e.INVERTED_DEFAULT_COLOR=257,e.DIM_OPACITY=.5,e.TEXT_BASELINE=s.isFirefox||s.isLegacyEdge?\"bottom\":\"ideographic\"},14:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.tryDrawCustomChar=e.powerlineDefinitions=e.boxDrawingDefinitions=e.blockElementDefinitions=void 0;const s=i(634);e.blockElementDefinitions={\"▀\":[{x:0,y:0,w:8,h:4}],\"▁\":[{x:0,y:7,w:8,h:1}],\"▂\":[{x:0,y:6,w:8,h:2}],\"▃\":[{x:0,y:5,w:8,h:3}],\"▄\":[{x:0,y:4,w:8,h:4}],\"▅\":[{x:0,y:3,w:8,h:5}],\"▆\":[{x:0,y:2,w:8,h:6}],\"▇\":[{x:0,y:1,w:8,h:7}],\"█\":[{x:0,y:0,w:8,h:8}],\"▉\":[{x:0,y:0,w:7,h:8}],\"▊\":[{x:0,y:0,w:6,h:8}],\"▋\":[{x:0,y:0,w:5,h:8}],\"▌\":[{x:0,y:0,w:4,h:8}],\"▍\":[{x:0,y:0,w:3,h:8}],\"▎\":[{x:0,y:0,w:2,h:8}],\"▏\":[{x:0,y:0,w:1,h:8}],\"▐\":[{x:4,y:0,w:4,h:8}],\"▔\":[{x:0,y:0,w:9,h:1}],\"▕\":[{x:7,y:0,w:1,h:8}],\"▖\":[{x:0,y:4,w:4,h:4}],\"▗\":[{x:4,y:4,w:4,h:4}],\"▘\":[{x:0,y:0,w:4,h:4}],\"▙\":[{x:0,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],\"▚\":[{x:0,y:0,w:4,h:4},{x:4,y:4,w:4,h:4}],\"▛\":[{x:0,y:0,w:4,h:8},{x:4,y:0,w:4,h:4}],\"▜\":[{x:0,y:0,w:8,h:4},{x:4,y:0,w:4,h:8}],\"▝\":[{x:4,y:0,w:4,h:4}],\"▞\":[{x:4,y:0,w:4,h:4},{x:0,y:4,w:4,h:4}],\"▟\":[{x:4,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],\"🭰\":[{x:1,y:0,w:1,h:8}],\"🭱\":[{x:2,y:0,w:1,h:8}],\"🭲\":[{x:3,y:0,w:1,h:8}],\"🭳\":[{x:4,y:0,w:1,h:8}],\"🭴\":[{x:5,y:0,w:1,h:8}],\"🭵\":[{x:6,y:0,w:1,h:8}],\"🭶\":[{x:0,y:1,w:8,h:1}],\"🭷\":[{x:0,y:2,w:8,h:1}],\"🭸\":[{x:0,y:3,w:8,h:1}],\"🭹\":[{x:0,y:4,w:8,h:1}],\"🭺\":[{x:0,y:5,w:8,h:1}],\"🭻\":[{x:0,y:6,w:8,h:1}],\"🭼\":[{x:0,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],\"🭽\":[{x:0,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],\"🭾\":[{x:7,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],\"🭿\":[{x:7,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],\"🮀\":[{x:0,y:0,w:8,h:1},{x:0,y:7,w:8,h:1}],\"🮁\":[{x:0,y:0,w:8,h:1},{x:0,y:2,w:8,h:1},{x:0,y:4,w:8,h:1},{x:0,y:7,w:8,h:1}],\"🮂\":[{x:0,y:0,w:8,h:2}],\"🮃\":[{x:0,y:0,w:8,h:3}],\"🮄\":[{x:0,y:0,w:8,h:5}],\"🮅\":[{x:0,y:0,w:8,h:6}],\"🮆\":[{x:0,y:0,w:8,h:7}],\"🮇\":[{x:6,y:0,w:2,h:8}],\"🮈\":[{x:5,y:0,w:3,h:8}],\"🮉\":[{x:3,y:0,w:5,h:8}],\"🮊\":[{x:2,y:0,w:6,h:8}],\"🮋\":[{x:1,y:0,w:7,h:8}],\"🮕\":[{x:0,y:0,w:2,h:2},{x:4,y:0,w:2,h:2},{x:2,y:2,w:2,h:2},{x:6,y:2,w:2,h:2},{x:0,y:4,w:2,h:2},{x:4,y:4,w:2,h:2},{x:2,y:6,w:2,h:2},{x:6,y:6,w:2,h:2}],\"🮖\":[{x:2,y:0,w:2,h:2},{x:6,y:0,w:2,h:2},{x:0,y:2,w:2,h:2},{x:4,y:2,w:2,h:2},{x:2,y:4,w:2,h:2},{x:6,y:4,w:2,h:2},{x:0,y:6,w:2,h:2},{x:4,y:6,w:2,h:2}],\"🮗\":[{x:0,y:2,w:8,h:2},{x:0,y:6,w:8,h:2}]};const r={\"░\":[[1,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],\"▒\":[[1,0],[0,0],[0,1],[0,0]],\"▓\":[[0,1],[1,1],[1,0],[1,1]]};e.boxDrawingDefinitions={\"─\":{1:\"M0,.5 L1,.5\"},\"━\":{3:\"M0,.5 L1,.5\"},\"│\":{1:\"M.5,0 L.5,1\"},\"┃\":{3:\"M.5,0 L.5,1\"},\"┌\":{1:\"M0.5,1 L.5,.5 L1,.5\"},\"┏\":{3:\"M0.5,1 L.5,.5 L1,.5\"},\"┐\":{1:\"M0,.5 L.5,.5 L.5,1\"},\"┓\":{3:\"M0,.5 L.5,.5 L.5,1\"},\"└\":{1:\"M.5,0 L.5,.5 L1,.5\"},\"┗\":{3:\"M.5,0 L.5,.5 L1,.5\"},\"┘\":{1:\"M.5,0 L.5,.5 L0,.5\"},\"┛\":{3:\"M.5,0 L.5,.5 L0,.5\"},\"├\":{1:\"M.5,0 L.5,1 M.5,.5 L1,.5\"},\"┣\":{3:\"M.5,0 L.5,1 M.5,.5 L1,.5\"},\"┤\":{1:\"M.5,0 L.5,1 M.5,.5 L0,.5\"},\"┫\":{3:\"M.5,0 L.5,1 M.5,.5 L0,.5\"},\"┬\":{1:\"M0,.5 L1,.5 M.5,.5 L.5,1\"},\"┳\":{3:\"M0,.5 L1,.5 M.5,.5 L.5,1\"},\"┴\":{1:\"M0,.5 L1,.5 M.5,.5 L.5,0\"},\"┻\":{3:\"M0,.5 L1,.5 M.5,.5 L.5,0\"},\"┼\":{1:\"M0,.5 L1,.5 M.5,0 L.5,1\"},\"╋\":{3:\"M0,.5 L1,.5 M.5,0 L.5,1\"},\"╴\":{1:\"M.5,.5 L0,.5\"},\"╸\":{3:\"M.5,.5 L0,.5\"},\"╵\":{1:\"M.5,.5 L.5,0\"},\"╹\":{3:\"M.5,.5 L.5,0\"},\"╶\":{1:\"M.5,.5 L1,.5\"},\"╺\":{3:\"M.5,.5 L1,.5\"},\"╷\":{1:\"M.5,.5 L.5,1\"},\"╻\":{3:\"M.5,.5 L.5,1\"},\"═\":{1:(t,e)=>`M0,${.5-e} L1,${.5-e} M0,${.5+e} L1,${.5+e}`},\"║\":{1:(t,e)=>`M${.5-t},0 L${.5-t},1 M${.5+t},0 L${.5+t},1`},\"╒\":{1:(t,e)=>`M.5,1 L.5,${.5-e} L1,${.5-e} M.5,${.5+e} L1,${.5+e}`},\"╓\":{1:(t,e)=>`M${.5-t},1 L${.5-t},.5 L1,.5 M${.5+t},.5 L${.5+t},1`},\"╔\":{1:(t,e)=>`M1,${.5-e} L${.5-t},${.5-e} L${.5-t},1 M1,${.5+e} L${.5+t},${.5+e} L${.5+t},1`},\"╕\":{1:(t,e)=>`M0,${.5-e} L.5,${.5-e} L.5,1 M0,${.5+e} L.5,${.5+e}`},\"╖\":{1:(t,e)=>`M${.5+t},1 L${.5+t},.5 L0,.5 M${.5-t},.5 L${.5-t},1`},\"╗\":{1:(t,e)=>`M0,${.5+e} L${.5-t},${.5+e} L${.5-t},1 M0,${.5-e} L${.5+t},${.5-e} L${.5+t},1`},\"╘\":{1:(t,e)=>`M.5,0 L.5,${.5+e} L1,${.5+e} M.5,${.5-e} L1,${.5-e}`},\"╙\":{1:(t,e)=>`M1,.5 L${.5-t},.5 L${.5-t},0 M${.5+t},.5 L${.5+t},0`},\"╚\":{1:(t,e)=>`M1,${.5-e} L${.5+t},${.5-e} L${.5+t},0 M1,${.5+e} L${.5-t},${.5+e} L${.5-t},0`},\"╛\":{1:(t,e)=>`M0,${.5+e} L.5,${.5+e} L.5,0 M0,${.5-e} L.5,${.5-e}`},\"╜\":{1:(t,e)=>`M0,.5 L${.5+t},.5 L${.5+t},0 M${.5-t},.5 L${.5-t},0`},\"╝\":{1:(t,e)=>`M0,${.5-e} L${.5-t},${.5-e} L${.5-t},0 M0,${.5+e} L${.5+t},${.5+e} L${.5+t},0`},\"╞\":{1:(t,e)=>`M.5,0 L.5,1 M.5,${.5-e} L1,${.5-e} M.5,${.5+e} L1,${.5+e}`},\"╟\":{1:(t,e)=>`M${.5-t},0 L${.5-t},1 M${.5+t},0 L${.5+t},1 M${.5+t},.5 L1,.5`},\"╠\":{1:(t,e)=>`M${.5-t},0 L${.5-t},1 M1,${.5+e} L${.5+t},${.5+e} L${.5+t},1 M1,${.5-e} L${.5+t},${.5-e} L${.5+t},0`},\"╡\":{1:(t,e)=>`M.5,0 L.5,1 M0,${.5-e} L.5,${.5-e} M0,${.5+e} L.5,${.5+e}`},\"╢\":{1:(t,e)=>`M0,.5 L${.5-t},.5 M${.5-t},0 L${.5-t},1 M${.5+t},0 L${.5+t},1`},\"╣\":{1:(t,e)=>`M${.5+t},0 L${.5+t},1 M0,${.5+e} L${.5-t},${.5+e} L${.5-t},1 M0,${.5-e} L${.5-t},${.5-e} L${.5-t},0`},\"╤\":{1:(t,e)=>`M0,${.5-e} L1,${.5-e} M0,${.5+e} L1,${.5+e} M.5,${.5+e} L.5,1`},\"╥\":{1:(t,e)=>`M0,.5 L1,.5 M${.5-t},.5 L${.5-t},1 M${.5+t},.5 L${.5+t},1`},\"╦\":{1:(t,e)=>`M0,${.5-e} L1,${.5-e} M0,${.5+e} L${.5-t},${.5+e} L${.5-t},1 M1,${.5+e} L${.5+t},${.5+e} L${.5+t},1`},\"╧\":{1:(t,e)=>`M.5,0 L.5,${.5-e} M0,${.5-e} L1,${.5-e} M0,${.5+e} L1,${.5+e}`},\"╨\":{1:(t,e)=>`M0,.5 L1,.5 M${.5-t},.5 L${.5-t},0 M${.5+t},.5 L${.5+t},0`},\"╩\":{1:(t,e)=>`M0,${.5+e} L1,${.5+e} M0,${.5-e} L${.5-t},${.5-e} L${.5-t},0 M1,${.5-e} L${.5+t},${.5-e} L${.5+t},0`},\"╪\":{1:(t,e)=>`M.5,0 L.5,1 M0,${.5-e} L1,${.5-e} M0,${.5+e} L1,${.5+e}`},\"╫\":{1:(t,e)=>`M0,.5 L1,.5 M${.5-t},0 L${.5-t},1 M${.5+t},0 L${.5+t},1`},\"╬\":{1:(t,e)=>`M0,${.5+e} L${.5-t},${.5+e} L${.5-t},1 M1,${.5+e} L${.5+t},${.5+e} L${.5+t},1 M0,${.5-e} L${.5-t},${.5-e} L${.5-t},0 M1,${.5-e} L${.5+t},${.5-e} L${.5+t},0`},\"╱\":{1:\"M1,0 L0,1\"},\"╲\":{1:\"M0,0 L1,1\"},\"╳\":{1:\"M1,0 L0,1 M0,0 L1,1\"},\"╼\":{1:\"M.5,.5 L0,.5\",3:\"M.5,.5 L1,.5\"},\"╽\":{1:\"M.5,.5 L.5,0\",3:\"M.5,.5 L.5,1\"},\"╾\":{1:\"M.5,.5 L1,.5\",3:\"M.5,.5 L0,.5\"},\"╿\":{1:\"M.5,.5 L.5,1\",3:\"M.5,.5 L.5,0\"},\"┍\":{1:\"M.5,.5 L.5,1\",3:\"M.5,.5 L1,.5\"},\"┎\":{1:\"M.5,.5 L1,.5\",3:\"M.5,.5 L.5,1\"},\"┑\":{1:\"M.5,.5 L.5,1\",3:\"M.5,.5 L0,.5\"},\"┒\":{1:\"M.5,.5 L0,.5\",3:\"M.5,.5 L.5,1\"},\"┕\":{1:\"M.5,.5 L.5,0\",3:\"M.5,.5 L1,.5\"},\"┖\":{1:\"M.5,.5 L1,.5\",3:\"M.5,.5 L.5,0\"},\"┙\":{1:\"M.5,.5 L.5,0\",3:\"M.5,.5 L0,.5\"},\"┚\":{1:\"M.5,.5 L0,.5\",3:\"M.5,.5 L.5,0\"},\"┝\":{1:\"M.5,0 L.5,1\",3:\"M.5,.5 L1,.5\"},\"┞\":{1:\"M0.5,1 L.5,.5 L1,.5\",3:\"M.5,.5 L.5,0\"},\"┟\":{1:\"M.5,0 L.5,.5 L1,.5\",3:\"M.5,.5 L.5,1\"},\"┠\":{1:\"M.5,.5 L1,.5\",3:\"M.5,0 L.5,1\"},\"┡\":{1:\"M.5,.5 L.5,1\",3:\"M.5,0 L.5,.5 L1,.5\"},\"┢\":{1:\"M.5,.5 L.5,0\",3:\"M0.5,1 L.5,.5 L1,.5\"},\"┥\":{1:\"M.5,0 L.5,1\",3:\"M.5,.5 L0,.5\"},\"┦\":{1:\"M0,.5 L.5,.5 L.5,1\",3:\"M.5,.5 L.5,0\"},\"┧\":{1:\"M.5,0 L.5,.5 L0,.5\",3:\"M.5,.5 L.5,1\"},\"┨\":{1:\"M.5,.5 L0,.5\",3:\"M.5,0 L.5,1\"},\"┩\":{1:\"M.5,.5 L.5,1\",3:\"M.5,0 L.5,.5 L0,.5\"},\"┪\":{1:\"M.5,.5 L.5,0\",3:\"M0,.5 L.5,.5 L.5,1\"},\"┭\":{1:\"M0.5,1 L.5,.5 L1,.5\",3:\"M.5,.5 L0,.5\"},\"┮\":{1:\"M0,.5 L.5,.5 L.5,1\",3:\"M.5,.5 L1,.5\"},\"┯\":{1:\"M.5,.5 L.5,1\",3:\"M0,.5 L1,.5\"},\"┰\":{1:\"M0,.5 L1,.5\",3:\"M.5,.5 L.5,1\"},\"┱\":{1:\"M.5,.5 L1,.5\",3:\"M0,.5 L.5,.5 L.5,1\"},\"┲\":{1:\"M.5,.5 L0,.5\",3:\"M0.5,1 L.5,.5 L1,.5\"},\"┵\":{1:\"M.5,0 L.5,.5 L1,.5\",3:\"M.5,.5 L0,.5\"},\"┶\":{1:\"M.5,0 L.5,.5 L0,.5\",3:\"M.5,.5 L1,.5\"},\"┷\":{1:\"M.5,.5 L.5,0\",3:\"M0,.5 L1,.5\"},\"┸\":{1:\"M0,.5 L1,.5\",3:\"M.5,.5 L.5,0\"},\"┹\":{1:\"M.5,.5 L1,.5\",3:\"M.5,0 L.5,.5 L0,.5\"},\"┺\":{1:\"M.5,.5 L0,.5\",3:\"M.5,0 L.5,.5 L1,.5\"},\"┽\":{1:\"M.5,0 L.5,1 M.5,.5 L1,.5\",3:\"M.5,.5 L0,.5\"},\"┾\":{1:\"M.5,0 L.5,1 M.5,.5 L0,.5\",3:\"M.5,.5 L1,.5\"},\"┿\":{1:\"M.5,0 L.5,1\",3:\"M0,.5 L1,.5\"},\"╀\":{1:\"M0,.5 L1,.5 M.5,.5 L.5,1\",3:\"M.5,.5 L.5,0\"},\"╁\":{1:\"M.5,.5 L.5,0 M0,.5 L1,.5\",3:\"M.5,.5 L.5,1\"},\"╂\":{1:\"M0,.5 L1,.5\",3:\"M.5,0 L.5,1\"},\"╃\":{1:\"M0.5,1 L.5,.5 L1,.5\",3:\"M.5,0 L.5,.5 L0,.5\"},\"╄\":{1:\"M0,.5 L.5,.5 L.5,1\",3:\"M.5,0 L.5,.5 L1,.5\"},\"╅\":{1:\"M.5,0 L.5,.5 L1,.5\",3:\"M0,.5 L.5,.5 L.5,1\"},\"╆\":{1:\"M.5,0 L.5,.5 L0,.5\",3:\"M0.5,1 L.5,.5 L1,.5\"},\"╇\":{1:\"M.5,.5 L.5,1\",3:\"M.5,.5 L.5,0 M0,.5 L1,.5\"},\"╈\":{1:\"M.5,.5 L.5,0\",3:\"M0,.5 L1,.5 M.5,.5 L.5,1\"},\"╉\":{1:\"M.5,.5 L1,.5\",3:\"M.5,0 L.5,1 M.5,.5 L0,.5\"},\"╊\":{1:\"M.5,.5 L0,.5\",3:\"M.5,0 L.5,1 M.5,.5 L1,.5\"},\"╌\":{1:\"M.1,.5 L.4,.5 M.6,.5 L.9,.5\"},\"╍\":{3:\"M.1,.5 L.4,.5 M.6,.5 L.9,.5\"},\"┄\":{1:\"M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5\"},\"┅\":{3:\"M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5\"},\"┈\":{1:\"M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5\"},\"┉\":{3:\"M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5\"},\"╎\":{1:\"M.5,.1 L.5,.4 M.5,.6 L.5,.9\"},\"╏\":{3:\"M.5,.1 L.5,.4 M.5,.6 L.5,.9\"},\"┆\":{1:\"M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333\"},\"┇\":{3:\"M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333\"},\"┊\":{1:\"M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95\"},\"┋\":{3:\"M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95\"},\"╭\":{1:(t,e)=>`M.5,1 L.5,${.5+e/.15*.5} C.5,${.5+e/.15*.5},.5,.5,1,.5`},\"╮\":{1:(t,e)=>`M.5,1 L.5,${.5+e/.15*.5} C.5,${.5+e/.15*.5},.5,.5,0,.5`},\"╯\":{1:(t,e)=>`M.5,0 L.5,${.5-e/.15*.5} C.5,${.5-e/.15*.5},.5,.5,0,.5`},\"╰\":{1:(t,e)=>`M.5,0 L.5,${.5-e/.15*.5} C.5,${.5-e/.15*.5},.5,.5,1,.5`}},e.powerlineDefinitions={\"\":{d:\"M0,0 L1,.5 L0,1\",type:0,rightPadding:2},\"\":{d:\"M-1,-.5 L1,.5 L-1,1.5\",type:1,leftPadding:1,rightPadding:1},\"\":{d:\"M1,0 L0,.5 L1,1\",type:0,leftPadding:2},\"\":{d:\"M2,-.5 L0,.5 L2,1.5\",type:1,leftPadding:1,rightPadding:1},\"\":{d:\"M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0\",type:0,rightPadding:1},\"\":{d:\"M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0\",type:1,rightPadding:1},\"\":{d:\"M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0\",type:0,leftPadding:1},\"\":{d:\"M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0\",type:1,leftPadding:1}},e.tryDrawCustomChar=function(t,i,n,h,c,_,d,u){const g=e.blockElementDefinitions[i];if(g)return function(t,e,i,s,r,o){for(let n=0;n<e.length;n++){const a=e[n],l=r/8,h=o/8;t.fillRect(i+a.x*l,s+a.y*h,a.w*l,a.h*h)}}(t,g,n,h,c,_),!0;const f=r[i];if(f)return function(t,e,i,r,n,a){let l=o.get(e);l||(l=new Map,o.set(e,l));const h=t.fillStyle;if(\"string\"!=typeof h)throw new Error(`Unexpected fillStyle type \"${h}\"`);let c=l.get(h);if(!c){const i=e[0].length,r=e.length,o=document.createElement(\"canvas\");o.width=i,o.height=r;const n=(0,s.throwIfFalsy)(o.getContext(\"2d\")),a=new ImageData(i,r);let _,d,u,g;if(h.startsWith(\"#\"))_=parseInt(h.slice(1,3),16),d=parseInt(h.slice(3,5),16),u=parseInt(h.slice(5,7),16),g=h.length>7&&parseInt(h.slice(7,9),16)||1;else{if(!h.startsWith(\"rgba\"))throw new Error(`Unexpected fillStyle color format \"${h}\" when drawing pattern glyph`);[_,d,u,g]=h.substring(5,h.length-1).split(\",\").map((t=>parseFloat(t)))}for(let t=0;t<r;t++)for(let s=0;s<i;s++)a.data[4*(t*i+s)]=_,a.data[4*(t*i+s)+1]=d,a.data[4*(t*i+s)+2]=u,a.data[4*(t*i+s)+3]=e[t][s]*(255*g);n.putImageData(a,0,0),c=(0,s.throwIfFalsy)(t.createPattern(o,null)),l.set(h,c)}t.fillStyle=c,t.fillRect(i,r,n,a)}(t,f,n,h,c,_),!0;const C=e.boxDrawingDefinitions[i];if(C)return function(t,e,i,s,r,o,n){t.strokeStyle=t.fillStyle;for(const[h,c]of Object.entries(e)){let e;t.beginPath(),t.lineWidth=n*Number.parseInt(h),e=\"function\"==typeof c?c(.15,.15/o*r):c;for(const h of e.split(\" \")){const e=h[0],c=a[e];if(!c){console.error(`Could not find drawing instructions for \"${e}\"`);continue}const _=h.substring(1).split(\",\");_[0]&&_[1]&&c(t,l(_,r,o,i,s,!0,n))}t.stroke(),t.closePath()}}(t,C,n,h,c,_,u),!0;const p=e.powerlineDefinitions[i];return!!p&&(function(t,e,i,s,r,o,n,h){var c,_;t.beginPath();const d=n/12;t.lineWidth=h*d;for(const n of e.d.split(\" \")){const h=n[0],u=a[h];if(!u){console.error(`Could not find drawing instructions for \"${h}\"`);continue}const g=n.substring(1).split(\",\");g[0]&&g[1]&&u(t,l(g,r,o,i,s,!1,(null!==(c=e.leftPadding)&&void 0!==c?c:0)*(d/2),(null!==(_=e.rightPadding)&&void 0!==_?_:0)*(d/2)))}1===e.type?(t.strokeStyle=t.fillStyle,t.stroke()):t.fill(),t.closePath()}(t,p,n,h,c,_,d,u),!0)};const o=new Map;function n(t,e,i=0){return Math.max(Math.min(t,e),i)}const a={C:(t,e)=>t.bezierCurveTo(e[0],e[1],e[2],e[3],e[4],e[5]),L:(t,e)=>t.lineTo(e[0],e[1]),M:(t,e)=>t.moveTo(e[0],e[1])};function l(t,e,i,s,r,o,a,l=0,h=0){const c=t.map((t=>parseFloat(t)||parseInt(t)));if(c.length<2)throw new Error(\"Too few arguments for instruction\");for(let t=0;t<c.length;t+=2)c[t]*=e-l*a-h*a,o&&0!==c[t]&&(c[t]=n(Math.round(c[t]+.5)-.5,e,0)),c[t]+=s+l*a;for(let t=1;t<c.length;t+=2)c[t]*=i,o&&0!==c[t]&&(c[t]=n(Math.round(c[t]+.5)-.5,i,0)),c[t]+=r;return c}},476:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.observeDevicePixelDimensions=void 0;const s=i(859);e.observeDevicePixelDimensions=function(t,e,i){let r=new e.ResizeObserver((e=>{const s=e.find((e=>e.target===t));if(!s)return;if(!(\"devicePixelContentBoxSize\"in s))return null==r||r.disconnect(),void(r=void 0);const o=s.devicePixelContentBoxSize[0].inlineSize,n=s.devicePixelContentBoxSize[0].blockSize;o>0&&n>0&&i(o,n)}));try{r.observe(t,{box:[\"device-pixel-content-box\"]})}catch(t){r.disconnect(),r=void 0}return(0,s.toDisposable)((()=>null==r?void 0:r.disconnect()))}},634:(t,e)=>{function i(t){return 57508<=t&&t<=57558}Object.defineProperty(e,\"__esModule\",{value:!0}),e.excludeFromContrastRatioDemands=e.isRestrictedPowerlineGlyph=e.isPowerlineGlyph=e.throwIfFalsy=void 0,e.throwIfFalsy=function(t){if(!t)throw new Error(\"value must not be falsy\");return t},e.isPowerlineGlyph=i,e.isRestrictedPowerlineGlyph=function(t){return 57520<=t&&t<=57527},e.excludeFromContrastRatioDemands=function(t){return i(t)||function(t){return 9472<=t&&t<=9631}(t)}},160:(t,e)=>{var i,s,r;function o(t){const e=t.toString(16);return e.length<2?\"0\"+e:e}function n(t,e){return t<e?(e+.05)/(t+.05):(t+.05)/(e+.05)}Object.defineProperty(e,\"__esModule\",{value:!0}),e.contrastRatio=e.toPaddedHex=e.rgba=e.rgb=e.css=e.color=e.channels=void 0,function(t){t.toCss=function(t,e,i,s){return void 0!==s?`#${o(t)}${o(e)}${o(i)}${o(s)}`:`#${o(t)}${o(e)}${o(i)}`},t.toRgba=function(t,e,i,s=255){return(t<<24|e<<16|i<<8|s)>>>0}}(i=e.channels||(e.channels={})),function(t){function e(t,e){const s=Math.round(255*e),[o,n,a]=r.toChannels(t.rgba);return{css:i.toCss(o,n,a,s),rgba:i.toRgba(o,n,a,s)}}t.blend=function(t,e){const s=(255&e.rgba)/255;if(1===s)return{css:e.css,rgba:e.rgba};const r=e.rgba>>24&255,o=e.rgba>>16&255,n=e.rgba>>8&255,a=t.rgba>>24&255,l=t.rgba>>16&255,h=t.rgba>>8&255,c=a+Math.round((r-a)*s),_=l+Math.round((o-l)*s),d=h+Math.round((n-h)*s);return{css:i.toCss(c,_,d),rgba:i.toRgba(c,_,d)}},t.isOpaque=function(t){return 255==(255&t.rgba)},t.ensureContrastRatio=function(t,e,i){const s=r.ensureContrastRatio(t.rgba,e.rgba,i);if(s)return r.toColor(s>>24&255,s>>16&255,s>>8&255)},t.opaque=function(t){const e=(255|t.rgba)>>>0,[s,o,n]=r.toChannels(e);return{css:i.toCss(s,o,n),rgba:e}},t.opacity=e,t.multiplyOpacity=function(t,i){return e(t,(255&t.rgba)*i/255)},t.toColorRGB=function(t){return[t.rgba>>24&255,t.rgba>>16&255,t.rgba>>8&255]}}(e.color||(e.color={})),(e.css||(e.css={})).toColor=function(t){if(t.match(/#[0-9a-f]{3,8}/i))switch(t.length){case 4:{const e=parseInt(t.slice(1,2).repeat(2),16),i=parseInt(t.slice(2,3).repeat(2),16),s=parseInt(t.slice(3,4).repeat(2),16);return r.toColor(e,i,s)}case 5:{const e=parseInt(t.slice(1,2).repeat(2),16),i=parseInt(t.slice(2,3).repeat(2),16),s=parseInt(t.slice(3,4).repeat(2),16),o=parseInt(t.slice(4,5).repeat(2),16);return r.toColor(e,i,s,o)}case 7:return{css:t,rgba:(parseInt(t.slice(1),16)<<8|255)>>>0};case 9:return{css:t,rgba:parseInt(t.slice(1),16)>>>0}}const e=t.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);if(e){const t=parseInt(e[1]),i=parseInt(e[2]),s=parseInt(e[3]),o=Math.round(255*(void 0===e[5]?1:parseFloat(e[5])));return r.toColor(t,i,s,o)}throw new Error(\"css.toColor: Unsupported css format\")},function(t){function e(t,e,i){const s=t/255,r=e/255,o=i/255;return.2126*(s<=.03928?s/12.92:Math.pow((s+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4))}t.relativeLuminance=function(t){return e(t>>16&255,t>>8&255,255&t)},t.relativeLuminance2=e}(s=e.rgb||(e.rgb={})),function(t){function e(t,e,i){const r=t>>24&255,o=t>>16&255,a=t>>8&255;let l=e>>24&255,h=e>>16&255,c=e>>8&255,_=n(s.relativeLuminance2(l,h,c),s.relativeLuminance2(r,o,a));for(;_<i&&(l>0||h>0||c>0);)l-=Math.max(0,Math.ceil(.1*l)),h-=Math.max(0,Math.ceil(.1*h)),c-=Math.max(0,Math.ceil(.1*c)),_=n(s.relativeLuminance2(l,h,c),s.relativeLuminance2(r,o,a));return(l<<24|h<<16|c<<8|255)>>>0}function r(t,e,i){const r=t>>24&255,o=t>>16&255,a=t>>8&255;let l=e>>24&255,h=e>>16&255,c=e>>8&255,_=n(s.relativeLuminance2(l,h,c),s.relativeLuminance2(r,o,a));for(;_<i&&(l<255||h<255||c<255);)l=Math.min(255,l+Math.ceil(.1*(255-l))),h=Math.min(255,h+Math.ceil(.1*(255-h))),c=Math.min(255,c+Math.ceil(.1*(255-c))),_=n(s.relativeLuminance2(l,h,c),s.relativeLuminance2(r,o,a));return(l<<24|h<<16|c<<8|255)>>>0}t.ensureContrastRatio=function(t,i,o){const a=s.relativeLuminance(t>>8),l=s.relativeLuminance(i>>8);if(n(a,l)<o){if(l<a){const l=e(t,i,o),h=n(a,s.relativeLuminance(l>>8));if(h<o){const e=r(t,i,o);return h>n(a,s.relativeLuminance(e>>8))?l:e}return l}const h=r(t,i,o),c=n(a,s.relativeLuminance(h>>8));if(c<o){const r=e(t,i,o);return c>n(a,s.relativeLuminance(r>>8))?h:r}return h}},t.reduceLuminance=e,t.increaseLuminance=r,t.toChannels=function(t){return[t>>24&255,t>>16&255,t>>8&255,255&t]},t.toColor=function(t,e,s,r){return{css:i.toCss(t,e,s,r),rgba:i.toRgba(t,e,s,r)}}}(r=e.rgba||(e.rgba={})),e.toPaddedHex=o,e.contrastRatio=n},345:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.forwardEvent=e.EventEmitter=void 0,e.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1}get event(){return this._event||(this._event=t=>(this._listeners.push(t),{dispose:()=>{if(!this._disposed)for(let e=0;e<this._listeners.length;e++)if(this._listeners[e]===t)return void this._listeners.splice(e,1)}})),this._event}fire(t,e){const i=[];for(let t=0;t<this._listeners.length;t++)i.push(this._listeners[t]);for(let s=0;s<i.length;s++)i[s].call(void 0,t,e)}dispose(){this._listeners&&(this._listeners.length=0),this._disposed=!0}},e.forwardEvent=function(t,e){return t((t=>e.fire(t)))}},859:(t,e)=>{function i(t){for(const e of t)e.dispose();t.length=0}Object.defineProperty(e,\"__esModule\",{value:!0}),e.getDisposeArrayDisposable=e.disposeArray=e.toDisposable=e.Disposable=void 0,e.Disposable=class{constructor(){this._disposables=[],this._isDisposed=!1}dispose(){this._isDisposed=!0;for(const t of this._disposables)t.dispose();this._disposables.length=0}register(t){return this._disposables.push(t),t}unregister(t){const e=this._disposables.indexOf(t);-1!==e&&this._disposables.splice(e,1)}},e.toDisposable=function(t){return{dispose:t}},e.disposeArray=i,e.getDisposeArrayDisposable=function(t){return{dispose:()=>i(t)}}},485:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.FourKeyMap=e.TwoKeyMap=void 0;class i{constructor(){this._data={}}set(t,e,i){this._data[t]||(this._data[t]={}),this._data[t][e]=i}get(t,e){return this._data[t]?this._data[t][e]:void 0}clear(){this._data={}}}e.TwoKeyMap=i,e.FourKeyMap=class{constructor(){this._data=new i}set(t,e,s,r,o){this._data.get(t,e)||this._data.set(t,e,new i),this._data.get(t,e).set(s,r,o)}get(t,e,i,s){var r;return null===(r=this._data.get(t,e))||void 0===r?void 0:r.get(i,s)}clear(){this._data.clear()}}},399:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.isLinux=e.isWindows=e.isIphone=e.isIpad=e.isMac=e.isSafari=e.isLegacyEdge=e.isFirefox=void 0;const i=\"undefined\"==typeof navigator,s=i?\"node\":navigator.userAgent,r=i?\"node\":navigator.platform;e.isFirefox=s.includes(\"Firefox\"),e.isLegacyEdge=s.includes(\"Edge\"),e.isSafari=/^((?!chrome|android).)*safari/i.test(s),e.isMac=[\"Macintosh\",\"MacIntel\",\"MacPPC\",\"Mac68K\"].includes(r),e.isIpad=\"iPad\"===r,e.isIphone=\"iPhone\"===r,e.isWindows=[\"Windows\",\"Win16\",\"Win32\",\"WinCE\"].includes(r),e.isLinux=r.indexOf(\"Linux\")>=0},455:(t,e)=>{function i(t,e,i=0,s=t.length){if(i>=t.length)return t;i=(t.length+i)%t.length,s=s>=t.length?t.length:(t.length+s)%t.length;for(let r=i;r<s;++r)t[r]=e;return t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.concat=e.fillFallback=e.fill=void 0,e.fill=function(t,e,s,r){return t.fill?t.fill(e,s,r):i(t,e,s,r)},e.fillFallback=i,e.concat=function(t,e){const i=new t.constructor(t.length+e.length);return i.set(t),i.set(e,t.length),i}},147:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.ExtendedAttrs=e.AttributeData=void 0;class i{constructor(){this.fg=0,this.bg=0,this.extended=new s}static toColorRGB(t){return[t>>>16&255,t>>>8&255,255&t]}static fromColorRGB(t){return(255&t[0])<<16|(255&t[1])<<8|255&t[2]}clone(){const t=new i;return t.fg=this.fg,t.bg=this.bg,t.extended=this.extended.clone(),t}isInverse(){return 67108864&this.fg}isBold(){return 134217728&this.fg}isUnderline(){return this.hasExtendedAttrs()&&0!==this.extended.underlineStyle?1:268435456&this.fg}isBlink(){return 536870912&this.fg}isInvisible(){return 1073741824&this.fg}isItalic(){return 67108864&this.bg}isDim(){return 134217728&this.bg}isStrikethrough(){return 2147483648&this.fg}isProtected(){return 536870912&this.bg}getFgColorMode(){return 50331648&this.fg}getBgColorMode(){return 50331648&this.bg}isFgRGB(){return 50331648==(50331648&this.fg)}isBgRGB(){return 50331648==(50331648&this.bg)}isFgPalette(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)}isBgPalette(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)}isFgDefault(){return 0==(50331648&this.fg)}isBgDefault(){return 0==(50331648&this.bg)}isAttributeDefault(){return 0===this.fg&&0===this.bg}getFgColor(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}}getBgColor(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}}hasExtendedAttrs(){return 268435456&this.bg}updateExtended(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456}getUnderlineColor(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()}getUnderlineColorMode(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()}isUnderlineColorRGB(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()}isUnderlineColorPalette(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()}isUnderlineColorDefault(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()}getUnderlineStyle(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0}}e.AttributeData=i;class s{constructor(t=0,e=0){this._ext=0,this._urlId=0,this._ext=t,this._urlId=e}get ext(){return this._urlId?-469762049&this._ext|this.underlineStyle<<26:this._ext}set ext(t){this._ext=t}get underlineStyle(){return this._urlId?5:(469762048&this._ext)>>26}set underlineStyle(t){this._ext&=-469762049,this._ext|=t<<26&469762048}get underlineColor(){return 67108863&this._ext}set underlineColor(t){this._ext&=-67108864,this._ext|=67108863&t}get urlId(){return this._urlId}set urlId(t){this._urlId=t}clone(){return new s(this._ext,this._urlId)}isEmpty(){return 0===this.underlineStyle&&0===this._urlId}}e.ExtendedAttrs=s},782:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.CellData=void 0;const s=i(133),r=i(855),o=i(147);class n extends o.AttributeData{constructor(){super(...arguments),this.content=0,this.fg=0,this.bg=0,this.extended=new o.ExtendedAttrs,this.combinedData=\"\"}static fromCharData(t){const e=new n;return e.setFromCharData(t),e}isCombined(){return 2097152&this.content}getWidth(){return this.content>>22}getChars(){return 2097152&this.content?this.combinedData:2097151&this.content?(0,s.stringFromCodePoint)(2097151&this.content):\"\"}getCode(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content}setFromCharData(t){this.fg=t[r.CHAR_DATA_ATTR_INDEX],this.bg=0;let e=!1;if(t[r.CHAR_DATA_CHAR_INDEX].length>2)e=!0;else if(2===t[r.CHAR_DATA_CHAR_INDEX].length){const i=t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=i&&i<=56319){const s=t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=s&&s<=57343?this.content=1024*(i-55296)+s-56320+65536|t[r.CHAR_DATA_WIDTH_INDEX]<<22:e=!0}else e=!0}else this.content=t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[r.CHAR_DATA_WIDTH_INDEX]<<22;e&&(this.combinedData=t[r.CHAR_DATA_CHAR_INDEX],this.content=2097152|t[r.CHAR_DATA_WIDTH_INDEX]<<22)}getAsCharData(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]}}e.CellData=n},855:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.WHITESPACE_CELL_CODE=e.WHITESPACE_CELL_WIDTH=e.WHITESPACE_CELL_CHAR=e.NULL_CELL_CODE=e.NULL_CELL_WIDTH=e.NULL_CELL_CHAR=e.CHAR_DATA_CODE_INDEX=e.CHAR_DATA_WIDTH_INDEX=e.CHAR_DATA_CHAR_INDEX=e.CHAR_DATA_ATTR_INDEX=e.DEFAULT_EXT=e.DEFAULT_ATTR=e.DEFAULT_COLOR=void 0,e.DEFAULT_COLOR=256,e.DEFAULT_ATTR=256|e.DEFAULT_COLOR<<9,e.DEFAULT_EXT=0,e.CHAR_DATA_ATTR_INDEX=0,e.CHAR_DATA_CHAR_INDEX=1,e.CHAR_DATA_WIDTH_INDEX=2,e.CHAR_DATA_CODE_INDEX=3,e.NULL_CELL_CHAR=\"\",e.NULL_CELL_WIDTH=1,e.NULL_CELL_CODE=0,e.WHITESPACE_CELL_CHAR=\" \",e.WHITESPACE_CELL_WIDTH=1,e.WHITESPACE_CELL_CODE=32},133:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.Utf8ToUtf32=e.StringToUtf32=e.utf32ToString=e.stringFromCodePoint=void 0,e.stringFromCodePoint=function(t){return t>65535?(t-=65536,String.fromCharCode(55296+(t>>10))+String.fromCharCode(t%1024+56320)):String.fromCharCode(t)},e.utf32ToString=function(t,e=0,i=t.length){let s=\"\";for(let r=e;r<i;++r){let e=t[r];e>65535?(e-=65536,s+=String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):s+=String.fromCharCode(e)}return s},e.StringToUtf32=class{constructor(){this._interim=0}clear(){this._interim=0}decode(t,e){const i=t.length;if(!i)return 0;let s=0,r=0;if(this._interim){const i=t.charCodeAt(r++);56320<=i&&i<=57343?e[s++]=1024*(this._interim-55296)+i-56320+65536:(e[s++]=this._interim,e[s++]=i),this._interim=0}for(let o=r;o<i;++o){const r=t.charCodeAt(o);if(55296<=r&&r<=56319){if(++o>=i)return this._interim=r,s;const n=t.charCodeAt(o);56320<=n&&n<=57343?e[s++]=1024*(r-55296)+n-56320+65536:(e[s++]=r,e[s++]=n)}else 65279!==r&&(e[s++]=r)}return s}},e.Utf8ToUtf32=class{constructor(){this.interim=new Uint8Array(3)}clear(){this.interim.fill(0)}decode(t,e){const i=t.length;if(!i)return 0;let s,r,o,n,a=0,l=0,h=0;if(this.interim[0]){let s=!1,r=this.interim[0];r&=192==(224&r)?31:224==(240&r)?15:7;let o,n=0;for(;(o=63&this.interim[++n])&&n<4;)r<<=6,r|=o;const l=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,c=l-n;for(;h<c;){if(h>=i)return 0;if(o=t[h++],128!=(192&o)){h--,s=!0;break}this.interim[n++]=o,r<<=6,r|=63&o}s||(2===l?r<128?h--:e[a++]=r:3===l?r<2048||r>=55296&&r<=57343||65279===r||(e[a++]=r):r<65536||r>1114111||(e[a++]=r)),this.interim.fill(0)}const c=i-4;let _=h;for(;_<i;){for(;!(!(_<c)||128&(s=t[_])||128&(r=t[_+1])||128&(o=t[_+2])||128&(n=t[_+3]));)e[a++]=s,e[a++]=r,e[a++]=o,e[a++]=n,_+=4;if(s=t[_++],s<128)e[a++]=s;else if(192==(224&s)){if(_>=i)return this.interim[0]=s,a;if(r=t[_++],128!=(192&r)){_--;continue}if(l=(31&s)<<6|63&r,l<128){_--;continue}e[a++]=l}else if(224==(240&s)){if(_>=i)return this.interim[0]=s,a;if(r=t[_++],128!=(192&r)){_--;continue}if(_>=i)return this.interim[0]=s,this.interim[1]=r,a;if(o=t[_++],128!=(192&o)){_--;continue}if(l=(15&s)<<12|(63&r)<<6|63&o,l<2048||l>=55296&&l<=57343||65279===l)continue;e[a++]=l}else if(240==(248&s)){if(_>=i)return this.interim[0]=s,a;if(r=t[_++],128!=(192&r)){_--;continue}if(_>=i)return this.interim[0]=s,this.interim[1]=r,a;if(o=t[_++],128!=(192&o)){_--;continue}if(_>=i)return this.interim[0]=s,this.interim[1]=r,this.interim[2]=o,a;if(n=t[_++],128!=(192&n)){_--;continue}if(l=(7&s)<<18|(63&r)<<12|(63&o)<<6|63&n,l<65536||l>1114111)continue;e[a++]=l}}return a}}}},e={};function i(s){var r=e[s];if(void 0!==r)return r.exports;var o=e[s]={exports:{}};return t[s](o,o.exports,i),o.exports}var s={};return(()=>{var t=s;Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebglAddon=void 0;const e=i(666),r=i(345),o=i(399);t.WebglAddon=class{constructor(t){this._preserveDrawingBuffer=t,this._onChangeTextureAtlas=new r.EventEmitter,this._onContextLoss=new r.EventEmitter}get onChangeTextureAtlas(){return this._onChangeTextureAtlas.event}get onContextLoss(){return this._onContextLoss.event}activate(t){if(!t.element)throw new Error(\"Cannot activate WebglAddon before Terminal.open\");if(o.isSafari)throw new Error(\"Webgl is not currently supported on Safari\");this._terminal=t;const i=t._core._renderService,s=t._core._characterJoinerService,n=t._core._coreBrowserService,a=t._core.coreService,l=t._core._decorationService,h=t._core._colorManager.colors;this._renderer=new e.WebglRenderer(t,h,s,n,a,l,this._preserveDrawingBuffer),(0,r.forwardEvent)(this._renderer.onContextLoss,this._onContextLoss),(0,r.forwardEvent)(this._renderer.onChangeTextureAtlas,this._onChangeTextureAtlas),i.setRenderer(this._renderer)}dispose(){var t;if(!this._terminal)throw new Error(\"Cannot dispose WebglAddon because it is activated\");const e=this._terminal._core._renderService;e.setRenderer(this._terminal._core._createRenderer()),e.onResize(this._terminal.cols,this._terminal.rows),null===(t=this._renderer)||void 0===t||t.dispose(),this._renderer=void 0}get textureAtlas(){var t;return null===(t=this._renderer)||void 0===t?void 0:t.textureAtlas}clearTextureAtlas(){var t;null===(t=this._renderer)||void 0===t||t.clearCharAtlas()}}})(),s})()}));\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","SearchBox","styled","tslib_es6","react","classNamesFunction","properties","KeyCodes","useControllableValue","useMergedRefs","useId","IconButton","Icon","COMPONENT_NAME","iconButtonStyles","root","height","icon","fontSize","iconButtonProps","iconName","defaultClearButtonProps","ariaLabel","getClassNames","y","useComponentRef","componentRef","inputElementRef","hasFocus","useImperativeHandle","focus","_a","current","SearchBoxBase","forwardRef","props","forwardedRef","className","defaultValue","disabled","underlined","styles","labelText","_b","placeholder","theme","_c","clearButtonProps","_d","disableAnimation","_e","showIcon","customOnClear","onClear","customOnBlur","onBlur","customOnEscape","onEscape","customOnSearch","onSearch","customOnKeyDown","onKeyDown","iconProps","role","onChange","onChanged","_f","useState","setHasFocus","prevChangeTimestamp","useRef","_g","G","value","ev","newValue","timeStamp","uncastValue","setValue","String","rootElementRef","mergedRootRef","r","id","M","customOnClearClick","onClick","classNames","hasInput","length","nativeProps","pq","Gg","useCallback","defaultPrevented","stopPropagation","preventDefault","onClearClick","onInputChange","target","createElement","ref","onFocusCapture","onFocus","call","iconContainer","selectionStart","selectionEnd","J","pi","field","onInput","which","m","escape","enter","clearButton","h","displayName","lib","rtl","GlobalClassNames","z","palette","fonts","semanticColors","effects","Cn","placeholderStyles","color","inputPlaceholderText","opacity","inputIconAlt","neutralSecondary","inputIconAltHovered","neutralPrimary","inputBorderDisabled","neutralLighter","inputBackgroundHovered","inputBackgroundDisabled","medium","Fv","inputText","backgroundColor","inputBackground","display","flexDirection","flexWrap","alignItems","padding","borderRadius","roundedCorner2","border","inputBorder","selectors","qJ","borderColor","inputBorderHovered","inputIconHovered","width","pointerEvents","position","$Y","inputFocusBorderAlt","cursor","borderWidth","justifyContent","flexShrink","textAlign","inputIcon","inputIconDisabled","transition","D1","durationValue1","flexBasis","margin","zg","Sv","outline","fontWeight","fontFamily","flex","minWidth","overflow","textOverflow","paddingBottom","disabledText","undefined","scope","module","e","t","exports","Object","defineProperty","FitAddon","constructor","activate","_terminal","dispose","fit","proposeDimensions","isNaN","cols","rows","_core","_renderService","clear","resize","element","parentElement","dimensions","actualCellWidth","actualCellHeight","options","scrollback","viewport","scrollBarWidth","window","getComputedStyle","i","parseInt","getPropertyValue","n","Math","max","o","s","a","floor","forwardEvent","EventEmitter","_listeners","_disposed","event","_event","splice","fire","SearchAddon","_linesCacheTimeoutId","_onDidChangeResults","onDidChangeResults","_onDataDisposable","onWriteParsed","_updateMatches","_onResizeDisposable","onResize","_highlightTimeout","clearTimeout","_cachedSearchTerm","_lastSearchOptions","decorations","setTimeout","findPrevious","assign","incremental","noScroll","_resultIndex","_searchResults","size","resultIndex","resultCount","clearDecorations","_selectedDecoration","_resultDecorations","forEach","clearActiveDecoration","findNext","_highlightAllMatches","_fireResults","_findNextAndSelect","Map","_find","get","row","col","set","term","_createResultDecoration","marker","line","clearSelection","_initLinesCache","startRow","startCol","_findInLine","buffer","active","baseY","hasSelection","getSelectionPosition","start","end","x","l","_selectResult","_findPreviousAndSelect","_linesCache","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","_isWholeWord","includes","getLine","isWrapped","_translateBufferLineToStringWithWrap","c","u","_bufferColsToStringOffset","_","caseSensitive","toLowerCase","f","v","regex","RegExp","exec","slice","lastIndex","lastIndexOf","indexOf","wholeWord","_stringLengthToBufferSize","getCell","getChars","getWidth","getCode","translateToString","join","select","registerMarker","cursorY","registerDecoration","activeMatchBackground","layer","overviewRulerOptions","activeMatchColorOverviewRuler","onRender","_applyStyles","activeMatchBorder","onDispose","viewportY","scrollLines","clientWidth","classList","contains","add","style","matchBackground","matchOverviewRuler","matchBorder","GlyphRenderer","Float32Array","BYTES_PER_ELEMENT","glyph","leftCellPadding","clippedPixels","Disposable","_colors","_gl","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","_program","throwIfFalsy","createProgram","register","toDisposable","deleteProgram","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","createBuffer","deleteBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","Uint8Array","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","deleteTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","beginFrame","_atlas","updateCell","_updateCell","NULL_CELL_CODE","getRasterizedGlyphCombinedChar","getRasterizedGlyph","scaledCellWidth","scaledCharWidth","offset","scaledCharLeft","scaledCharTop","scaledCanvasWidth","scaledCanvasHeight","texturePositionClipSpace","cacheCanvas","sizeClipSpace","fill","canvas","render","useProgram","lineLengths","subarray","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","generateMipmap","uniformMatrix4fv","PROJECTION_MATRIX","uniform2f","drawElementsInstanced","TRIANGLES","setAtlas","setDimensions","RectangleRenderer","rgba","isDefault","x1","y1","g","b","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","setColors","_bgFloat","_colorToFloat32Array","background","_addRectangleFloat","scaledCellHeight","updateBackgrounds","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","_updateRectangle","ansi","foreground","expandFloat32Array","DIM_OPACITY","_addRectangle","RenderModel","COMBINED_CHAR_BIT_MASK","RENDER_MODEL_EXT_OFFSET","Uint32Array","selection","columnSelectMode","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","endCol","JoinedCellData","WebglRenderer","C","fg","bg","hasFg","hasBg","isSelected","p","_characterJoinerService","_coreBrowserService","_decorationService","_model","_workCell","CellData","_workColors","ext","_onChangeTextureAtlas","_onRequestRedraw","_onContextLoss","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","scaledCharHeight","canvasWidth","canvasHeight","_devicePixelRatio","dpr","_updateDimensions","_canvas","document","getContext","antialias","depth","preserveDrawingBuffer","addDisposableDomListener","console","log","_contextRestorationTimeout","warn","removeTerminalFromCache","_initializeWebGLState","_requestRedrawViewport","observeDevicePixelDimensions","_setCanvasDevicePixelDimensions","appendChild","_isAttached","body","onChangeTextureAtlas","onRequestRedraw","onContextLoss","removeChild","textureAtlas","_charAtlas","reset","_rectangleRenderer","_refreshCharAtlas","_clearModel","onDevicePixelRatioChange","_glyphRenderer","onCharSizeChanged","onSelectionChanged","_updateSelectionModel","onOptionsChanged","acquireCharAtlas","warmUp","clearCharAtlas","clearTexture","_updateModel","registerCharacterJoiner","deregisterCharacterJoiner","renderRows","_charSizeService","onGridChanged","ydisp","lines","getJoinedCharacters","loadCell","shift","_loadColorsForCell","NULL_CELL_CHAR","extended","forEachDecorationAtCell","backgroundColorRGB","foregroundColorRGB","_isCellSelected","isFocused","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","selectionForeground","min","ceil","lineHeight","round","letterSpacing","AttributeData","content","combinedData","_width","isCombined","setFromCharData","getAsCharData","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","generateConfig","ownedBy","configEquals","config","atlas","WebglCharAtlas","unicodeService","is256Color","css","cursorAccent","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","contrastCache","customGlyphs","devicePixelRatio","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colors","texturePosition","abs","data","_config","_unicodeService","_didWarmUp","_cacheMap","FourKeyMap","_cacheMapCombined","_currentRow","_fixedRows","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","alpha","_tmpCanvas","_tmpCtx","_doWarmUp","_drawToCache","DEFAULT_COLOR","DEFAULT_EXT","clearRect","_getFromCacheMap","_getColorFromAnsiIndex","_getBackgroundColor","toColorRGB","toColor","blend","multiplyOpacity","_getForegroundColor","_getMinimumContrastColor","opaque","_resolveBackgroundRgba","_resolveForegroundRgba","getColor","ensureContrastRatio","setColor","O","fromCharCode","save","isInvisible","isBold","isInverse","isDim","isItalic","isUnderline","L","isStrikethrough","w","getFgColor","getFgColorMode","getBgColor","getBgColorMode","globalCompositeOperation","fillStyle","fillRect","R","font","textBaseline","TEXT_BASELINE","A","isPowerlineGlyph","charCodeAt","D","isRestrictedPowerlineGlyph","T","excludeFromContrastRatioDemands","S","B","tryDrawCustomChar","F","k","wcwidth","getStringCellWidth","lineWidth","isUnderlineColorDefault","strokeStyle","isUnderlineColorRGB","getUnderlineColor","beginPath","underlineStyle","moveTo","lineTo","Path2D","rect","clip","bezierCurveTo","setLineDash","stroke","restore","measureText","actualBoundingBoxDescent","strokeText","fillText","getImageData","I","P","_findGlyphBoundingBox","W","_clipImageData","putImageData","Uint8ClampedArray","ImageData","BaseRenderLayer","_container","_alpha","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","zIndex","toString","_initCanvas","remove","_ctx","_clearAll","_setTransparency","cloneNode","replaceChild","_fillCells","_fillBottomLineAtCells","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","_clearCells","_fillCharTrueColor","_getFont","_clipCell","_onRequestRefreshRowsEvent","_coreService","_cell","_state","_cursorRenderers","bar","_renderBarCursor","bind","block","_renderBlockCursor","underline","_renderUnderlineCursor","_cursorBlinkStateManager","_clearCursor","restartBlinkAnimation","pause","resume","cursorBlink","_render","isPaused","isCursorInitialized","isCursorHidden","cursorX","cursorStyle","_renderBlurCursor","isCursorVisible","cursorWidth","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","setInterval","linkifier2","onShowLinkUnderline","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","_clearCurrentLink","y2","x2","INVERTED_DEFAULT_COLOR","addEventListener","removeEventListener","isFirefox","isLegacyEdge","powerlineDefinitions","boxDrawingDefinitions","blockElementDefinitions","type","rightPadding","leftPadding","startsWith","substring","split","map","parseFloat","createPattern","entries","Number","closePath","ResizeObserver","find","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","box","contrastRatio","toPaddedHex","rgb","channels","toCss","toRgba","toChannels","isOpaque","match","repeat","pow","relativeLuminance","relativeLuminance2","reduceLuminance","increaseLuminance","getDisposeArrayDisposable","disposeArray","_disposables","_isDisposed","unregister","TwoKeyMap","_data","isLinux","isWindows","isIphone","isIpad","isMac","isSafari","navigator","userAgent","platform","test","concat","fillFallback","ExtendedAttrs","fromColorRGB","clone","hasExtendedAttrs","isBlink","isProtected","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","updateExtended","isEmpty","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","_ext","_urlId","urlId","arguments","fromCharData","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","WHITESPACE_CELL_CODE","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CHAR","NULL_CELL_WIDTH","CHAR_DATA_CODE_INDEX","DEFAULT_ATTR","Utf8ToUtf32","StringToUtf32","utf32ToString","_interim","decode","interim","WebglAddon","_preserveDrawingBuffer","coreService","_colorManager","_renderer","setRenderer","_createRenderer","clearTextureAtlas"],"sourceRoot":""}