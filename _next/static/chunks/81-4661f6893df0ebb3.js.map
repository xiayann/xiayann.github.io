{"version":3,"file":"static/chunks/81-4661f6893df0ebb3.js","mappings":"AOAA,aACA,CAACA,KAAK,gBAAmB,CAAGA,KAAK,gBAAmB,EAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAEjE,KACC,SAASC,uBAAuB,CAAEC,mBAAmB,CAAEC,mBAAmB,CAAE,CAInFA,oBAAoBC,CAAC,CAACF,oBAAqB,CACzC,EAAK,UAAW,CAAE,OAAqBG,SAAW,CACpD,GAGA,IJ+oBAC,2BA/oBIC,OAASJ,oBAAoB,MAE7BK,UAAYL,oBAAoB,MAEhCM,MAAQN,oBAAoB,MAE5BO,MAAQP,oBAAoB,MAE5BQ,KAAOR,oBAAoB,MAE3BS,mBAAqBT,oBAAoB,MAEzCU,uBAAyBV,oBAAoB,MAE7CW,MAAQX,oBAAoB,MAE5BY,MAAQZ,oBAAoB,MAE5Ba,cAAgBb,oBAAoB,MHyFvCc,KAAAd,oBAAA,MC9GAe,WAAAf,oBAAA,KAAAgB,UAAAhB,oBAAA,MCRqBiB,OAAA,WAGpB,IAFMC,GAEFC,IAAC,GAAAH,UAAGI,CAAA,WAAwB,IACjB,GAAbF,CAAAA,GAAOC,MAAAA,IAAM,OAAAA,IAAAE,SAAA,GAAAH,KAAA,IAAAA,MAAAA,GAAAI,SAAA,EAIfH,IAAAE,SAAA,CAAAC,SAAA,CAAAC,OAAA,gBC8CIC,cAAA,GAAmBf,mBAAMgB,CAAA,IAGzBC,eAAgB,YAIZC,cAAA,SAAAC,MAAA,EAwBiC,SAAzCD,cACEE,KAAA,EAPM,IAAAC,MAAAF,OAAYG,IAAG,MAAAF,QAA0D,KA6TzEC,MAAAE,YAAW,CAAA1B,MAAC2B,SAA4D,GAAAH,MAC9EI,QAAS,UAAaC,EAAE,EACtBL,MAAKD,KAAK,CAACO,OAAO,EACnBN,MAAAD,KAAA,CAAAO,OAAA,CAAAD,IAEkCL,MACjCO,QAAS,EAAAC,UAAM,cAAmB,CAChCR,MAAKD,KAAA,CAAAU,iBAAsB,EAC5BT,MAAAU,SAAA,CAAAV,MAAAW,KAAA,CAEH,EAEM,EAAuEX,MAC7EY,OAAQ,CAAC,SAAYP,EAAE,EACrBL,MAAKD,KAAK,CAACc,MAAM,EAClBb,MAAAD,KAAA,CAAAc,MAAA,CAAAR,IAEmCL,MAClCO,QAAS,EAAAC,UAAM,cAAoB,CACjCR,MAAKD,KAAA,CAAAe,kBAAsB,EAC5Bd,MAAAU,SAAA,CAAAV,MAAAW,KAAA,CAEH,EAEM,EAAwCX,MACtCe,cAAoB,CAAK,SAAlBhB,KAAQ,CAAK,CAC5B,IAAAiB,MAAAjB,MAAAiB,KAAA,CAAAC,SAAAlB,MAAAkB,QAAA,CAEEC,YAAQlB,MAAYmB,WAAA,CAAAC,kBAAmF,CACrGpB,MAAAmB,WAAU,CAAAC,kBAAA,CAAAJ,KAAA,CAEVK,KAAAA,CAAO,cAMV7C,MAAA8C,aAAA,CAAA7C,MAAA8C,CAAA,EAAAN,SAAAA,SAAAO,QAAAxB,MAAAyB,GAAA,CAAAC,OAAAR,YAAAS,SAAA5B,MAAA4B,QAAA,CAAAC,GAAA5B,MAAA6B,QAAA,EAAA9B,MAAAiB,KAAA,EAED,MAEoDhB,MACpD8B,oBAAqB,CAAE,SAAA/B,KAAA,eACrBgC,WAAO,CACRvD,MAAA8C,aAAA,SAAAU,UAAAhC,MAAAmB,WAAA,CAAAY,WAAA,EAAAhC,MAAAgC,WAAA,EAED,MA4HwE/B,MACxEiC,oBAAc,UAASC,KAAI,EAC3BlC,MAAAO,QAAA,UAAA4B,SAAA,SAAAC,oBAAA,CAAAD,UAAAC,mBAAA,GAEM,EAAgFpC,MACtFqC,cAAA,UAAAH,KAAA,EAUA,IALA9C,GAAAkD,GAKA3B,MAAA4B,MADsBC,MAAM,CAC5B7B,KAAA,CAKI8B,cAAUC,UAAa1C,MAAKD,KAAK,CAAKC,MAAA2C,KAAA,GAAgB,GAA6B,GACrFhC,KAAKU,IAALV,OAAqBA,QAAGX,MAAU4C,gBAAA,EAAAjC,QAAA8B,cAAA,CAClCzC,MAAA4C,gBAAO,CAAAvB,KAAAA,EACR,MACD,OAEAuB,gBAAK,CAAMjC,MAEX,IAAyB,GAAzB2B,CAAAA,GAAK,CAAAlD,GAAKY,MAAAD,KAAA,EAAa8C,QAAE,GAAAP,KAAA,IAAAA,IAAAA,GAAArC,IAAA,CAAAb,GAAA8C,MAAAvB,OACvBX,MAAA8C,aAAA,EAGD9C,MAAAO,QAAA,EAAAwC,kBAAApC,KAAA,EA9fD,EACA,GAAA/B,uBAA8BoE,CAAA,EAAAhD,OAE9BA,MAAIiD,MAAuC,CAI1C,IAAApE,MAAAqE,CAAA,CAAAlD,OAGDA,MAAKmD,WAAA,CAAc,GAAGrE,MAAAsE,CAAA,EAAAxD,gBACtBI,MAAKqD,cAAW,IAAAvE,MAAMsE,CAAA,EAAAxD,eAAiB,eACvCI,MAAK6B,QAAA,CAAS,CAAG,EAAA/C,MAAAsE,CAAA,EAAKxD,eAAe,SACrCI,MAAKsD,SAAS,CAAG,GAAAxE,MAAAsE,CAAA,EAAMxD,eAAiB,UAExCI,MAAKuD,SAAA,IAAAzE,MAAuBsE,CAAA,EAAAxD,eAAA,UAEtBI,MAAAwD,oBAA4C,GAClD,IAAIpE,GAAAW,MAAO0D,YAAY,CAAKA,aAAUrE,KAAA,IAAAA,GAnDnB,GAmDmBA,EAAA,CAYvC,MAXG,iBAAAqE,cAEDA,CAAAA,aAAAC,OAAAD,aAAA,EACYzD,MACX2C,KAAA,EACAI,kBAAgB/C,MAAA8C,aAAA,CAAAzB,KAAAA,EAAAoC,YAAA,CAChBjD,UAAA,GACAmD,aAAA,EAEF,EACA3D,MAAK4D,gBAAe,CAAI5D,MAACiD,MAAA,CAAAY,QAAA,CAAA7D,MAAAU,SAAA,CAAAV,MAAAD,KAAA,CAAA+D,sBAAA,EAAA9D,MAAA+D,eAAA,GAC1B/D,KAKD,CA9DQ,MAwBR,GAAAzB,UAAyCyF,EAAA,EAAAnE,cAAAC,QAsCzBmE,OAHhBC,cAAA,CAAArE,cAAAsE,SAAA,UAGAC,IACE,UAAO,CACR,OAAA1B,UAAA,KAAA3C,KAAA,MAAA4C,KAAA,GAAA0B,WAAA,GAAAC,aAAA,EAEM,GAAPzE,cACOsE,SAAA,CAAAI,iBAAqB,YAE1B,IAAI,CAAAC,kBAAW,GACb,IAAI,CAACzE,KAAA,CAAA0E,cAAoB,EAC1B,KAAA/D,SAAA,MAAAC,KAAA,CAGI,EAAPd,cACOsE,SAAc,CAAAO,oBAAG,YACvB,KAAAzB,MAAA,CAAA0B,OAAA,EAEM,EAA8E9E,cAC5EsE,SAAA,CAAAS,uBAAA,UAAAC,SAAA,CAAA1C,SAAA,QACL,CACA2C,UAAA,MAAAC,cAAA,MAAAC,YAAA,EAGG,EAGuBnF,cAEjBsE,SAAQ,CAAAc,kBAAM,UAAAJ,SAAA,CAAA1C,SAAA,CAAA+C,QAAA,EACjB,IAAAnF,MAA6B,KAAAA,KAAY,CAC1CX,GAAK,CAAA8F,UAAkB,IAAhBJ,SAAO,CAAAA,UAAU1F,KAAA,IAAAA,GAAA,YAAAA,EAAA,CAE3B+F,MAAEL,SAAU,IAASM,IAAON,SAAM,KACpC,CAAAD,UAAAQ,SAAA,IAAAtF,MAAAsF,SAAA,EAAAlD,UAAA3B,SAAA,GAGA,IAAI,CAAA8E,KAAK,GACF,OAALH,OAAKC,IAAyB,GAAzBA,KAA6BD,OAAC,GAAAC,KAAA,GACpC,KAAAG,iBAAA,CAAAJ,MAAAC,MAIDP,UAAAlE,KAAA,GAAAZ,MAAAY,KAAA,EAID,MAAAiC,gBAAA,CAAAvB,KAAAA,CAAA,EAGD,IAAMmE,UAAY9C,UAAOmC,UAAA1C,WACrBxB,MAAA,IAAS,CAAAA,KAAK,CAChB6E,YAAA7E,QAGA,KAAA6C,oBAAA,CAAAqB,WAGE,IAAI,CAAClC,KAAA,CAAAgB,YAAW,GAAY5D,MAAM4D,YAAE,EACrC,KAAApD,QAAA,EAAAoD,aAAA,KAKD,KAAAa,kBAAA,GAIEiB,0BAAsB1F,QACvB,KAAA6D,gBAAA,CAAAjD,OAIE,EAAPd,cAyBMsE,SAAU,CAAAuB,MAvBZ,WAAU,CAwBN,IAAAtG,GAAqC,IAAI,CAACW,KAAK,CAA7C4F,WAASvG,GAAAuG,UAAE,CAAA3D,UAAA5C,GAAA4C,SAAmB,CAAAL,SAAAvC,GAAAuC,QAAgB,CAAAiE,QAAAxG,GAAAwG,OAAA,CAAAC,UAAAzG,GAAAyG,SAAA,CAAAC,eAAA1G,GAAA0G,cAAA,CAAA9E,MAAA5B,GAAA4B,KAAA,CAAAqE,UAAAjG,GAAAiG,SAAA,CAAApE,SAAA7B,GAAA6B,QAAA,CAAA8E,WAAA3G,GAAA2G,UAAA,CAAAC,OAAA5G,GAAA4G,MAAA,CAAAC,UAAA7G,GAAA6G,SAAA,CAAAC,OAAA9G,GAAA8G,MAAA,CAAAC,MAAA/G,GAAA+G,KAAA,CAAAzE,OAAAtC,GAAAsC,MAAA,CAAA0E,iBAAAhH,GAAAgH,gBAAA,CAAAC,kBAAAjH,GAAAiH,iBAAA,CAAAC,wBAAAlH,GAAAkH,uBAAA,CAAAC,KAAAnH,GAAAmH,IAAA,CAAAjE,GAAAlD,GAAAoH,cAAA,CAAAA,eAAAlE,KAAA,IAAAA,GAAA,KAAAmE,eAAA,CAAAnE,EAAA,CAAAoE,GAAAtH,GAAAuH,cAAA,CAAAA,eAAAD,KAAA,IAAAA,GAAA,KAAAE,eAAA,CAAAF,EAAA,CAAAG,GAAAzH,GAAA0H,aAAA,CAAAA,cAAAD,KAAA,IAAAA,GAAA,KAAA9F,cAAA,CAAA8F,EAAA,CAAAE,GAAA3H,GAAA4H,mBAAA,CAAAA,oBAAAD,KAAA,IAAAA,GAAA,KAAAjF,oBAAA,CAAAiF,EAAA,CAChDE,GAAA,KAAAtE,KAAe,CAAAnC,UAAKyG,GAAAzG,SAAc,CAAA4B,oBAAA6E,GAAA7E,mBAAA,CAClCuB,aAAY,IAAO,CAAAuD,aAAY,CAI/BC,gBAAkB,CAAC,CAAAd,mBAAcE,aAAAA,MAAuBa,UAybrD,CAA0C,GACnD,kBAAS/I,2BAAe,CAExB,IAAIgB,IAAG,GAAAH,UAAAI,CAAA,IAAa,GAClBD,MAAAA,IAAsB,OAAAA,IAAAE,SAAA,EAGtB,IAAA8H,OAAA,MAAAC,IAAA,CAAAjI,IAA0BE,SAAW,CAAAC,SAAM,EAAQ,IACpDnB,2BAAA,CAAAc,CAAAA,UAAAkI,MAAA,OAEAhJ,2BAAA,EACF,CACD,OACDA,0BAAA,IArcKkJ,WAAa,KAAApG,WAAA,CAAAzB,cAAAgC,OAAA,CACbyE,MAAAA,MACAnE,UAAQA,UACRL,SAASA,SACT6F,QAAQhH,UACRS,SAASA,SACToE,UAAWA,UACXoC,SAAA,EAAAzG,MACA0G,gBAXI,kBAAmB9B,QAAsBA,QAAS,EAAAjC,YAAc,CAYpEgC,WAASA,WACTM,UAAWA,UACX0B,QAAA,CAAU,CAAA9B,UACVE,WAAAA,WACAD,eAAgBA,eAChBM,iBAAeA,iBACbe,gBAAAA,eAEJ,GACE,OAC2D3I,MACzD8C,aAAA,QAAAsG,IAAK,KAAA7H,KAAW,CAAA8H,UAAW,CAAA7F,UAAOuF,WAAAO,IAAA,EAAAtJ,MAC/B8C,aAAc,OAAK,CAAKU,UAAOuF,WAAeQ,OAAA,EAC/CjB,cAAA,KAAA/G,KAAA,KAAK,CAAAgB,cAAW,EAAqBvC,MACjC8C,aAAW,OAAS,CAAIU,UAAWuF,WAAAS,UACnC,EAID,CAAAhC,KAAY3E,IAAZ2E,QAAiB,KAAAjG,KAAkB,CAACyG,cAAM,GAAchI,MAAA8C,aAAA,QAAAU,UAAAuF,WAAAvB,MAAA,CAAApE,GAAA,KAAA0B,SAAA,EAAAkD,eAAA,KAAAzG,KAAA,MAAA0G,eAAA,GACxDpB,UAAS,IAAI,CAAA4C,eAAA,GAAC,KAAAC,YAAI,GAClBrC,WAAArH,MAAmB8C,aAAA,CAAA5C,KAAAY,CAAA,IAAAf,UAAA4J,EAAA,GAAAnG,UAAAuF,WAAAa,IAAA,EAAAvC,YAClBsB,iBAMe3I,MAEb8C,aAAA,wBAAiBgF,wBAAqBtE,UAAAuF,WAAAc,YAAA,CAAAC,QAAA,KAAArG,oBAAA,kBAAAG,oBAAAmE,KAAA,UAAA/H,MACpC8C,aAAA,QAAC,CAAAU,UAAIuF,WACHgB,UAAW,EAMX/J,MAAK8C,aAAa,CAAA5C,KAAWY,CAAA,EAAA0C,UACnCuF,WAAAiB,UAAA,CAAAC,SAAKrG,oBAvNnB,OAFuB,QA0NN,KAKH,CAAA8D,KAAA7E,IAAA6E,QACJ,KAAAnG,KAAA,CAAA4G,cAAA,GAAMnI,MAAI8C,aAAK,OAAc,CAAAU,UAAAuF,WAAArB,MAAA,CAAAtE,GAAA,KAAA2B,SAAA,EAAAoD,eAAA,KAAA5G,KAAA,MAAA6G,eAAA,SAC1B,CAAA8B,uBAAwB,EAAClK,MAAO8C,aAAK,QAAoB,CAACM,GAAA,KAAAyB,cAAA,EAC1D2D,oBACC,KAAAjH,KAAA,MAAA+B,oBAAU,EAAO6B,cACfnF,MAAA8C,aAAC,QAAAqH,KAAA,OAAa,EAO3BnK,MAAA8C,aAAA,CAAAvC,cAAA6J,CAAA,WAAAC,mBAAA,MAED,EAGAhJ,cACWsE,SAAA,CAAAmB,KAAa,WAAS,CAC7B,IAAI,CAACpF,YAAY,CAAC4I,OAAO,EAC1B,KAAA5I,YAAA,CAAA4I,OAAA,CAAAxD,KAAA,EAGH,EAGAzF,cACWsE,SAAA,CAAA4E,IAAa,WAAS,CAC7B,IAAI,CAAC7I,YAAY,CAAC4I,OAAO,EAC1B,KAAA5I,YAAA,CAAA4I,OAAA,CAAAC,IAAA,EAGH,EAGAlJ,cACWsE,SAAA,CAAA6E,MAAa,CAAO,UAAE,CAC7B,IAAI,CAAC9I,YAAY,CAAC4I,OAAO,EAC1B,KAAA5I,YAAA,CAAA4I,OAAA,CAAAE,MAAA,EAGH,EAGsCnJ,cAC3BsE,SAAA,CAAA8E,iBAAsB,UAAAtI,KAAA,EAC7B,IAAI,CAACT,YAAY,CAAC4I,OAAO,EAC1B,MAAA5I,YAAA,CAAA4I,OAAA,CAAA/D,cAAA,CAAApE,KAAA,CAGH,EAGoCd,cACzBsE,SAAA,CAAA+E,eAAsB,UAAAvI,KAAA,EAC7B,IAAI,CAACT,YAAY,CAAC4I,OAAO,EAC1B,MAAA5I,YAAA,CAAA4I,OAAA,CAAA9D,YAAA,CAAArE,KAAA,CAMH,EAAyBsD,OAHzBC,cAAA,CAAArE,cAAAsE,SAAA,mBAGAC,IACE,UAAY,CACb,YAAAlE,YAAA,CAAA4I,OAAA,MAAA5I,YAAA,CAAA4I,OAAA,CAAA/D,cAAA,KAAAV,WAAA,GAAAC,aAAA,EAKD,GAAuBL,OAHvBC,cAAA,CAAArE,cAAAsE,SAAA,iBAGAC,IACE,UAAY,CACb,YAAAlE,YAAA,CAAA4I,OAAA,MAAA5I,YAAA,CAAA4I,OAAA,CAAA9D,YAAA,KAAAX,WAAA,GAAAC,aAAA,EAED,GAKmDzE,cACxCsE,SAAA,CAAAoB,iBAAsB,UAAAJ,KAAA,CAAAC,GAAA,EAC5B,IAAI,CAAClF,YAAY,CAAC4I,OAA4B,EAChD,KAAA5I,YAAA,CAAA4I,OAAA,CAAAvD,iBAAA,CAAAJ,MAAAC,IAGK,EAAgDvF,cACtDsE,SAAA,CAAAX,oBAAA,UAAAqB,SAA0D,MHpTjBsE,MGuT1B,KAAE,CAAA1H,GAAA,CAEf,IAAU,CAAA1B,KAAA,CAQL,IAAmB,GAAxB,IAAI,CAACA,KAAA,CAAAY,KAAA,EAAsB,IAAK,CAAAyI,mBAAA,GAChC,KAAAA,mBACE,IAAqF,GAAApK,KACnFqK,CAAA,+BAAAzJ,eAAA,mIAMR,EAAeqE,OADfC,cAAA,CAAArE,cAAAsE,SAAA,QACAC,IACE,UAAY,CACb,YAAArE,KAAA,CAAA6B,EAAA,OAAAuB,WAAA,EAAAkB,WAAA,GAAAC,aAAA,EAED,GAAyBL,OAAAC,cAAzB,CAAArE,cAAAsE,SAAA,kBAAAC,IACE,UAAO,KFpYTrE,MAAAuJ,UEqYC,OFlYFvJ,KAAAsB,IAAAtB,CAHCA,MEqYC,KAAAA,KAAA,CFlYF,CAHCuJ,UEqYC,QFlYF,EAAAvJ,IAAA,GAAAA,KAAA,CAAAuJ,UAAA,EEkYEjF,WAAA,GAAAC,aAAA,EAkDO,GAAsCzE,cAC9BsE,SAAU,CAAAsC,eAAC,UAAA1G,KAAA,EACzB,IAAAiG,OAAOjG,MAAAiG,MAAA,CACR,OAAAxH,MAAA8C,aAAA,SAAAiI,MAAA,CAAAC,cAAA,QAAAxD,OAEO,EAAsCnG,cAC9BsE,SAAU,CAAAyC,eAAC,UAAA7G,KAAA,EACzB,IAAAmG,OAAOnG,MAAAmG,MAAA,CACR,OAAA1H,MAAA8C,aAAA,SAAAiI,MAAA,CAAAC,cAAA,QAAAtD,OAQD,EAAyBjC,OANzBC,cAAA,CAAArE,cAAAsE,SAAA,kBAMAC,IACU,UAA+C,CACvD,IAAAhF,GAAO,KAAAW,KAAY,CAAA4D,YAAO,CAC3B,MAAAA,CAD2BvE,KAAA,IAAAA,GAAA,KAAAuD,KAAA,CAAAgB,YAAA,CAAAvE,EAAA,GAC3B,IAAAiF,WAAA,GAAAC,aAAA,EAED,GAMAzE,cACQsE,SAAe,CAAA0E,mBAAmB,YAExC,IAAAlF,aAAmB,IACjB,CAAAuD,aAAO,CACsC,OACzCvD,aAAA,iBAAAA,aAAyBnF,MAAA8C,aAAiB,MAAAU,UAG5C,KAAAb,WAAA,CAAAwC,YAAK,EAKVnF,MAAA8C,aAAA,+CAAAqC,eAAAnF,MAAA8C,aAAA,QAAAU,UAAA,KAAAb,WAAA,CAAAwC,YAAA,uCAAAA,aAAA,OAMkCM,OAJnCC,cAAA,CAAArE,cAAAsE,SAAA,4BAIAC,IACE,UAAc,CACd,IAAArE,MAAU,IAAM,CAAAA,KAAA,CACjB,QAAAA,CAAAA,MAAAiH,mBAAA,EAAAjH,MAAAgC,WAAA,OAAAmF,aAAA,GAAA7C,WAAA,GAAAC,aAAA,EAEO,GAARzE,cAC6CsE,SAAU,CAAA8D,eAA7C,CAAO,WACf,IAAM7I,GAAA,KAAAW,KAAa,CAAG6F,OAAA,CAAAA,QAAAxG,KAAA,IAAAA,GAAA,EAAc,IAClC,CAAI8H,aACJ,CAAA9H,EAAA,CAGIqK,cAAc,CAAG,EAAAxK,WAAiCyK,EAAC,MAAK,CAAA3J,KAAM,CAAAd,WAAmC0K,EAAA,mBACvGC,eACE,KAAA7J,KAAA,2BAAAA,KAAA,CAAAiB,KAAA,CACE,IAAI,CAAAa,QAAQ,CACRR,KAAAA,CAAA,EAeT,OAAA7C,MAAA8C,aAAA,eAAA/C,UAAA4J,EAAA,GAAAvG,GAAA,KAAAH,GAAA,EAAAgI,cAAA,CAAA7B,IAAA,KAAA1H,YAAA,CAAAS,MAAA,KAAAA,KAAA,KAAAkJ,QAAA,KAAAxH,cAAA,CAAAQ,SAAA,KAAAR,cAAA,CAAAL,UAAA,KAAAb,WAAA,CAAA2I,KAAA,mBAAAF,eAAA,wBAAAlB,uBAAA,MAAArF,cAAA,MAAAtD,KAAA,oCAAA6F,QAAA,kBAAA7F,KAAA,CAAAgK,SAAA,CAAAC,SAAA,KAAAjK,KAAA,CAAAiK,QAAA,CAAA1J,QAAA,KAAAF,QAAA,CAAAS,OAAA,KAAAD,OAAA,GAEO,EAARf,cAUMsE,SAAU,CAAA+D,YARH,WACT,CASF,IAAA9I,GAAA,KAAAW,KAAA,CAAAgK,UAAA3K,GAAA2K,SAAA,CAAAzH,GAAAlD,GAAAwG,OAA4D,CAAAA,QAAAtD,KAAA,IAAAA,GAAA,OAAA4E,aAAA,CAAA5E,EAAA,CAAAkE,eAAApH,GAAAoH,cAAA,CAAAG,eAAAvH,GAAAuH,cAAA,CAAAX,OAAA5G,GAAA4G,MAAA,CAAAE,OAAA9G,GAAA8G,MAAA,CAAAQ,GAAAtH,GAAAmH,IAAA,CAAAvF,MAAA5B,GAAA4B,KAAA,CAE5DiJ,SAAS,EAAQ,CACjBjJ,OAAOiJ,SAAKlM,IAAS,KAAI,CAAA8D,QAAA,EACzB,CAACmE,KAAW3E,IAAX2E,QAAwBQ,cAAA,GAAmByD,SAASlM,IAAI,CAAC,IAAI,CAACuF,SAAS,EAExE,CAAA4C,KAAM7E,IAAN6E,QAAgBS,cAAA,GAAAsD,SAAAlM,IAAA,MAAAwF,SAAA,EAiBhB,IAAM2G,WAAa,GAAG3L,UAAC4J,EAAA,EAA8D,GAAA5J,UAAA4J,EAAA,GAAA5B,KAAA,KAAA5D,KAAA,CAAAP,mBAAA,QAvBzBsE,KAAA,IAAAA,GAAA,OAAAA,EAAA,CAuByB9E,GAAA,KAAAH,GAAA,KAAAxC,WAAAyK,EAAA,OAAA3J,KAAA,CAAAd,WAAAkL,EAAA,mDAAApK,KAAA,qBAAAkK,CAAAA,SAAAG,MAAA,GAAAH,SAAAI,IAAA,MAAAhJ,KAAAA,CAAA,EAAAuG,IAAA,KAAA1H,YAAA,CAAAS,MAAA,KAAAA,KAAA,KAAAkJ,QAAA,KAAAxH,cAAA,CAAAQ,SAAA,KAAAR,cAAA,CAAAL,UAAA,KAAAb,WAAA,CAAA2I,KAAA,cAAAC,UAAA,wBAAArB,uBAAA,MAAArF,cAAA,MAAAtD,KAAA,oCAAA6F,QAAAtF,QAAA,KAAAF,QAAA,CAAAS,OAAA,KAAAD,OAAA,GACnF0J,cAAO,SAAAC,iBAAA,EACP,OAAA/L,MAAA8C,aAAA,YAAA/C,UAAA4J,EAAA,KAAAoC,mBACF,EAED,MAAAC,CADqB,IAAC,CAAAzK,KAAA,CAAUyK,aAAE,EAAeF,aAAA,EACjDJ,WAAAI,cAqCO,EAAmCzK,cAA3CsE,SA2BC,CAAAzD,SAAA,UAAAC,KAAA,EA1BC,IAAAX,MAAA,KACkF,IAChF,MAAAyK,oBAAO,GAAA9J,OAAA8E,0BAAA,KAAA1F,KAAA,IAIT,IAAM,CAAA0K,oBAAoB,CAAI9J,MAC9B,IAAM+J,kBAAS,KAAA3K,KAAqB,CAAA2K,iBAAkB,CAElDC,OAAMD,mBAAgBA,kBAAA/J,OAAA,OACxBgK,KAAWtJ,IAAXsJ,QAAuD,GACrD,iBAAKA,QAAyB,SAAUA,OAGxC,CAEA,IAAAC,oBAAa,OAAA7G,eAAkC,CAAA4G,OAC7CE,IAAI,UAAAlH,YAAsB,EACxBiH,sBAAgB5K,MAAY+D,eAAE,EAC/B/D,MAAAO,QAAA,EAAAoD,aAAAA,YAAA,GAEA3D,MAAA8K,oBAAA,CAAAnK,MAAAgD,aACJ,EACF,MAXG,IAAI,CAACpD,QAAA,EAAAoD,aAAqBgH,MAAO,GAClC,KAAAG,oBAAA,CAAAnK,MAAAgK,OAUF,MAEA,KAAAG,oBAAA,CAAAnK,MAAA,GACF,CArBC,EAuBwFd,cAC/EsE,SAAU,CAAA2G,oBAAoB,UAAAnK,KAAA,CAAAgD,YAA0B,EAC/DhD,QAAU,IAAC,CAAAA,KAAA,OAAAZ,KAAA,CAAwBgL,wBAAsB,EAC1D,KAAAhL,KAAA,CAAAgL,wBAAA,CAAApH,aAAAhD,MAGK,EAARd,cACWsE,SAAA,CAAAK,kBAA6B,WAAM,CAA0C,GACpF,IAAM,CAAAtE,YAAY,CAAA4I,OAAK,MAAY,CAAC/I,KAAA,CAAAqG,gBAAQ,OAAArG,KAAA,CAAAsF,SAAA,EAC5C,IAAA2F,UAAgB,KAAA9K,YAAY,CAAA4I,OAAA,CAC5BkC,UAAUzB,KAAK,CAAC0B,MAAM,CAAG,GAC1BD,UAAAzB,KAAA,CAAA0B,MAAA,CAAAD,UAAAE,YAAA,KACF,GAnkB6CrL,cACnCsL,YAAM,EACflF,UAAA,GACAnC,uBAAoB,IACpBW,eAAA,EAgkBJ,EAtkBU5E,aADgB,EAAArB,MAAA4M,SAAA,EA0kBuC,SACvD1I,UAAyC3C,KAAV,CAA/B4C,KAAK,EACb,IAAIvD,GAAAW,MAAOY,KAAK,CAAKA,MAAQvB,KAAE,IAAFA,GAAEuD,MAAAI,iBAAA,CAAA3D,EAAA,iBAC7B,OAAAuB,MAED+C,OAAA/C,OAEFA,KADC,CAOuD,SACvD8E,0BAAe1F,KAAqB,EACrC,OAAAA,CAAAA,MAAAU,iBAAA,EAAAV,MAAAe,kBAAA,CAED,CAiBC,IAAAuK,IAAAnN,oBAAA,MCzpBCoN,iBAAM,CACNxD,KAAA,eACA/F,YAAY,2BACZ4B,aAAO,4BACPmG,MAAA,qBACA9B,WAAQ,0BACRhC,OAAQ,sBACRE,OAAO,sBACP6B,QAAA,uBAEAM,aAAW,sBACXhD,UAAU,0BACVM,WAAY,2BACZI,WAAW,2BAEXwF,YAAU,4BACVtK,SAAU,cACVU,SAAQ,cACR6J,OAAA,WAEF,EC1BEpN,UAAO,GAAAE,OAAW8E,CAAA,EAAAvD,cDwDiC,SAAAE,KAAA,EAmB3C,IA/CAgG,WAAcpE,SAAW6F,QAAArB,MAEjCsF,QAAOC,MA4BLtM,GAAAkD,GAeEoE,GAAAG,GAAKE,GAfFE,GACL0E,GAAAC,GAASC,GAcPC,GAAKC,GAAAC,GAED7F,OAAApG,MAAcoG,KAAqB,CAAAnE,UAAKjC,MAAxBiC,SAAO,CAAYL,UAAK5B,MAAf4B,QAAU,CAAK6F,SAACzH,MAAAyH,OAAA,CAAAvG,SAAAlB,MAAAkB,QAAA,CAAAoE,UAAAtF,MAAAsF,SAAA,CAAAoC,SAAA1H,MAAA0H,QAAA,CAAA9B,WAAA5F,MAAA4F,UAAA,CAAAI,YAAAhG,MAAAgG,UAAA,CAAA4B,QAAA5H,MAAA4H,OAAA,CAAA1B,UAAAlG,MAAAkG,SAAA,CAAAyB,gBAAA3H,MAAA2H,eAAA,CAAA5B,eAAA/F,MAAA+F,cAAA,CAAAM,iBAAArG,MAAAqG,gBAAA,CAAAe,gBAAApH,MAAAoH,eAAA,CAE3C8E,eAAa9F,OAAA8F,cAAA,CAAAC,QAAoB/F,OAAA+F,OAAA,CAAAR,OAAuBvF,OAAEuF,KAAA,CAE1DnE,WAAA,GAAA8D,IAA4Bc,EAAA,EAAAb,iBAAAnF,QAChCiG,kBAAA,CAEAC,WAAQJ,eAAWK,kBAAe,CAClCC,MAAO,UAAQN,eAAAO,YAAA,CAAAP,eAAAQ,oBAAA,CACfC,QAAA,OACAC,WAAS,SACTC,QAAA,SACAC,WAAY,EACZC,WAAY,SACZC,WAAS,EAAAC,UACN5N,CAAAA,CAAAA,GAAA,GAAuB,CAAAiM,IACF4B,EAAA,GACpBZ,WAAO,SACRE,MAAA5K,UAAA,yBAEHvC,EAAA,CAEF,EAEE8N,kBAAA,EAEEX,MAAON,eAAGQ,oBAAA,CACVU,QAAS,EAAAH,UACN1K,CAAAA,CAAAA,GAAA,GAAuB,CAAA+I,IACL4B,EAAA,GAClBV,MAAA,YAEJjK,EAAA,CACD,EAEF,CACE8K,0BAAsB,CACtBb,MAAAN,eAASO,YAAA,CAAAQ,UACNtG,CAAAA,CAAAA,GAAA,GAAuB,CAAA2E,IACL4B,EAAA,GAClBV,MAAA,YAEH7F,EAAA,CAEF,EAAO,MACL,CAAMoB,KACJ,CACAP,WAAMO,IAAM,CACZ4D,OAAA2B,MAAY,CACZpM,UAAYsG,WAAWtG,QAAQ,CAC/BU,WAAW4F,WAAW5F,QAAM,CAC5B6F,UAASD,WAAIiE,MAAW,CACxBnG,WAAUkC,WAAclC,SAAC,CACzBM,YAAc4B,WAAW5B,UAAU,CACnCI,aAAAwB,WAASxB,UAAA,CACTsF,IAAAiC,EAAA,EAECC,SAAA,UACD,EACDvL,UACD,CAAS+F,QACP,CAEAR,WAAUQ,OAAI,CAAAhC,aACZ,EAEE2G,QAAA,OACAc,aAAa,8BAAAvB,eAAAwB,SAAA,CAAAxB,eAAAyB,WAAA,EACdC,MAAA,MACD,EAAYhM,WACV,CACAiM,kBAAS3B,eAAAK,kBAAA,CAAAU,UACNnG,CAAAA,CAAAA,GAAA,GAGA,CACFwE,IAAA4B,EAAA,KAAA1O,UAAA4J,EAAA,GAAA0F,YAAA,eAAAxC,IAAAyC,EAAA,KACFjH,EAAA,CACD,EAAa,CAAAlF,WACF,CAAEqL,UACT,CAAU,SACR,CACAY,kBAAS,gBAAA3B,eAAAwB,SAAA,CAAAxB,eAAA8B,kBAAA,CAAAf,UACNjG,CAAAA,CAAAA,GAAA,GAGA,CACFsE,IAAA4B,EAAA,KAAA1O,UAAA4J,EAAA,GAAAyF,kBAAA,gBAAAvC,IAAAyC,EAAA,KACF/G,EAAA,CACF,CACF,CACD,EAAWS,UACT,EAEC+F,SAAA,UACD,EAKD,GAAAlC,IAAA2C,EAAA,kBAAA/B,eAAAwB,SAAA,CAAAxB,eAAAgC,mBAAA,mBACF,CACF,CACD,CAAYjG,WACV,CACAT,WAAAS,UAAS,CACTqD,IAAAiC,EAAA,EAEEY,OAAA,aAAsBjC,eAAcyB,WAAA,CACpCS,aAAYjC,QAAAkC,cAAe,CAC3B/B,WAAQJ,eAAMoC,eAAA,CACdC,OAAQ,OACRrD,OAAO,GACPyB,QAAA,OACA6B,cAAY,MACZ5B,WAAU,UACXY,SAAA,UACD,EAAalI,WACF,CACTmJ,UAAQ,OACRvD,OAAO,OACRyB,QAAA,MAED,EAAQ,CAAAlF,UAEJ,CAAA7F,WAAW,CAAAqL,UACT,CAAU,SACR,CACAa,YAAS5B,eAAA8B,kBAAA,CAAAf,UACN/F,CAAAA,CAAAA,GAAA,GAGA,CACFoE,IAAA4B,EAAA,KAAA1O,UAAA4J,EAAA,GAAA0F,YAAA,gBAAAxC,IAAAyC,EAAA,KACF7G,EAAA,CACF,CACF,CAEH,EAAOO,UAEL,CAAAzB,aAIF,GAAAsF,IAAY2C,EAAA,kBAAA/B,eAAAwB,SAAA,CAAAxB,eAAAgC,mBAAA,CAAA/B,QAAAkC,cAAA,EAAAzM,WACV,CACAkM,YAAS5B,eAAAK,kBAAA,CAAAU,UACNrB,CAAAA,CAAAA,GAAA,GAGA,CACFN,IAAA4B,EAAA,KAAA1O,UAAA4J,EAAA,GAAA0F,YAAA,eAAAxC,IAAAyC,EAAA,KAEDnC,EAAM,EACP2C,OAAA,SACD,EAAc3I,YACJ,CACTuI,OAAA,MACD,EAAUvI,YAEN6B,UAAQ,CACR0G,OAAA,OAAWlB,UACT,CAAU,SACF,CACPkB,OAAA,MACF,CACF,CACH,EAAcnI,aACN,CACN0I,KAAM,UACNP,OAAA,OACDQ,UAAA,MACD,EAAU3I,aAENpE,WAAA,CACDgN,gBAAA,aAEH,EAAejH,iBAEX,CAAA3B,aAAa,CACb8H,YAAW5B,eAAAwB,SAAA,CAAAT,UACT,CAAW,UACT,CACDa,YAAA5B,eAAAwB,SAAA,CAEJ,CACH,EAAS,CAAAhG,UAELxG,UAAS,CAAA+L,UACPpB,CAAAA,CAAAA,GAAS,CAAE,UACF,CACPgD,QAAO,MACPrC,MAAAN,eAAoBwB,SAAA,CACpBF,SAAO,WACPsB,IAAK,GACNC,MAAA,IACD,EAAwB,CAAAzD,IACX4B,EAAA,GAAAD,UACT,CAAW,UACF,CACPT,MAAO,aACRuC,MAAA,GACF,CACF,GAEJlD,EAAA,CACJ,EACD,CAAO9B,MACL,CACA4B,OAAA2B,MAAW,CACX9F,WAAAuC,KAAA,CACAuB,IAAAiC,EAAA,EAEEa,aAAc,EACdD,OAAA,OACA7B,WAAA,OACAsC,gBAAO,cACPpC,MAAON,eAAS8C,SAAA,CAChBnC,QAAO,QACPe,MAAA,OACAqB,SAAA,EACAC,aAAU,WACVC,QAAS,EAAAlC,UACPnB,CAAAA,CAAAA,GAAA,CACA,6BAAe,CAAAqD,QAAA,iBACJ,CACVxC,QAAA,OACD,EAAwB,CAAArB,IACF4B,EAAA,GACpBZ,WAAO,SACRE,MAAA5K,UAAA,yBAEJkK,EAAA,CACD,EACA,GAAAR,IAAS8D,EAAA,EAAAjC,mBAAA7H,WAEL,CAAAY,WAAW,CACXsB,WAAAgE,WAAA,EAEC6D,OAAA,MACF,EACH,CAAa/J,WACF,CACTmJ,UAAU,UACV3B,WAAW,GACXwC,SAAU,EACVC,WAAA,EACA9F,cAAU,EACV+F,SAAO,OACR5B,MAAA,MACD,EAAStI,WAELe,kBAAkB,CACnBmJ,SAAA,QACH,EAAO5H,SAEH,CAAAR,iBAAgB,CACjBqI,aAAA,EACH,EAASnK,WAELsC,SAAA,CACD6H,aAAA,EACH,EAAY7N,WACV,EAEEgN,gBAAO1C,eAAeK,kBAAY,CAClCC,MAAAN,eAAaO,YAAe,CAC7BqB,YAAA5B,eAAAK,kBAAA,EAEF,GAAAjB,IAAA8D,EAAA,EAAA/B,2BACD,CAAcrH,aACH,CACV2I,UAAA,MACD,EAAOlH,UAEH,CAAA7B,YAAS,CAAAqH,UACNlB,CAAAA,CAAAA,GAAA,GAAuB,CAAAT,IACP4B,EAAA,GACfwC,YAAY,GACbD,aAAA,IAEJ1D,EAAA,CACH,EAAOtE,UAELnC,WACE,CAAAM,YAAS,CAAAqH,UACNjB,CAAAA,CAAAA,GAAA,GAAuB,CAAAV,IACP4B,EAAA,GAChBqC,WAAA,GAEJvD,EAAA,CACH,EACDjG,eACD,CAAMsC,KACJ,CAAa/C,WACX,CACAmK,aAAY,GACb7C,WAAA,UACD,GAEE+C,cAAU,OACVnC,SAAS,WACToC,OAAQ,EACRb,MAAK,EACLD,IAAA,OACAe,SAAUvE,IAAIwE,EAAA,CAAAxC,MAAA,CACfR,WAAA,EACD,EAAYlL,WACH,CACR4K,MAAAN,eAAAO,YAAA,EAEH,CAAazK,YACX,CACAwF,WAAAxF,WAAA,EAEEwK,MAAAN,eAAsB6D,WAAS,CAChCF,SAAAlE,OAAAqE,MAAA,CAAAH,QAAA,EAEH,CAAcjM,aACF,CACV4D,WAAA5D,YAAA,CACA0H,IAAW2E,EAAA,CAAAC,aAAA,CACXvE,OAAAwE,KAAA,EAEE3D,MAAMN,eAAGwB,SAAA,CACT0C,OAAA,EACAb,WAAS,EACT5C,QAAA,OACDC,WAAA,QACF,EACD,CACA3G,OAAQ,CAACuB,WAAWvB,MAAM,CAAEoG,kBAAkB,CAC9ClG,OAAA,CAAAqB,WAAcrB,MAAA,CAAAkG,kBAAA,CAAA/D,aACF,CACVd,WAAWc,YAAA,CACX,YACA,kBACA,GAAAgD,IAAA+E,EAAA,EAAAjK,OAAA,CAAAkK,MAAA,KAEEpF,OAAO,GACP0C,MAAM,GACNO,OAAO,OACPtB,QAAA,UACA+B,gBAAO,cACPpC,MAAAN,eAAWqE,IAAA,CAAAtD,UACT,CAAU,SACR,CACAkC,QAAO,EACP3C,MAAAN,eAAiBsE,8BAAe,CAChC5B,gBAAS1C,eAAAuE,uBAAA,CAAAxD,UACNhB,CAAAA,CAAAA,GAAA,GAAuB,CAAAX,IACE4B,EAAA,GACxBY,YAAO,YACRtB,MAAA,aAEJP,EAAA,CACD,EACD,UAAAkD,QAAA,EACF,CACD,EAAWvH,SACT,CACD8I,YAAA,EACF,EACD,CAAYlI,WACH,CACPmE,QAAQ,OACRzB,OAAA,OACD0B,WAAA,QACD,EAAYnE,WACF,CACR2H,OAAA,UACAT,cAAS,OACTC,OAAQ,EACRb,MAAK,EACLD,IAAA,OACAe,SAAUvE,IAAIwE,EAAA,CAAAxC,MAAA,CACfR,WAAA,EACD,EAAoBzL,mBACX,CACRJ,KAAA,EA1aK+E,WAAmBhG,MAAKgG,UAAf,CAAKpE,SAAU5B,MAAC4B,QAAA,CAAA6F,QAAAzH,MAAAyH,OAAA,CAEjCiE,QAAOtF,CAF0BA,MAAApG,MAAAoG,KAAA,EAE1BsF,OAAA,CAAAC,MAAAvF,MAAAuF,KAAA,YAAM,IAAAtM,GAAC,MACR,CAAE0I,KACJ,CAAU/B,YAENpE,UAAO,CACR4K,MAAAd,QAAAiF,eAAA,EACW3K,YACF,CACV6J,SAAAlE,MAAc2B,MAAA,CAAAuC,QAAA,CACda,YAAa,EACbhB,YAAY,GACZD,aAAY,EACZ3C,WAAU,OACX5B,OAAA,EACD,EAAUlF,YAENyB,SAAS,CAAAwF,UACN5N,CAAAA,CAAAA,GAAA,GAAuB,CAAAiM,IACV4B,EAAA,GACbhC,OAAA,IAEJ7L,EAAA,CACJ,EACD,CACH,EAiZG,CACH,GCxcmBiC,KAAAA,EAAA,CACjBsP,MAAA,6BAAA3S,uBAAA,CAAAC,mBAAA,CAAAC,mBAAA,EAAAA,oBAAAC,CAAA,CAAAF,oBAAA,qBAAAc,aAAA,QAAA6R,mCAAA1S,oBAAA,MAAA2S,mCAAA3S,oBAAA,MAAA4S,4CAAA5S,oBAAA,MCwBgCa,cAAA,SAAAe,MAAA,EAOK,SAAtCf,cACEgB,KAAA,EACA,IAAAC,MAAUF,OAAGG,IAAA,MAAAF,QAAA,KAGd,OAHcC,MACX2C,KAAA,CAAU,CACVoO,WAAA,KAAA1P,IAAA,GAAAyP,4CAAAxR,CAAA,KACHU,KAEM,CAd0B,MAOjC,GAAA4Q,mCAAsC5M,EAAA,EAAAjF,cAAAe,QAOtCf,cAAAoF,SAOC,CAAAI,iBAAA,YANO,IAAAvE,MAAU,IAAI,CAChBgR,MAAC,IAAU,CAAAjR,KAAG,CAAAiR,KAAO,CAAW,IAClC,CAAAC,UAAK,CAAQC,OAACC,UAAA,YAAAnR,MACZO,QAAU,EACTwQ,WAAA,EACF,EACJ,EAAAC,MAEM,EAAPjS,cACWoF,SAAU,CAAAO,oBAAE,YACnB,KAAAuM,UAAa,EACdG,aAAA,KAAAH,UAAA,CAGI,EAAPlS,cACSoF,SAAW,CAAAuB,MAAA,CAAW,UAAG,CACjC,YAAA/C,KAAA,CAAAoO,UAAA,CAAAF,mCAAAQ,QAAA,CAAAC,IAAA,MAAAvR,KAAA,CAAAwR,QAAA,QA9B4BxS,cACnBoM,YAAA,EACR6F,MAAA,CA6BJ,EAhCmCjS,aAAT,EAAA8R,mCAAAzF,SAAA","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/src/warn/warnControlledUsage.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/controlled.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/ie11Detector.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\n\ntype WarningMap = { [id: string]: boolean };\n\nlet warningsMap: {\n  valueOnChange: WarningMap;\n  valueDefaultValue: WarningMap;\n  controlledToUncontrolled: WarningMap;\n  uncontrolledToControlled: WarningMap;\n};\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {},\n  };\n}\n\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings(): void {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n\nexport interface IWarnControlledUsageParams<P> {\n  /** ID of the component instance. Used to prevent showing warnings repeatedly. */\n  componentId: string;\n  /** Name of the component class. */\n  componentName: string;\n  /** Current props to evaluate. */\n  props: P;\n  /** Previous props to evaluate (undefined if called in the constructor). */\n  oldProps?: P;\n  /** Name of the prop for the controlled value. */\n  valueProp: keyof P;\n  /** Name of the prop for the uncontrolled initial value. */\n  defaultValueProp: keyof P;\n  /** Name of the change handler prop. */\n  onChangeProp: keyof P;\n  /** Name of the read-only prop. */\n  readOnlyProp?: keyof P;\n}\n\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage<P>(params: IWarnControlledUsageParams<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      componentId,\n      componentName,\n      defaultValueProp,\n      props,\n      oldProps,\n      onChangeProp,\n      readOnlyProp,\n      valueProp,\n    } = params;\n\n    // This warning logic closely follows what React does for native <input> elements.\n\n    const oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    const newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      const hasOnChange = !!props[onChangeProp];\n      const isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\n          `Warning: You provided a '${valueProp}' prop to a ${componentName} without an '${onChangeProp}' handler. ` +\n            `This will render a read-only field. If the field should be mutable use '${defaultValueProp}'. ` +\n            `Otherwise, set '${onChangeProp}'${readOnlyProp ? ` or '${readOnlyProp}'` : ''}.`,\n        );\n      }\n\n      // value and defaultValue are mutually exclusive\n      const defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\n          `Warning: You provided both '${valueProp}' and '${defaultValueProp}' to a ${componentName}. ` +\n            `Form fields must be either controlled or uncontrolled (specify either the '${valueProp}' prop, ` +\n            `or the '${defaultValueProp}' prop, but not both). Decide between using a controlled or uncontrolled ` +\n            `${componentName} and remove one of these props. More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      const oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      const newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      const warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\n          `Warning: A component is changing ${oldType} ${componentName} to be ${newType}. ` +\n            `${componentName}s should not switch from controlled to uncontrolled (or vice versa). ` +\n            `Decide between using controlled or uncontrolled for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n  }\n}\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import { getWindow } from './dom/getWindow';\n\nexport const isIE11 = (): boolean => {\n  const win = getWindow();\n\n  if (!win?.navigator?.userAgent) {\n    return false;\n  }\n\n  return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n","import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n","import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[81],{\n\n/***/ 2081:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"n\": function() { return /* binding */ TextField; }\n});\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/styled.js + 1 modules\nvar styled = __webpack_require__(3513);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(3499);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\nvar react = __webpack_require__(3370);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Label/Label.js + 2 modules\nvar Label = __webpack_require__(2697);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/Icon/Icon.js + 2 modules\nvar Icon = __webpack_require__(8415);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/classNamesFunction.js\nvar classNamesFunction = __webpack_require__(3568);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/initializeComponentRef.js\nvar initializeComponentRef = __webpack_require__(6651);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/Async.js\nvar Async = __webpack_require__(2598);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/getId.js\nvar getId = __webpack_require__(5561);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/DelayedRender.js\nvar DelayedRender = __webpack_require__(8262);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/warn/warnControlledUsage.js\n\n\nvar warningsMap;\nif (false) {}\n/** Reset controlled usage warnings for testing purposes. */\nfunction resetControlledWarnings() {\n    if (false) {}\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nfunction warnControlledUsage(params) {\n    if (false) { var warnMap, newType, oldType, defaultValue, isReadOnly, hasOnChange, newIsControlled, oldIsControlled, componentId, componentName, defaultValueProp, props, oldProps, onChangeProp, readOnlyProp, valueProp; }\n}\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/warn/warn.js\nvar warn = __webpack_require__(7291);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/controlled.js\n/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nfunction isControlled(props, valueProp) {\n    // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n    // Mirror that behavior here (rather than checking for just undefined).\n    return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/properties.js\nvar properties = __webpack_require__(784);\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/dom/getWindow.js\nvar getWindow = __webpack_require__(6451);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/utilities/lib/ie11Detector.js\n\nvar isIE11 = function () {\n    var _a;\n    var win = (0,getWindow/* getWindow */.J)();\n    if (!((_a = win === null || win === void 0 ? void 0 : win.navigator) === null || _a === void 0 ? void 0 : _a.userAgent)) {\n        return false;\n    }\n    return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/TextField/TextField.base.js\n\n\n\n\n\nvar getClassNames = (0,classNamesFunction/* classNamesFunction */.y)();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\nvar TextFieldBase = /** @class */ (function (_super) {\n    (0,tslib_es6/* __extends */.ZT)(TextFieldBase, _super);\n    function TextFieldBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._textElement = react.createRef();\n        _this._onFocus = function (ev) {\n            if (_this.props.onFocus) {\n                _this.props.onFocus(ev);\n            }\n            _this.setState({ isFocused: true }, function () {\n                if (_this.props.validateOnFocusIn) {\n                    _this._validate(_this.value);\n                }\n            });\n        };\n        _this._onBlur = function (ev) {\n            if (_this.props.onBlur) {\n                _this.props.onBlur(ev);\n            }\n            _this.setState({ isFocused: false }, function () {\n                if (_this.props.validateOnFocusOut) {\n                    _this._validate(_this.value);\n                }\n            });\n        };\n        _this._onRenderLabel = function (props) {\n            var label = props.label, required = props.required;\n            // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n            var labelStyles = _this._classNames.subComponentStyles\n                ? _this._classNames.subComponentStyles.label\n                : undefined;\n            if (label) {\n                return (react.createElement(Label/* Label */._, { required: required, htmlFor: _this._id, styles: labelStyles, disabled: props.disabled, id: _this._labelId }, props.label));\n            }\n            return null;\n        };\n        _this._onRenderDescription = function (props) {\n            if (props.description) {\n                return react.createElement(\"span\", { className: _this._classNames.description }, props.description);\n            }\n            return null;\n        };\n        _this._onRevealButtonClick = function (event) {\n            _this.setState(function (prevState) { return ({ isRevealingPassword: !prevState.isRevealingPassword }); });\n        };\n        _this._onInputChange = function (event) {\n            // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n            // which have *probably* been fixed now:\n            // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n            // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n            var _a, _b;\n            // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n            // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n            var element = event.target;\n            var value = element.value;\n            // Ignore this event if any of the following are true:\n            // - the value is undefined (in case one of the IE bugs comes back)\n            // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n            // - it's the same as the previous value\n            var previousValue = _getValue(_this.props, _this.state) || '';\n            if (value === undefined || value === _this._lastChangeValue || value === previousValue) {\n                _this._lastChangeValue = undefined;\n                return;\n            }\n            _this._lastChangeValue = value;\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);\n            if (!_this._isControlled) {\n                // ONLY if this is an uncontrolled component, update the displayed value.\n                // (Controlled components must update the `value` prop from `onChange`.)\n                _this.setState({ uncontrolledValue: value });\n            }\n        };\n        (0,initializeComponentRef/* initializeComponentRef */.l)(_this);\n        _this._async = new Async/* Async */.e(_this);\n        if (false) {}\n        _this._fallbackId = (0,getId/* getId */.z)(COMPONENT_NAME);\n        _this._descriptionId = (0,getId/* getId */.z)(COMPONENT_NAME + 'Description');\n        _this._labelId = (0,getId/* getId */.z)(COMPONENT_NAME + 'Label');\n        _this._prefixId = (0,getId/* getId */.z)(COMPONENT_NAME + 'Prefix');\n        _this._suffixId = (0,getId/* getId */.z)(COMPONENT_NAME + 'Suffix');\n        _this._warnControlledUsage();\n        var _a = props.defaultValue, defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n        if (typeof defaultValue === 'number') {\n            // This isn't allowed per the props, but happens anyway.\n            defaultValue = String(defaultValue);\n        }\n        _this.state = {\n            uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n            isFocused: false,\n            errorMessage: '',\n        };\n        _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n        _this._lastValidation = 0;\n        return _this;\n    }\n    Object.defineProperty(TextFieldBase.prototype, \"value\", {\n        /**\n         * Gets the current value of the text field.\n         */\n        get: function () {\n            return _getValue(this.props, this.state);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TextFieldBase.prototype.componentDidMount = function () {\n        this._adjustInputHeight();\n        if (this.props.validateOnLoad) {\n            this._validate(this.value);\n        }\n    };\n    TextFieldBase.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n    };\n    TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n        return {\n            selection: [this.selectionStart, this.selectionEnd],\n        };\n    };\n    TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n        var props = this.props;\n        var _a = (snapshot || {}).selection, selection = _a === void 0 ? [null, null] : _a;\n        var start = selection[0], end = selection[1];\n        if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n            // The text field has just changed between single- and multi-line, so we need to reset focus\n            // and selection/cursor.\n            this.focus();\n            if (start !== null && end !== null && start >= 0 && end >= 0) {\n                this.setSelectionRange(start, end);\n            }\n        }\n        if (prevProps.value !== props.value) {\n            // Only if the value in props changed, reset the record of the last value seen by a\n            // change/input event (don't do this if the value in state changed, since at least in tests\n            // the state update may happen before the second event in a series)\n            this._lastChangeValue = undefined;\n        }\n        var prevValue = _getValue(prevProps, prevState);\n        var value = this.value;\n        if (prevValue !== value) {\n            // Handle controlled/uncontrolled warnings and status\n            this._warnControlledUsage(prevProps);\n            // Clear error message if needed\n            // TODO: is there any way to do this without an extra render?\n            if (this.state.errorMessage && !props.errorMessage) {\n                this.setState({ errorMessage: '' });\n            }\n            // Adjust height if needed based on new value\n            this._adjustInputHeight();\n            // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n            // This seems a bit odd and hard to integrate with the new approach.\n            // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n            if (_shouldValidateAllChanges(props)) {\n                this._delayedValidate(value);\n            }\n        }\n    };\n    TextFieldBase.prototype.render = function () {\n        var _a = this.props, borderless = _a.borderless, className = _a.className, disabled = _a.disabled, invalid = _a.invalid, iconProps = _a.iconProps, inputClassName = _a.inputClassName, label = _a.label, multiline = _a.multiline, required = _a.required, underlined = _a.underlined, prefix = _a.prefix, resizable = _a.resizable, suffix = _a.suffix, theme = _a.theme, styles = _a.styles, autoAdjustHeight = _a.autoAdjustHeight, canRevealPassword = _a.canRevealPassword, revealPasswordAriaLabel = _a.revealPasswordAriaLabel, type = _a.type, _b = _a.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n        var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;\n        var errorMessage = this._errorMessage;\n        var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n        var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n        var classNames = (this._classNames = getClassNames(styles, {\n            theme: theme,\n            className: className,\n            disabled: disabled,\n            focused: isFocused,\n            required: required,\n            multiline: multiline,\n            hasLabel: !!label,\n            hasErrorMessage: isInvalid,\n            borderless: borderless,\n            resizable: resizable,\n            hasIcon: !!iconProps,\n            underlined: underlined,\n            inputClassName: inputClassName,\n            autoAdjustHeight: autoAdjustHeight,\n            hasRevealButton: hasRevealButton,\n        }));\n        return (\n        // eslint-disable-next-line deprecation/deprecation\n        react.createElement(\"div\", { ref: this.props.elementRef, className: classNames.root },\n            react.createElement(\"div\", { className: classNames.wrapper },\n                onRenderLabel(this.props, this._onRenderLabel),\n                react.createElement(\"div\", { className: classNames.fieldGroup },\n                    (prefix !== undefined || this.props.onRenderPrefix) && (react.createElement(\"div\", { className: classNames.prefix, id: this._prefixId }, onRenderPrefix(this.props, this._onRenderPrefix))),\n                    multiline ? this._renderTextArea() : this._renderInput(),\n                    iconProps && react.createElement(Icon/* Icon */.J, (0,tslib_es6/* __assign */.pi)({ className: classNames.icon }, iconProps)),\n                    hasRevealButton && (\n                    // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n                    react.createElement(\"button\", { \"aria-label\": revealPasswordAriaLabel, className: classNames.revealButton, onClick: this._onRevealButtonClick, \"aria-pressed\": !!isRevealingPassword, type: \"button\" },\n                        react.createElement(\"span\", { className: classNames.revealSpan },\n                            react.createElement(Icon/* Icon */.J, { className: classNames.revealIcon, iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME })))),\n                    (suffix !== undefined || this.props.onRenderSuffix) && (react.createElement(\"div\", { className: classNames.suffix, id: this._suffixId }, onRenderSuffix(this.props, this._onRenderSuffix))))),\n            this._isDescriptionAvailable && (react.createElement(\"span\", { id: this._descriptionId },\n                onRenderDescription(this.props, this._onRenderDescription),\n                errorMessage && (react.createElement(\"div\", { role: \"alert\" },\n                    react.createElement(DelayedRender/* DelayedRender */.U, null, this._renderErrorMessage())))))));\n    };\n    /**\n     * Sets focus on the text field\n     */\n    TextFieldBase.prototype.focus = function () {\n        if (this._textElement.current) {\n            this._textElement.current.focus();\n        }\n    };\n    /**\n     * Blurs the text field.\n     */\n    TextFieldBase.prototype.blur = function () {\n        if (this._textElement.current) {\n            this._textElement.current.blur();\n        }\n    };\n    /**\n     * Selects the text field\n     */\n    TextFieldBase.prototype.select = function () {\n        if (this._textElement.current) {\n            this._textElement.current.select();\n        }\n    };\n    /**\n     * Sets the selection start of the text field to a specified value\n     */\n    TextFieldBase.prototype.setSelectionStart = function (value) {\n        if (this._textElement.current) {\n            this._textElement.current.selectionStart = value;\n        }\n    };\n    /**\n     * Sets the selection end of the text field to a specified value\n     */\n    TextFieldBase.prototype.setSelectionEnd = function (value) {\n        if (this._textElement.current) {\n            this._textElement.current.selectionEnd = value;\n        }\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n        /**\n         * Gets the selection start of the text field\n         */\n        get: function () {\n            return this._textElement.current ? this._textElement.current.selectionStart : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n        /**\n         * Gets the selection end of the text field\n         */\n        get: function () {\n            return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the start and end positions of a selection in a text field.\n     * @param start - Index of the start of the selection.\n     * @param end - Index of the end of the selection.\n     */\n    TextFieldBase.prototype.setSelectionRange = function (start, end) {\n        if (this._textElement.current) {\n            this._textElement.current.setSelectionRange(start, end);\n        }\n    };\n    TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n        // Show warnings if props are being used in an invalid way\n        warnControlledUsage({\n            componentId: this._id,\n            componentName: COMPONENT_NAME,\n            props: this.props,\n            oldProps: prevProps,\n            valueProp: 'value',\n            defaultValueProp: 'defaultValue',\n            onChangeProp: 'onChange',\n            readOnlyProp: 'readOnly',\n        });\n        if (this.props.value === null && !this._hasWarnedNullValue) {\n            this._hasWarnedNullValue = true;\n            (0,warn/* warn */.Z)(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" +\n                'empty string to clear the component or undefined to indicate an uncontrolled component.');\n        }\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n        /** Returns `props.id` if available, or a fallback if not. */\n        get: function () {\n            return this.props.id || this._fallbackId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n        get: function () {\n            return isControlled(this.props, 'value');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TextFieldBase.prototype._onRenderPrefix = function (props) {\n        var prefix = props.prefix;\n        return react.createElement(\"span\", { style: { paddingBottom: '1px' } }, prefix);\n    };\n    TextFieldBase.prototype._onRenderSuffix = function (props) {\n        var suffix = props.suffix;\n        return react.createElement(\"span\", { style: { paddingBottom: '1px' } }, suffix);\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n        /**\n         * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n         *\n         * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n         * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n         */\n        get: function () {\n            var _a = this.props.errorMessage, errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n            return errorMessage || '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Renders error message based on the type of the message.\n     *\n     * - If error message is string, it will render using the built in styles.\n     * - If error message is an element, user has full control over how it's rendered.\n     */\n    TextFieldBase.prototype._renderErrorMessage = function () {\n        var errorMessage = this._errorMessage;\n        return errorMessage ? (typeof errorMessage === 'string' ? (react.createElement(\"p\", { className: this._classNames.errorMessage },\n            react.createElement(\"span\", { \"data-automation-id\": \"error-message\" }, errorMessage))) : (react.createElement(\"div\", { className: this._classNames.errorMessage, \"data-automation-id\": \"error-message\" }, errorMessage))) : null;\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n        /**\n         * If a custom description render function is supplied then treat description as always available.\n         * Otherwise defer to the presence of description or error message text.\n         */\n        get: function () {\n            var props = this.props;\n            return !!(props.onRenderDescription || props.description || this._errorMessage);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TextFieldBase.prototype._renderTextArea = function () {\n        var _a = this.props.invalid, invalid = _a === void 0 ? !!this._errorMessage : _a;\n        var textAreaProps = (0,properties/* getNativeProps */.pq)(this.props, properties/* textAreaProperties */.FI, ['defaultValue']);\n        var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n        return (react.createElement(\"textarea\", (0,tslib_es6/* __assign */.pi)({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], \"aria-invalid\": invalid, \"aria-label\": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur })));\n    };\n    TextFieldBase.prototype._renderInput = function () {\n        var _a = this.props, ariaLabel = _a.ariaLabel, _b = _a.invalid, invalid = _b === void 0 ? !!this._errorMessage : _b, onRenderPrefix = _a.onRenderPrefix, onRenderSuffix = _a.onRenderSuffix, prefix = _a.prefix, suffix = _a.suffix, _c = _a.type, type = _c === void 0 ? 'text' : _c, label = _a.label;\n        // build aria-labelledby list from label, prefix, and suffix\n        var labelIds = [];\n        label && labelIds.push(this._labelId);\n        (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n        (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n        var inputProps = (0,tslib_es6/* __assign */.pi)((0,tslib_es6/* __assign */.pi)({ type: this.state.isRevealingPassword ? 'text' : type, id: this._id }, (0,properties/* getNativeProps */.pq)(this.props, properties/* inputProperties */.Gg, ['defaultValue', 'type'])), { 'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined), ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, 'aria-label': ariaLabel, 'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], 'aria-invalid': invalid, onFocus: this._onFocus, onBlur: this._onBlur });\n        var defaultRender = function (updatedInputProps) {\n            return react.createElement(\"input\", (0,tslib_es6/* __assign */.pi)({}, updatedInputProps));\n        };\n        var onRenderInput = this.props.onRenderInput || defaultRender;\n        return onRenderInput(inputProps, defaultRender);\n    };\n    TextFieldBase.prototype._validate = function (value) {\n        var _this = this;\n        // In case _validate is called again while validation promise is executing\n        if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n            return;\n        }\n        this._latestValidateValue = value;\n        var onGetErrorMessage = this.props.onGetErrorMessage;\n        var result = onGetErrorMessage && onGetErrorMessage(value || '');\n        if (result !== undefined) {\n            if (typeof result === 'string' || !('then' in result)) {\n                this.setState({ errorMessage: result });\n                this._notifyAfterValidate(value, result);\n            }\n            else {\n                var currentValidation_1 = ++this._lastValidation;\n                result.then(function (errorMessage) {\n                    if (currentValidation_1 === _this._lastValidation) {\n                        _this.setState({ errorMessage: errorMessage });\n                    }\n                    _this._notifyAfterValidate(value, errorMessage);\n                });\n            }\n        }\n        else {\n            this._notifyAfterValidate(value, '');\n        }\n    };\n    TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n        if (value === this.value && this.props.onNotifyValidationResult) {\n            this.props.onNotifyValidationResult(errorMessage, value);\n        }\n    };\n    TextFieldBase.prototype._adjustInputHeight = function () {\n        if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n            var textField = this._textElement.current;\n            textField.style.height = '';\n            textField.style.height = textField.scrollHeight + 'px';\n        }\n    };\n    TextFieldBase.defaultProps = {\n        resizable: true,\n        deferredValidationTime: 200,\n        validateOnLoad: true,\n    };\n    return TextFieldBase;\n}(react.Component));\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props, state) {\n    var _a = props.value, value = _a === void 0 ? state.uncontrolledValue : _a;\n    if (typeof value === 'number') {\n        // not allowed per typings, but happens anyway\n        return String(value);\n    }\n    return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props) {\n    return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n// Only calculate this once across all TextFields, since will stay the same\nvar __browserNeedsRevealButton;\nfunction _browserNeedsRevealButton() {\n    if (typeof __browserNeedsRevealButton !== 'boolean') {\n        var win = (0,getWindow/* getWindow */.J)();\n        if (win === null || win === void 0 ? void 0 : win.navigator) {\n            // Edge, Chromium Edge\n            var isEdge = /Edg/.test(win.navigator.userAgent || '');\n            __browserNeedsRevealButton = !(isIE11() || isEdge);\n        }\n        else {\n            __browserNeedsRevealButton = true;\n        }\n    }\n    return __browserNeedsRevealButton;\n}\n\n// EXTERNAL MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+style-utilities@8.8.3_fan5qbzahqtxlm5dzefqlqx5ia/node_modules/@fluentui/style-utilities/lib/index.js + 21 modules\nvar lib = __webpack_require__(3349);\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/TextField/TextField.styles.js\n\n\nvar globalClassNames = {\n    root: 'ms-TextField',\n    description: 'ms-TextField-description',\n    errorMessage: 'ms-TextField-errorMessage',\n    field: 'ms-TextField-field',\n    fieldGroup: 'ms-TextField-fieldGroup',\n    prefix: 'ms-TextField-prefix',\n    suffix: 'ms-TextField-suffix',\n    wrapper: 'ms-TextField-wrapper',\n    revealButton: 'ms-TextField-reveal',\n    multiline: 'ms-TextField--multiline',\n    borderless: 'ms-TextField--borderless',\n    underlined: 'ms-TextField--underlined',\n    unresizable: 'ms-TextField--unresizable',\n    required: 'is-required',\n    disabled: 'is-disabled',\n    active: 'is-active',\n};\nfunction getLabelStyles(props) {\n    var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;\n    var palette = theme.palette, fonts = theme.fonts;\n    return function () {\n        var _a;\n        return ({\n            root: [\n                underlined &&\n                    disabled && {\n                    color: palette.neutralTertiary,\n                },\n                underlined && {\n                    fontSize: fonts.medium.fontSize,\n                    marginRight: 8,\n                    paddingLeft: 12,\n                    paddingRight: 0,\n                    lineHeight: '22px',\n                    height: 32,\n                },\n                underlined &&\n                    focused && {\n                    selectors: (_a = {},\n                        _a[lib/* HighContrastSelector */.qJ] = {\n                            height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n                        },\n                        _a),\n                },\n            ],\n        });\n    };\n}\nfunction getStyles(props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;\n    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;\n    var classNames = (0,lib/* getGlobalClassNames */.Cn)(globalClassNames, theme);\n    var fieldPrefixSuffix = {\n        // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n        background: semanticColors.disabledBackground,\n        color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 10px',\n        lineHeight: 1,\n        whiteSpace: 'nowrap',\n        flexShrink: 0,\n        selectors: (_a = {},\n            _a[lib/* HighContrastSelector */.qJ] = {\n                background: 'Window',\n                color: disabled ? 'GrayText' : 'WindowText',\n            },\n            _a),\n    };\n    // placeholder style constants\n    var placeholderStyles = [\n        {\n            color: semanticColors.inputPlaceholderText,\n            opacity: 1,\n            selectors: (_b = {},\n                _b[lib/* HighContrastSelector */.qJ] = {\n                    color: 'GrayText',\n                },\n                _b),\n        },\n    ];\n    var disabledPlaceholderStyles = {\n        color: semanticColors.disabledText,\n        selectors: (_c = {},\n            _c[lib/* HighContrastSelector */.qJ] = {\n                color: 'GrayText',\n            },\n            _c),\n    };\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            required && classNames.required,\n            disabled && classNames.disabled,\n            focused && classNames.active,\n            multiline && classNames.multiline,\n            borderless && classNames.borderless,\n            underlined && classNames.underlined,\n            lib/* normalize */.Fv,\n            {\n                position: 'relative',\n            },\n            className,\n        ],\n        wrapper: [\n            classNames.wrapper,\n            underlined && [\n                {\n                    display: 'flex',\n                    borderBottom: \"1px solid \" + (!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),\n                    width: '100%',\n                },\n                disabled && {\n                    borderBottomColor: semanticColors.disabledBackground,\n                    selectors: (_d = {},\n                        _d[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ borderColor: 'GrayText' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                        _d),\n                },\n                !disabled && {\n                    selectors: {\n                        ':hover': {\n                            borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n                            selectors: (_e = {},\n                                _e[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ borderBottomColor: 'Highlight' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                                _e),\n                        },\n                    },\n                },\n                focused && [\n                    {\n                        position: 'relative',\n                    },\n                    (0,lib/* getInputFocusStyle */.$Y)(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, 'borderBottom'),\n                ],\n            ],\n        ],\n        fieldGroup: [\n            classNames.fieldGroup,\n            lib/* normalize */.Fv,\n            {\n                border: \"1px solid \" + semanticColors.inputBorder,\n                borderRadius: effects.roundedCorner2,\n                background: semanticColors.inputBackground,\n                cursor: 'text',\n                height: 32,\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'stretch',\n                position: 'relative',\n            },\n            multiline && {\n                minHeight: '60px',\n                height: 'auto',\n                display: 'flex',\n            },\n            !focused &&\n                !disabled && {\n                selectors: {\n                    ':hover': {\n                        borderColor: semanticColors.inputBorderHovered,\n                        selectors: (_f = {},\n                            _f[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ borderColor: 'Highlight' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                            _f),\n                    },\n                },\n            },\n            focused &&\n                !underlined &&\n                (0,lib/* getInputFocusStyle */.$Y)(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),\n            disabled && {\n                borderColor: semanticColors.disabledBackground,\n                selectors: (_g = {},\n                    _g[lib/* HighContrastSelector */.qJ] = (0,tslib_es6/* __assign */.pi)({ borderColor: 'GrayText' }, (0,lib/* getHighContrastNoAdjustStyle */.xM)()),\n                    _g),\n                cursor: 'default',\n            },\n            borderless && {\n                border: 'none',\n            },\n            borderless &&\n                focused && {\n                border: 'none',\n                selectors: {\n                    ':after': {\n                        border: 'none',\n                    },\n                },\n            },\n            underlined && {\n                flex: '1 1 0px',\n                border: 'none',\n                textAlign: 'left',\n            },\n            underlined &&\n                disabled && {\n                backgroundColor: 'transparent',\n            },\n            hasErrorMessage &&\n                !underlined && {\n                borderColor: semanticColors.errorText,\n                selectors: {\n                    '&:hover': {\n                        borderColor: semanticColors.errorText,\n                    },\n                },\n            },\n            !hasLabel &&\n                required && {\n                selectors: (_h = {\n                        ':before': {\n                            content: \"'*'\",\n                            color: semanticColors.errorText,\n                            position: 'absolute',\n                            top: -5,\n                            right: -10,\n                        }\n                    },\n                    _h[lib/* HighContrastSelector */.qJ] = {\n                        selectors: {\n                            ':before': {\n                                color: 'WindowText',\n                                right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                            },\n                        },\n                    },\n                    _h),\n            },\n        ],\n        field: [\n            fonts.medium,\n            classNames.field,\n            lib/* normalize */.Fv,\n            {\n                borderRadius: 0,\n                border: 'none',\n                background: 'none',\n                backgroundColor: 'transparent',\n                color: semanticColors.inputText,\n                padding: '0 8px',\n                width: '100%',\n                minWidth: 0,\n                textOverflow: 'ellipsis',\n                outline: 0,\n                selectors: (_j = {\n                        '&:active, &:focus, &:hover': { outline: 0 },\n                        '::-ms-clear': {\n                            display: 'none',\n                        }\n                    },\n                    _j[lib/* HighContrastSelector */.qJ] = {\n                        background: 'Window',\n                        color: disabled ? 'GrayText' : 'WindowText',\n                    },\n                    _j),\n            },\n            (0,lib/* getPlaceholderStyles */.Sv)(placeholderStyles),\n            multiline &&\n                !resizable && [\n                classNames.unresizable,\n                {\n                    resize: 'none',\n                },\n            ],\n            multiline && {\n                minHeight: 'inherit',\n                lineHeight: 17,\n                flexGrow: 1,\n                paddingTop: 6,\n                paddingBottom: 6,\n                overflow: 'auto',\n                width: '100%',\n            },\n            multiline &&\n                autoAdjustHeight && {\n                overflow: 'hidden',\n            },\n            hasIcon &&\n                !hasRevealButton && {\n                paddingRight: 24,\n            },\n            multiline &&\n                hasIcon && {\n                paddingRight: 40,\n            },\n            disabled && [\n                {\n                    backgroundColor: semanticColors.disabledBackground,\n                    color: semanticColors.disabledText,\n                    borderColor: semanticColors.disabledBackground,\n                },\n                (0,lib/* getPlaceholderStyles */.Sv)(disabledPlaceholderStyles),\n            ],\n            underlined && {\n                textAlign: 'left',\n            },\n            focused &&\n                !borderless && {\n                selectors: (_k = {},\n                    _k[lib/* HighContrastSelector */.qJ] = {\n                        paddingLeft: 11,\n                        paddingRight: 11,\n                    },\n                    _k),\n            },\n            focused &&\n                multiline &&\n                !borderless && {\n                selectors: (_l = {},\n                    _l[lib/* HighContrastSelector */.qJ] = {\n                        paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n                    },\n                    _l),\n            },\n            inputClassName,\n        ],\n        icon: [\n            multiline && {\n                paddingRight: 24,\n                alignItems: 'flex-end',\n            },\n            {\n                pointerEvents: 'none',\n                position: 'absolute',\n                bottom: 6,\n                right: 8,\n                top: 'auto',\n                fontSize: lib/* IconFontSizes.medium */.ld.medium,\n                lineHeight: 18,\n            },\n            disabled && {\n                color: semanticColors.disabledText,\n            },\n        ],\n        description: [\n            classNames.description,\n            {\n                color: semanticColors.bodySubtext,\n                fontSize: fonts.xSmall.fontSize,\n            },\n        ],\n        errorMessage: [\n            classNames.errorMessage,\n            lib/* AnimationClassNames.slideDownIn20 */.k4.slideDownIn20,\n            fonts.small,\n            {\n                color: semanticColors.errorText,\n                margin: 0,\n                paddingTop: 5,\n                display: 'flex',\n                alignItems: 'center',\n            },\n        ],\n        prefix: [classNames.prefix, fieldPrefixSuffix],\n        suffix: [classNames.suffix, fieldPrefixSuffix],\n        revealButton: [\n            classNames.revealButton,\n            'ms-Button',\n            'ms-Button--icon',\n            (0,lib/* getFocusStyle */.GL)(theme, { inset: 1 }),\n            {\n                height: 30,\n                width: 32,\n                border: 'none',\n                padding: '0px 4px',\n                backgroundColor: 'transparent',\n                color: semanticColors.link,\n                selectors: {\n                    ':hover': {\n                        outline: 0,\n                        color: semanticColors.primaryButtonBackgroundHovered,\n                        backgroundColor: semanticColors.buttonBackgroundHovered,\n                        selectors: (_m = {},\n                            _m[lib/* HighContrastSelector */.qJ] = {\n                                borderColor: 'Highlight',\n                                color: 'Highlight',\n                            },\n                            _m),\n                    },\n                    ':focus': { outline: 0 },\n                },\n            },\n            hasIcon && {\n                marginRight: 28,\n            },\n        ],\n        revealSpan: {\n            display: 'flex',\n            height: '100%',\n            alignItems: 'center',\n        },\n        revealIcon: {\n            margin: '0px 4px',\n            pointerEvents: 'none',\n            bottom: 6,\n            right: 8,\n            top: 'auto',\n            fontSize: lib/* IconFontSizes.medium */.ld.medium,\n            lineHeight: 18,\n        },\n        subComponentStyles: {\n            label: getLabelStyles(props),\n        },\n    };\n}\n\n;// CONCATENATED MODULE: ../../common/temp/node_modules/.pnpm/@fluentui+react@8.101.1_2zx2umvpluuhvlq44va5bta2da/node_modules/@fluentui/react/lib/components/TextField/TextField.js\n\n\n\nvar TextField = (0,styled/* styled */.z)(TextFieldBase, getStyles, undefined, {\n    scope: 'TextField',\n});\n\n\n/***/ }),\n\n/***/ 8262:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"U\": function() { return /* binding */ DelayedRender; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3499);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3370);\n/* harmony import */ var _dom_getWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6451);\n\n\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__extends */ .ZT)(DelayedRender, _super);\n    function DelayedRender(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            isRendered: (0,_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__/* .getWindow */ .J)() === undefined,\n        };\n        return _this;\n    }\n    DelayedRender.prototype.componentDidMount = function () {\n        var _this = this;\n        var delay = this.props.delay;\n        this._timeoutId = window.setTimeout(function () {\n            _this.setState({\n                isRendered: true,\n            });\n        }, delay);\n    };\n    DelayedRender.prototype.componentWillUnmount = function () {\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n        }\n    };\n    DelayedRender.prototype.render = function () {\n        return this.state.isRendered ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children) : null;\n    };\n    DelayedRender.defaultProps = {\n        delay: 0,\n    };\n    return DelayedRender;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","TextField","__browserNeedsRevealButton","styled","tslib_es6","react","Label","Icon","classNamesFunction","initializeComponentRef","Async","getId","DelayedRender","warn","properties","getWindow","isIE11","_a","win","J","navigator","userAgent","indexOf","getClassNames","y","COMPONENT_NAME","TextFieldBase","_super","props","_this","call","_textElement","createRef","_onFocus","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","undefined","createElement","_","htmlFor","_id","styles","disabled","id","_labelId","_onRenderDescription","description","className","_onRevealButtonClick","event","prevState","isRevealingPassword","_onInputChange","_b","element","target","previousValue","_getValue","state","_lastChangeValue","onChange","_isControlled","uncontrolledValue","l","_async","e","_fallbackId","z","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","ZT","Object","defineProperty","prototype","get","enumerable","configurable","componentDidMount","_adjustInputHeight","validateOnLoad","componentWillUnmount","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","multiline","focus","setSelectionRange","prevValue","_shouldValidateAllChanges","render","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","_c","onRenderSuffix","_onRenderSuffix","_d","onRenderLabel","_e","onRenderDescription","_f","_errorMessage","hasRevealButton","_browserNeedsRevealButton","isEdge","test","classNames","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","root","wrapper","fieldGroup","_renderTextArea","_renderInput","pi","icon","revealButton","onClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","U","_renderErrorMessage","current","blur","select","setSelectionStart","setSelectionEnd","params","_hasWarnedNullValue","Z","valueProp","style","paddingBottom","textAreaProps","pq","FI","ariaLabelledBy","onInput","field","ariaLabel","readOnly","labelIds","inputProps","Gg","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","currentValidation_1","then","_notifyAfterValidate","onNotifyValidationResult","textField","height","scrollHeight","defaultProps","Component","lib","globalClassNames","unresizable","active","palette","fonts","_g","_h","_j","_k","_l","_m","semanticColors","effects","Cn","fieldPrefixSuffix","background","disabledBackground","color","disabledText","inputPlaceholderText","display","alignItems","padding","lineHeight","whiteSpace","flexShrink","selectors","qJ","placeholderStyles","opacity","disabledPlaceholderStyles","medium","Fv","position","borderBottom","errorText","inputBorder","width","borderBottomColor","borderColor","xM","inputBorderHovered","$Y","inputFocusBorderAlt","border","borderRadius","roundedCorner2","inputBackground","cursor","flexDirection","minHeight","flex","textAlign","backgroundColor","content","top","right","inputText","minWidth","textOverflow","outline","Sv","resize","flexGrow","paddingTop","overflow","paddingRight","paddingLeft","pointerEvents","bottom","fontSize","ld","bodySubtext","xSmall","k4","slideDownIn20","small","margin","GL","inset","link","primaryButtonBackgroundHovered","buttonBackgroundHovered","marginRight","neutralTertiary","scope","tslib__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0__","_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__","isRendered","delay","_timeoutId","window","setTimeout","clearTimeout","Children","only","children"],"sourceRoot":""}